
sketch_sep10a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00003edc  00003f70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003edc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f5  0080019a  0080019a  0000400a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000400a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000403c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000978  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015ec2  00000000  00000000  000049f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d5e  00000000  00000000  0001a8b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005c02  00000000  00000000  0001d614  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002980  00000000  00000000  00023218  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e9b  00000000  00000000  00025b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001266f  00000000  00000000  00029a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b38  00000000  00000000  0003c0a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__ctors_end>
       4:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
       8:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
       c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      10:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      14:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      18:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      1c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      20:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      24:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      28:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      2c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      30:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      34:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      38:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      3c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      40:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__vector_16>
      44:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      48:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__vector_18>
      4c:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__vector_19>
      50:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      54:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      58:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      5c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      60:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      64:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 05       	cpc	r19, r15
      96:	a8 4c       	sbci	r26, 0xC8	; 200
      98:	cd b2       	in	r12, 0x1d	; 29
      9a:	d4 4e       	sbci	r29, 0xE4	; 228
      9c:	b9 38       	cpi	r27, 0x89	; 137
      9e:	36 a9       	ldd	r19, Z+54	; 0x36
      a0:	02 0c       	add	r0, r2
      a2:	50 b9       	out	0x00, r21	; 0
      a4:	91 86       	std	Z+9, r9	; 0x09
      a6:	88 08       	sbc	r8, r8
      a8:	3c a6       	std	Y+44, r3	; 0x2c
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	2a be       	out	0x3a, r2	; 58
      ae:	00 00       	nop
      b0:	00 80       	ld	r0, Z
      b2:	3f 00       	.word	0x003f	; ????

000000b4 <__trampolines_end>:
      b4:	00 00       	nop
      b6:	00 08       	sbc	r0, r0
      b8:	00 02       	muls	r16, r16
      ba:	01 00       	.word	0x0001	; ????
      bc:	00 03       	mulsu	r16, r16
      be:	04 07       	cpc	r16, r20
	...

000000c8 <digital_pin_to_bit_mask_PGM>:
      c8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d8:	04 08 10 20                                         ... 

000000dc <digital_pin_to_port_PGM>:
      dc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ec:	03 03 03 03                                         ....

000000f0 <port_to_output_PGM>:
      f0:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000fa <port_to_mode_PGM>:
      fa:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000104 <_ZL4font>:
     104:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     114:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     124:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     134:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     144:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     154:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     164:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     174:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     184:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     194:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     1a4:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1b4:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     1c4:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     1d4:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     1e4:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     1f4:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     204:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     214:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     224:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     234:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     244:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     254:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     264:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     274:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     284:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     294:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     2a4:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     2b4:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     2c4:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     2d4:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     2e4:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     2f4:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     304:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     314:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     324:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     334:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     344:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     354:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     364:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     374:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     384:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     394:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     3a4:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     3b4:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     3c4:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     3d4:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     3e4:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     3f4:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     404:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     414:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     424:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     434:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     444:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     454:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     464:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     474:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     484:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     494:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     4a4:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     4b4:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     4c4:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     4d4:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     4e4:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     4f4:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     504:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     514:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     524:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     534:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     544:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     554:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     564:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     574:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     584:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     594:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     5a4:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     5b4:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     5c4:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     5d4:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     5e4:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     5f4:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000604 <_ZL5Rcmd3>:
     604:	04 e0 10 02 1c 07 12 37 32 29 2d 29 25 2b 39 00     .......72)-)%+9.
     614:	01 03 10 e1 10 03 1d 07 06 2e 2c 29 2d 2e 2e 37     ..........,)-..7
     624:	3f 00 00 02 10 13 80 0a 29 80 64                    ?.......).d

0000062f <_ZL16Rcmd2green160x80>:
     62f:	02 2a 04 00 00 00 7f 2b 04 00 00 00 9f              .*.....+.....

0000063c <_ZL13Rcmd2green144>:
     63c:	02 2a 04 00 00 00 7f 2b 04 00 00 00 7f              .*.....+.....

00000649 <_ZL8Rcmd2red>:
     649:	02 2a 04 00 00 00 7f 2b 04 00 00 00 9f              .*.....+.....

00000656 <_ZL10Rcmd2green>:
     656:	02 2a 04 00 02 00 81 2b 04 00 01 00 a0              .*.....+.....

00000663 <_ZL5Rcmd1>:
     663:	0f 01 80 96 11 80 ff b1 03 01 2c 2d b2 03 01 2c     ..........,-...,
     673:	2d b3 06 01 2c 2d 01 2c 2d b4 01 07 c0 03 a2 02     -...,-.,-.......
     683:	84 c1 01 c5 c2 02 0a 00 c3 02 8a 2a c4 02 8a ee     ...........*....
     693:	c5 01 0e 20 00 36 01 c8 3a 01 05                    ... .6..:..

0000069e <__ctors_start>:
     69e:	aa 06       	cpc	r10, r26
     6a0:	11 0e       	add	r1, r17
     6a2:	8d 1c       	adc	r8, r13

000006a4 <__ctors_end>:
     6a4:	11 24       	eor	r1, r1
     6a6:	1f be       	out	0x3f, r1	; 63
     6a8:	cf ef       	ldi	r28, 0xFF	; 255
     6aa:	d8 e0       	ldi	r29, 0x08	; 8
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	cd bf       	out	0x3d, r28	; 61

000006b0 <__do_copy_data>:
     6b0:	11 e0       	ldi	r17, 0x01	; 1
     6b2:	a0 e0       	ldi	r26, 0x00	; 0
     6b4:	b1 e0       	ldi	r27, 0x01	; 1
     6b6:	ec ed       	ldi	r30, 0xDC	; 220
     6b8:	fe e3       	ldi	r31, 0x3E	; 62
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <__do_copy_data+0x10>
     6bc:	05 90       	lpm	r0, Z+
     6be:	0d 92       	st	X+, r0
     6c0:	aa 39       	cpi	r26, 0x9A	; 154
     6c2:	b1 07       	cpc	r27, r17
     6c4:	d9 f7       	brne	.-10     	; 0x6bc <__do_copy_data+0xc>

000006c6 <__do_clear_bss>:
     6c6:	23 e0       	ldi	r18, 0x03	; 3
     6c8:	aa e9       	ldi	r26, 0x9A	; 154
     6ca:	b1 e0       	ldi	r27, 0x01	; 1
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <.do_clear_bss_start>

000006ce <.do_clear_bss_loop>:
     6ce:	1d 92       	st	X+, r1

000006d0 <.do_clear_bss_start>:
     6d0:	af 38       	cpi	r26, 0x8F	; 143
     6d2:	b2 07       	cpc	r27, r18
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <.do_clear_bss_loop>

000006d6 <__do_global_ctors>:
     6d6:	13 e0       	ldi	r17, 0x03	; 3
     6d8:	c2 e5       	ldi	r28, 0x52	; 82
     6da:	d3 e0       	ldi	r29, 0x03	; 3
     6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <__do_global_ctors+0x10>
     6de:	21 97       	sbiw	r28, 0x01	; 1
     6e0:	fe 01       	movw	r30, r28
     6e2:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__tablejump2__>
     6e6:	cf 34       	cpi	r28, 0x4F	; 79
     6e8:	d1 07       	cpc	r29, r17
     6ea:	c9 f7       	brne	.-14     	; 0x6de <__do_global_ctors+0x8>
     6ec:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <main>
     6f0:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <_exit>

000006f4 <__bad_interrupt>:
     6f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006f8 <_Z4set2v>:
	return sqrt(sq(WSx) + sq(WSy));
}

float getWindAngle(float WSy, float WSx) {

	return atan(WSy / WSx);
     6f8:	e7 e6       	ldi	r30, 0x67	; 103
     6fa:	f2 e0       	ldi	r31, 0x02	; 2
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	a0 e7       	ldi	r26, 0x70	; 112
     702:	b1 ec       	ldi	r27, 0xC1	; 193
     704:	80 83       	st	Z, r24
     706:	91 83       	std	Z+1, r25	; 0x01
     708:	a2 83       	std	Z+2, r26	; 0x02
     70a:	b3 83       	std	Z+3, r27	; 0x03
     70c:	82 eb       	ldi	r24, 0xB2	; 178
     70e:	9d e9       	ldi	r25, 0x9D	; 157
     710:	af e0       	ldi	r26, 0x0F	; 15
     712:	bf e3       	ldi	r27, 0x3F	; 63
     714:	84 83       	std	Z+4, r24	; 0x04
     716:	95 83       	std	Z+5, r25	; 0x05
     718:	a6 83       	std	Z+6, r26	; 0x06
     71a:	b7 83       	std	Z+7, r27	; 0x07
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	a8 e4       	ldi	r26, 0x48	; 72
     722:	b1 ec       	ldi	r27, 0xC1	; 193
     724:	80 87       	std	Z+8, r24	; 0x08
     726:	91 87       	std	Z+9, r25	; 0x09
     728:	a2 87       	std	Z+10, r26	; 0x0a
     72a:	b3 87       	std	Z+11, r27	; 0x0b
     72c:	82 e5       	ldi	r24, 0x52	; 82
     72e:	98 eb       	ldi	r25, 0xB8	; 184
     730:	ae e1       	ldi	r26, 0x1E	; 30
     732:	bf e3       	ldi	r27, 0x3F	; 63
     734:	84 87       	std	Z+12, r24	; 0x0c
     736:	95 87       	std	Z+13, r25	; 0x0d
     738:	a6 87       	std	Z+14, r26	; 0x0e
     73a:	b7 87       	std	Z+15, r27	; 0x0f
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	a0 e2       	ldi	r26, 0x20	; 32
     742:	b1 ec       	ldi	r27, 0xC1	; 193
     744:	80 8b       	std	Z+16, r24	; 0x10
     746:	91 8b       	std	Z+17, r25	; 0x11
     748:	a2 8b       	std	Z+18, r26	; 0x12
     74a:	b3 8b       	std	Z+19, r27	; 0x13
     74c:	80 e6       	ldi	r24, 0x60	; 96
     74e:	95 ee       	ldi	r25, 0xE5	; 229
     750:	a0 e3       	ldi	r26, 0x30	; 48
     752:	bf e3       	ldi	r27, 0x3F	; 63
     754:	84 8b       	std	Z+20, r24	; 0x14
     756:	95 8b       	std	Z+21, r25	; 0x15
     758:	a6 8b       	std	Z+22, r26	; 0x16
     75a:	b7 8b       	std	Z+23, r27	; 0x17
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	a0 ef       	ldi	r26, 0xF0	; 240
     762:	b0 ec       	ldi	r27, 0xC0	; 192
     764:	80 8f       	std	Z+24, r24	; 0x18
     766:	91 8f       	std	Z+25, r25	; 0x19
     768:	a2 8f       	std	Z+26, r26	; 0x1a
     76a:	b3 8f       	std	Z+27, r27	; 0x1b
     76c:	85 ed       	ldi	r24, 0xD5	; 213
     76e:	98 e7       	ldi	r25, 0x78	; 120
     770:	a9 e4       	ldi	r26, 0x49	; 73
     772:	bf e3       	ldi	r27, 0x3F	; 63
     774:	84 8f       	std	Z+28, r24	; 0x1c
     776:	95 8f       	std	Z+29, r25	; 0x1d
     778:	a6 8f       	std	Z+30, r26	; 0x1e
     77a:	b7 8f       	std	Z+31, r27	; 0x1f
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	a0 ea       	ldi	r26, 0xA0	; 160
     782:	b0 ec       	ldi	r27, 0xC0	; 192
     784:	80 a3       	std	Z+32, r24	; 0x20
     786:	91 a3       	std	Z+33, r25	; 0x21
     788:	a2 a3       	std	Z+34, r26	; 0x22
     78a:	b3 a3       	std	Z+35, r27	; 0x23
     78c:	86 e9       	ldi	r24, 0x96	; 150
     78e:	93 e4       	ldi	r25, 0x43	; 67
     790:	ab e6       	ldi	r26, 0x6B	; 107
     792:	bf e3       	ldi	r27, 0x3F	; 63
     794:	84 a3       	std	Z+36, r24	; 0x24
     796:	95 a3       	std	Z+37, r25	; 0x25
     798:	a6 a3       	std	Z+38, r26	; 0x26
     79a:	b7 a3       	std	Z+39, r27	; 0x27
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	a0 e2       	ldi	r26, 0x20	; 32
     7a2:	b0 ec       	ldi	r27, 0xC0	; 192
     7a4:	80 a7       	std	Z+40, r24	; 0x28
     7a6:	91 a7       	std	Z+41, r25	; 0x29
     7a8:	a2 a7       	std	Z+42, r26	; 0x2a
     7aa:	b3 a7       	std	Z+43, r27	; 0x2b
     7ac:	80 e6       	ldi	r24, 0x60	; 96
     7ae:	95 ee       	ldi	r25, 0xE5	; 229
     7b0:	a0 e9       	ldi	r26, 0x90	; 144
     7b2:	bf e3       	ldi	r27, 0x3F	; 63
     7b4:	84 a7       	std	Z+44, r24	; 0x2c
     7b6:	95 a7       	std	Z+45, r25	; 0x2d
     7b8:	a6 a7       	std	Z+46, r26	; 0x2e
     7ba:	b7 a7       	std	Z+47, r27	; 0x2f
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	a0 ea       	ldi	r26, 0xA0	; 160
     7c2:	bf eb       	ldi	r27, 0xBF	; 191
     7c4:	80 ab       	std	Z+48, r24	; 0x30
     7c6:	91 ab       	std	Z+49, r25	; 0x31
     7c8:	a2 ab       	std	Z+50, r26	; 0x32
     7ca:	b3 ab       	std	Z+51, r27	; 0x33
     7cc:	8b e8       	ldi	r24, 0x8B	; 139
     7ce:	9c e6       	ldi	r25, 0x6C	; 108
     7d0:	a7 ea       	ldi	r26, 0xA7	; 167
     7d2:	bf e3       	ldi	r27, 0x3F	; 63
     7d4:	84 ab       	std	Z+52, r24	; 0x34
     7d6:	95 ab       	std	Z+53, r25	; 0x35
     7d8:	a6 ab       	std	Z+54, r26	; 0x36
     7da:	b7 ab       	std	Z+55, r27	; 0x37
     7dc:	10 ae       	std	Z+56, r1	; 0x38
     7de:	11 ae       	std	Z+57, r1	; 0x39
     7e0:	12 ae       	std	Z+58, r1	; 0x3a
     7e2:	13 ae       	std	Z+59, r1	; 0x3b
     7e4:	8c eb       	ldi	r24, 0xBC	; 188
     7e6:	94 e7       	ldi	r25, 0x74	; 116
     7e8:	a3 ed       	ldi	r26, 0xD3	; 211
     7ea:	bf e3       	ldi	r27, 0x3F	; 63
     7ec:	84 af       	std	Z+60, r24	; 0x3c
     7ee:	95 af       	std	Z+61, r25	; 0x3d
     7f0:	a6 af       	std	Z+62, r26	; 0x3e
     7f2:	b7 af       	std	Z+63, r27	; 0x3f
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	a0 ea       	ldi	r26, 0xA0	; 160
     7fa:	bf e3       	ldi	r27, 0x3F	; 63
     7fc:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <flows94+0x40>
     800:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <flows94+0x41>
     804:	a0 93 a9 02 	sts	0x02A9, r26	; 0x8002a9 <flows94+0x42>
     808:	b0 93 aa 02 	sts	0x02AA, r27	; 0x8002aa <flows94+0x43>
     80c:	82 e6       	ldi	r24, 0x62	; 98
     80e:	90 e1       	ldi	r25, 0x10	; 16
     810:	a0 e0       	ldi	r26, 0x00	; 0
     812:	b0 e4       	ldi	r27, 0x40	; 64
     814:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <flows94+0x44>
     818:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <flows94+0x45>
     81c:	a0 93 ad 02 	sts	0x02AD, r26	; 0x8002ad <flows94+0x46>
     820:	b0 93 ae 02 	sts	0x02AE, r27	; 0x8002ae <flows94+0x47>
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	a0 e2       	ldi	r26, 0x20	; 32
     82a:	b0 e4       	ldi	r27, 0x40	; 64
     82c:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <flows94+0x48>
     830:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <flows94+0x49>
     834:	a0 93 b1 02 	sts	0x02B1, r26	; 0x8002b1 <flows94+0x4a>
     838:	b0 93 b2 02 	sts	0x02B2, r27	; 0x8002b2 <flows94+0x4b>
     83c:	8d e6       	ldi	r24, 0x6D	; 109
     83e:	97 ee       	ldi	r25, 0xE7	; 231
     840:	ab e0       	ldi	r26, 0x0B	; 11
     842:	b0 e4       	ldi	r27, 0x40	; 64
     844:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <flows94+0x4c>
     848:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <flows94+0x4d>
     84c:	a0 93 b5 02 	sts	0x02B5, r26	; 0x8002b5 <flows94+0x4e>
     850:	b0 93 b6 02 	sts	0x02B6, r27	; 0x8002b6 <flows94+0x4f>
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 ea       	ldi	r26, 0xA0	; 160
     85a:	b0 e4       	ldi	r27, 0x40	; 64
     85c:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <flows94+0x50>
     860:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <flows94+0x51>
     864:	a0 93 b9 02 	sts	0x02B9, r26	; 0x8002b9 <flows94+0x52>
     868:	b0 93 ba 02 	sts	0x02BA, r27	; 0x8002ba <flows94+0x53>
     86c:	83 ed       	ldi	r24, 0xD3	; 211
     86e:	9d e4       	ldi	r25, 0x4D	; 77
     870:	aa e1       	ldi	r26, 0x1A	; 26
     872:	b0 e4       	ldi	r27, 0x40	; 64
     874:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <flows94+0x54>
     878:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <flows94+0x55>
     87c:	a0 93 bd 02 	sts	0x02BD, r26	; 0x8002bd <flows94+0x56>
     880:	b0 93 be 02 	sts	0x02BE, r27	; 0x8002be <flows94+0x57>
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 ef       	ldi	r26, 0xF0	; 240
     88a:	b0 e4       	ldi	r27, 0x40	; 64
     88c:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <flows94+0x58>
     890:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <flows94+0x59>
     894:	a0 93 c1 02 	sts	0x02C1, r26	; 0x8002c1 <flows94+0x5a>
     898:	b0 93 c2 02 	sts	0x02C2, r27	; 0x8002c2 <flows94+0x5b>
     89c:	8a e5       	ldi	r24, 0x5A	; 90
     89e:	94 e6       	ldi	r25, 0x64	; 100
     8a0:	a3 e2       	ldi	r26, 0x23	; 35
     8a2:	b0 e4       	ldi	r27, 0x40	; 64
     8a4:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <flows94+0x5c>
     8a8:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <flows94+0x5d>
     8ac:	a0 93 c5 02 	sts	0x02C5, r26	; 0x8002c5 <flows94+0x5e>
     8b0:	b0 93 c6 02 	sts	0x02C6, r27	; 0x8002c6 <flows94+0x5f>
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a0 e2       	ldi	r26, 0x20	; 32
     8ba:	b1 e4       	ldi	r27, 0x41	; 65
     8bc:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <flows94+0x60>
     8c0:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <flows94+0x61>
     8c4:	a0 93 c9 02 	sts	0x02C9, r26	; 0x8002c9 <flows94+0x62>
     8c8:	b0 93 ca 02 	sts	0x02CA, r27	; 0x8002ca <flows94+0x63>
     8cc:	81 e7       	ldi	r24, 0x71	; 113
     8ce:	9d e3       	ldi	r25, 0x3D	; 61
     8d0:	aa e2       	ldi	r26, 0x2A	; 42
     8d2:	b0 e4       	ldi	r27, 0x40	; 64
     8d4:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <flows94+0x64>
     8d8:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <flows94+0x65>
     8dc:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <flows94+0x66>
     8e0:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <flows94+0x67>
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	a8 e4       	ldi	r26, 0x48	; 72
     8ea:	b1 e4       	ldi	r27, 0x41	; 65
     8ec:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <flows94+0x68>
     8f0:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <flows94+0x69>
     8f4:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <flows94+0x6a>
     8f8:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <flows94+0x6b>
     8fc:	89 e2       	ldi	r24, 0x29	; 41
     8fe:	9c e5       	ldi	r25, 0x5C	; 92
     900:	af e2       	ldi	r26, 0x2F	; 47
     902:	b0 e4       	ldi	r27, 0x40	; 64
     904:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <flows94+0x6c>
     908:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <flows94+0x6d>
     90c:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <flows94+0x6e>
     910:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <flows94+0x6f>
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	a0 e7       	ldi	r26, 0x70	; 112
     91a:	b1 e4       	ldi	r27, 0x41	; 65
     91c:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <flows94+0x70>
     920:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <flows94+0x71>
     924:	a0 93 d9 02 	sts	0x02D9, r26	; 0x8002d9 <flows94+0x72>
     928:	b0 93 da 02 	sts	0x02DA, r27	; 0x8002da <flows94+0x73>
     92c:	81 e3       	ldi	r24, 0x31	; 49
     92e:	98 e0       	ldi	r25, 0x08	; 8
     930:	a4 e3       	ldi	r26, 0x34	; 52
     932:	b0 e4       	ldi	r27, 0x40	; 64
     934:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <flows94+0x74>
     938:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <flows94+0x75>
     93c:	a0 93 dd 02 	sts	0x02DD, r26	; 0x8002dd <flows94+0x76>
     940:	b0 93 de 02 	sts	0x02DE, r27	; 0x8002de <flows94+0x77>
     944:	08 95       	ret

00000946 <_Z3setv>:
     946:	ef ee       	ldi	r30, 0xEF	; 239
     948:	f1 e0       	ldi	r31, 0x01	; 1
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	a0 e7       	ldi	r26, 0x70	; 112
     950:	b1 ec       	ldi	r27, 0xC1	; 193
     952:	80 83       	st	Z, r24
     954:	91 83       	std	Z+1, r25	; 0x01
     956:	a2 83       	std	Z+2, r26	; 0x02
     958:	b3 83       	std	Z+3, r27	; 0x03
     95a:	89 ee       	ldi	r24, 0xE9	; 233
     95c:	96 e2       	ldi	r25, 0x26	; 38
     95e:	a1 ef       	ldi	r26, 0xF1	; 241
     960:	be e3       	ldi	r27, 0x3E	; 62
     962:	84 83       	std	Z+4, r24	; 0x04
     964:	95 83       	std	Z+5, r25	; 0x05
     966:	a6 83       	std	Z+6, r26	; 0x06
     968:	b7 83       	std	Z+7, r27	; 0x07
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	a8 e4       	ldi	r26, 0x48	; 72
     970:	b1 ec       	ldi	r27, 0xC1	; 193
     972:	80 87       	std	Z+8, r24	; 0x08
     974:	91 87       	std	Z+9, r25	; 0x09
     976:	a2 87       	std	Z+10, r26	; 0x0a
     978:	b3 87       	std	Z+11, r27	; 0x0b
     97a:	8e e5       	ldi	r24, 0x5E	; 94
     97c:	9a eb       	ldi	r25, 0xBA	; 186
     97e:	a9 e0       	ldi	r26, 0x09	; 9
     980:	bf e3       	ldi	r27, 0x3F	; 63
     982:	84 87       	std	Z+12, r24	; 0x0c
     984:	95 87       	std	Z+13, r25	; 0x0d
     986:	a6 87       	std	Z+14, r26	; 0x0e
     988:	b7 87       	std	Z+15, r27	; 0x0f
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	a0 e2       	ldi	r26, 0x20	; 32
     990:	b1 ec       	ldi	r27, 0xC1	; 193
     992:	80 8b       	std	Z+16, r24	; 0x10
     994:	91 8b       	std	Z+17, r25	; 0x11
     996:	a2 8b       	std	Z+18, r26	; 0x12
     998:	b3 8b       	std	Z+19, r27	; 0x13
     99a:	8b ed       	ldi	r24, 0xDB	; 219
     99c:	99 ef       	ldi	r25, 0xF9	; 249
     99e:	ae e1       	ldi	r26, 0x1E	; 30
     9a0:	bf e3       	ldi	r27, 0x3F	; 63
     9a2:	84 8b       	std	Z+20, r24	; 0x14
     9a4:	95 8b       	std	Z+21, r25	; 0x15
     9a6:	a6 8b       	std	Z+22, r26	; 0x16
     9a8:	b7 8b       	std	Z+23, r27	; 0x17
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 ef       	ldi	r26, 0xF0	; 240
     9b0:	b0 ec       	ldi	r27, 0xC0	; 192
     9b2:	80 8f       	std	Z+24, r24	; 0x18
     9b4:	91 8f       	std	Z+25, r25	; 0x19
     9b6:	a2 8f       	std	Z+26, r26	; 0x1a
     9b8:	b3 8f       	std	Z+27, r27	; 0x1b
     9ba:	86 ef       	ldi	r24, 0xF6	; 246
     9bc:	98 e2       	ldi	r25, 0x28	; 40
     9be:	ac e3       	ldi	r26, 0x3C	; 60
     9c0:	bf e3       	ldi	r27, 0x3F	; 63
     9c2:	84 8f       	std	Z+28, r24	; 0x1c
     9c4:	95 8f       	std	Z+29, r25	; 0x1d
     9c6:	a6 8f       	std	Z+30, r26	; 0x1e
     9c8:	b7 8f       	std	Z+31, r27	; 0x1f
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	a0 ea       	ldi	r26, 0xA0	; 160
     9d0:	b0 ec       	ldi	r27, 0xC0	; 192
     9d2:	80 a3       	std	Z+32, r24	; 0x20
     9d4:	91 a3       	std	Z+33, r25	; 0x21
     9d6:	a2 a3       	std	Z+34, r26	; 0x22
     9d8:	b3 a3       	std	Z+35, r27	; 0x23
     9da:	83 e9       	ldi	r24, 0x93	; 147
     9dc:	98 e1       	ldi	r25, 0x18	; 24
     9de:	a4 e6       	ldi	r26, 0x64	; 100
     9e0:	bf e3       	ldi	r27, 0x3F	; 63
     9e2:	84 a3       	std	Z+36, r24	; 0x24
     9e4:	95 a3       	std	Z+37, r25	; 0x25
     9e6:	a6 a3       	std	Z+38, r26	; 0x26
     9e8:	b7 a3       	std	Z+39, r27	; 0x27
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	a0 e2       	ldi	r26, 0x20	; 32
     9f0:	b0 ec       	ldi	r27, 0xC0	; 192
     9f2:	80 a7       	std	Z+40, r24	; 0x28
     9f4:	91 a7       	std	Z+41, r25	; 0x29
     9f6:	a2 a7       	std	Z+42, r26	; 0x2a
     9f8:	b3 a7       	std	Z+43, r27	; 0x2b
     9fa:	8e e0       	ldi	r24, 0x0E	; 14
     9fc:	9d e2       	ldi	r25, 0x2D	; 45
     9fe:	a2 e9       	ldi	r26, 0x92	; 146
     a00:	bf e3       	ldi	r27, 0x3F	; 63
     a02:	84 a7       	std	Z+44, r24	; 0x2c
     a04:	95 a7       	std	Z+45, r25	; 0x2d
     a06:	a6 a7       	std	Z+46, r26	; 0x2e
     a08:	b7 a7       	std	Z+47, r27	; 0x2f
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 ea       	ldi	r26, 0xA0	; 160
     a10:	bf eb       	ldi	r27, 0xBF	; 191
     a12:	80 ab       	std	Z+48, r24	; 0x30
     a14:	91 ab       	std	Z+49, r25	; 0x31
     a16:	a2 ab       	std	Z+50, r26	; 0x32
     a18:	b3 ab       	std	Z+51, r27	; 0x33
     a1a:	81 e9       	ldi	r24, 0x91	; 145
     a1c:	9d ee       	ldi	r25, 0xED	; 237
     a1e:	ac ea       	ldi	r26, 0xAC	; 172
     a20:	bf e3       	ldi	r27, 0x3F	; 63
     a22:	84 ab       	std	Z+52, r24	; 0x34
     a24:	95 ab       	std	Z+53, r25	; 0x35
     a26:	a6 ab       	std	Z+54, r26	; 0x36
     a28:	b7 ab       	std	Z+55, r27	; 0x37
     a2a:	10 ae       	std	Z+56, r1	; 0x38
     a2c:	11 ae       	std	Z+57, r1	; 0x39
     a2e:	12 ae       	std	Z+58, r1	; 0x3a
     a30:	13 ae       	std	Z+59, r1	; 0x3b
     a32:	85 ec       	ldi	r24, 0xC5	; 197
     a34:	90 e2       	ldi	r25, 0x20	; 32
     a36:	a0 ee       	ldi	r26, 0xE0	; 224
     a38:	bf e3       	ldi	r27, 0x3F	; 63
     a3a:	84 af       	std	Z+60, r24	; 0x3c
     a3c:	95 af       	std	Z+61, r25	; 0x3d
     a3e:	a6 af       	std	Z+62, r26	; 0x3e
     a40:	b7 af       	std	Z+63, r27	; 0x3f
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	a0 ea       	ldi	r26, 0xA0	; 160
     a48:	bf e3       	ldi	r27, 0x3F	; 63
     a4a:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <flows95+0x40>
     a4e:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <flows95+0x41>
     a52:	a0 93 31 02 	sts	0x0231, r26	; 0x800231 <flows95+0x42>
     a56:	b0 93 32 02 	sts	0x0232, r27	; 0x800232 <flows95+0x43>
     a5a:	89 ee       	ldi	r24, 0xE9	; 233
     a5c:	96 e2       	ldi	r25, 0x26	; 38
     a5e:	a9 e0       	ldi	r26, 0x09	; 9
     a60:	b0 e4       	ldi	r27, 0x40	; 64
     a62:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <flows95+0x44>
     a66:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <flows95+0x45>
     a6a:	a0 93 35 02 	sts	0x0235, r26	; 0x800235 <flows95+0x46>
     a6e:	b0 93 36 02 	sts	0x0236, r27	; 0x800236 <flows95+0x47>
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	a0 e2       	ldi	r26, 0x20	; 32
     a78:	b0 e4       	ldi	r27, 0x40	; 64
     a7a:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <flows95+0x48>
     a7e:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <flows95+0x49>
     a82:	a0 93 39 02 	sts	0x0239, r26	; 0x800239 <flows95+0x4a>
     a86:	b0 93 3a 02 	sts	0x023A, r27	; 0x80023a <flows95+0x4b>
     a8a:	84 eb       	ldi	r24, 0xB4	; 180
     a8c:	98 ec       	ldi	r25, 0xC8	; 200
     a8e:	a6 e1       	ldi	r26, 0x16	; 22
     a90:	b0 e4       	ldi	r27, 0x40	; 64
     a92:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <flows95+0x4c>
     a96:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <flows95+0x4d>
     a9a:	a0 93 3d 02 	sts	0x023D, r26	; 0x80023d <flows95+0x4e>
     a9e:	b0 93 3e 02 	sts	0x023E, r27	; 0x80023e <flows95+0x4f>
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	a0 ea       	ldi	r26, 0xA0	; 160
     aa8:	b0 e4       	ldi	r27, 0x40	; 64
     aaa:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <flows95+0x50>
     aae:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <flows95+0x51>
     ab2:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <flows95+0x52>
     ab6:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <flows95+0x53>
     aba:	89 e2       	ldi	r24, 0x29	; 41
     abc:	9c e5       	ldi	r25, 0x5C	; 92
     abe:	a7 e2       	ldi	r26, 0x27	; 39
     ac0:	b0 e4       	ldi	r27, 0x40	; 64
     ac2:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <flows95+0x54>
     ac6:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <flows95+0x55>
     aca:	a0 93 45 02 	sts	0x0245, r26	; 0x800245 <flows95+0x56>
     ace:	b0 93 46 02 	sts	0x0246, r27	; 0x800246 <flows95+0x57>
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	a0 ef       	ldi	r26, 0xF0	; 240
     ad8:	b0 e4       	ldi	r27, 0x40	; 64
     ada:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <flows95+0x58>
     ade:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <flows95+0x59>
     ae2:	a0 93 49 02 	sts	0x0249, r26	; 0x800249 <flows95+0x5a>
     ae6:	b0 93 4a 02 	sts	0x024A, r27	; 0x80024a <flows95+0x5b>
     aea:	81 e7       	ldi	r24, 0x71	; 113
     aec:	9d e3       	ldi	r25, 0x3D	; 61
     aee:	a2 e3       	ldi	r26, 0x32	; 50
     af0:	b0 e4       	ldi	r27, 0x40	; 64
     af2:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <flows95+0x5c>
     af6:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <flows95+0x5d>
     afa:	a0 93 4d 02 	sts	0x024D, r26	; 0x80024d <flows95+0x5e>
     afe:	b0 93 4e 02 	sts	0x024E, r27	; 0x80024e <flows95+0x5f>
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	a0 e2       	ldi	r26, 0x20	; 32
     b08:	b1 e4       	ldi	r27, 0x41	; 65
     b0a:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <flows95+0x60>
     b0e:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <flows95+0x61>
     b12:	a0 93 51 02 	sts	0x0251, r26	; 0x800251 <flows95+0x62>
     b16:	b0 93 52 02 	sts	0x0252, r27	; 0x800252 <flows95+0x63>
     b1a:	83 ed       	ldi	r24, 0xD3	; 211
     b1c:	9d e4       	ldi	r25, 0x4D	; 77
     b1e:	aa e3       	ldi	r26, 0x3A	; 58
     b20:	b0 e4       	ldi	r27, 0x40	; 64
     b22:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <flows95+0x64>
     b26:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <flows95+0x65>
     b2a:	a0 93 55 02 	sts	0x0255, r26	; 0x800255 <flows95+0x66>
     b2e:	b0 93 56 02 	sts	0x0256, r27	; 0x800256 <flows95+0x67>
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	a8 e4       	ldi	r26, 0x48	; 72
     b38:	b1 e4       	ldi	r27, 0x41	; 65
     b3a:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <flows95+0x68>
     b3e:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <flows95+0x69>
     b42:	a0 93 59 02 	sts	0x0259, r26	; 0x800259 <flows95+0x6a>
     b46:	b0 93 5a 02 	sts	0x025A, r27	; 0x80025a <flows95+0x6b>
     b4a:	82 e1       	ldi	r24, 0x12	; 18
     b4c:	93 e8       	ldi	r25, 0x83	; 131
     b4e:	a0 e4       	ldi	r26, 0x40	; 64
     b50:	b0 e4       	ldi	r27, 0x40	; 64
     b52:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <flows95+0x6c>
     b56:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <flows95+0x6d>
     b5a:	a0 93 5d 02 	sts	0x025D, r26	; 0x80025d <flows95+0x6e>
     b5e:	b0 93 5e 02 	sts	0x025E, r27	; 0x80025e <flows95+0x6f>
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e7       	ldi	r26, 0x70	; 112
     b68:	b1 e4       	ldi	r27, 0x41	; 65
     b6a:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <flows95+0x70>
     b6e:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <flows95+0x71>
     b72:	a0 93 61 02 	sts	0x0261, r26	; 0x800261 <flows95+0x72>
     b76:	b0 93 62 02 	sts	0x0262, r27	; 0x800262 <flows95+0x73>
     b7a:	8d ed       	ldi	r24, 0xDD	; 221
     b7c:	94 e2       	ldi	r25, 0x24	; 36
     b7e:	a6 e4       	ldi	r26, 0x46	; 70
     b80:	b0 e4       	ldi	r27, 0x40	; 64
     b82:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <flows95+0x74>
     b86:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <flows95+0x75>
     b8a:	a0 93 65 02 	sts	0x0265, r26	; 0x800265 <flows95+0x76>
     b8e:	b0 93 66 02 	sts	0x0266, r27	; 0x800266 <flows95+0x77>
     b92:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <_Z4set2v>

00000b96 <_Z11interpolatePA2_ff>:
     b96:	2f 92       	push	r2
     b98:	3f 92       	push	r3
     b9a:	4f 92       	push	r4
     b9c:	5f 92       	push	r5
     b9e:	6f 92       	push	r6
     ba0:	7f 92       	push	r7
     ba2:	8f 92       	push	r8
     ba4:	9f 92       	push	r9
     ba6:	af 92       	push	r10
     ba8:	bf 92       	push	r11
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	28 97       	sbiw	r28, 0x08	; 8
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	98 87       	std	Y+8, r25	; 0x08
     bcc:	8f 83       	std	Y+7, r24	; 0x07
     bce:	2a 01       	movw	r4, r20
     bd0:	3b 01       	movw	r6, r22
     bd2:	2d ed       	ldi	r18, 0xDD	; 221
     bd4:	34 e2       	ldi	r19, 0x24	; 36
     bd6:	46 e4       	ldi	r20, 0x46	; 70
     bd8:	50 e4       	ldi	r21, 0x40	; 64
     bda:	c3 01       	movw	r24, r6
     bdc:	b2 01       	movw	r22, r4
     bde:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__gesf2>
     be2:	87 fd       	sbrc	r24, 7
     be4:	0a c0       	rjmp	.+20     	; 0xbfa <_Z11interpolatePA2_ff+0x64>
     be6:	2f 81       	ldd	r18, Y+7	; 0x07
     be8:	38 85       	ldd	r19, Y+8	; 0x08
     bea:	20 59       	subi	r18, 0x90	; 144
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	f9 01       	movw	r30, r18
     bf0:	64 81       	ldd	r22, Z+4	; 0x04
     bf2:	75 81       	ldd	r23, Z+5	; 0x05
     bf4:	86 81       	ldd	r24, Z+6	; 0x06
     bf6:	97 81       	ldd	r25, Z+7	; 0x07
     bf8:	6e c0       	rjmp	.+220    	; 0xcd6 <_Z11interpolatePA2_ff+0x140>
     bfa:	ef 81       	ldd	r30, Y+7	; 0x07
     bfc:	f8 85       	ldd	r31, Y+8	; 0x08
     bfe:	84 80       	ldd	r8, Z+4	; 0x04
     c00:	95 80       	ldd	r9, Z+5	; 0x05
     c02:	a6 80       	ldd	r10, Z+6	; 0x06
     c04:	b7 80       	ldd	r11, Z+7	; 0x07
     c06:	f0 80       	ld	r15, Z
     c08:	01 81       	ldd	r16, Z+1	; 0x01
     c0a:	12 81       	ldd	r17, Z+2	; 0x02
     c0c:	23 80       	ldd	r2, Z+3	; 0x03
     c0e:	9f 01       	movw	r18, r30
     c10:	28 58       	subi	r18, 0x88	; 136
     c12:	3f 4f       	sbci	r19, 0xFF	; 255
     c14:	3e 83       	std	Y+6, r19	; 0x06
     c16:	2d 83       	std	Y+5, r18	; 0x05
     c18:	ef 81       	ldd	r30, Y+7	; 0x07
     c1a:	f8 85       	ldd	r31, Y+8	; 0x08
     c1c:	34 80       	ldd	r3, Z+4	; 0x04
     c1e:	c5 80       	ldd	r12, Z+5	; 0x05
     c20:	d6 80       	ldd	r13, Z+6	; 0x06
     c22:	e7 80       	ldd	r14, Z+7	; 0x07
     c24:	f0 81       	ld	r31, Z
     c26:	f9 83       	std	Y+1, r31	; 0x01
     c28:	ef 81       	ldd	r30, Y+7	; 0x07
     c2a:	f8 85       	ldd	r31, Y+8	; 0x08
     c2c:	f1 81       	ldd	r31, Z+1	; 0x01
     c2e:	fa 83       	std	Y+2, r31	; 0x02
     c30:	ef 81       	ldd	r30, Y+7	; 0x07
     c32:	f8 85       	ldd	r31, Y+8	; 0x08
     c34:	f2 81       	ldd	r31, Z+2	; 0x02
     c36:	fb 83       	std	Y+3, r31	; 0x03
     c38:	ef 81       	ldd	r30, Y+7	; 0x07
     c3a:	f8 85       	ldd	r31, Y+8	; 0x08
     c3c:	f3 81       	ldd	r31, Z+3	; 0x03
     c3e:	fc 83       	std	Y+4, r31	; 0x04
     c40:	23 2d       	mov	r18, r3
     c42:	3c 2d       	mov	r19, r12
     c44:	4d 2d       	mov	r20, r13
     c46:	5e 2d       	mov	r21, r14
     c48:	c3 01       	movw	r24, r6
     c4a:	b2 01       	movw	r22, r4
     c4c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__gesf2>
     c50:	87 fd       	sbrc	r24, 7
     c52:	13 c0       	rjmp	.+38     	; 0xc7a <_Z11interpolatePA2_ff+0xe4>
     c54:	2f 81       	ldd	r18, Y+7	; 0x07
     c56:	38 85       	ldd	r19, Y+8	; 0x08
     c58:	28 5f       	subi	r18, 0xF8	; 248
     c5a:	3f 4f       	sbci	r19, 0xFF	; 255
     c5c:	38 87       	std	Y+8, r19	; 0x08
     c5e:	2f 83       	std	Y+7, r18	; 0x07
     c60:	83 2c       	mov	r8, r3
     c62:	9c 2c       	mov	r9, r12
     c64:	ad 2c       	mov	r10, r13
     c66:	be 2c       	mov	r11, r14
     c68:	f9 80       	ldd	r15, Y+1	; 0x01
     c6a:	0a 81       	ldd	r16, Y+2	; 0x02
     c6c:	1b 81       	ldd	r17, Y+3	; 0x03
     c6e:	2c 80       	ldd	r2, Y+4	; 0x04
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	28 17       	cp	r18, r24
     c76:	39 07       	cpc	r19, r25
     c78:	79 f6       	brne	.-98     	; 0xc18 <_Z11interpolatePA2_ff+0x82>
     c7a:	94 01       	movw	r18, r8
     c7c:	a5 01       	movw	r20, r10
     c7e:	c3 01       	movw	r24, r6
     c80:	b2 01       	movw	r22, r4
     c82:	0e 94 16 09 	call	0x122c	; 0x122c <__subsf3>
     c86:	2b 01       	movw	r4, r22
     c88:	3c 01       	movw	r6, r24
     c8a:	94 01       	movw	r18, r8
     c8c:	a5 01       	movw	r20, r10
     c8e:	63 2d       	mov	r22, r3
     c90:	7c 2d       	mov	r23, r12
     c92:	8d 2d       	mov	r24, r13
     c94:	9e 2d       	mov	r25, r14
     c96:	0e 94 16 09 	call	0x122c	; 0x122c <__subsf3>
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
     c9e:	c3 01       	movw	r24, r6
     ca0:	b2 01       	movw	r22, r4
     ca2:	0e 94 bc 09 	call	0x1378	; 0x1378 <__divsf3>
     ca6:	4b 01       	movw	r8, r22
     ca8:	5c 01       	movw	r10, r24
     caa:	2f 2d       	mov	r18, r15
     cac:	30 2f       	mov	r19, r16
     cae:	41 2f       	mov	r20, r17
     cb0:	52 2d       	mov	r21, r2
     cb2:	69 81       	ldd	r22, Y+1	; 0x01
     cb4:	7a 81       	ldd	r23, Y+2	; 0x02
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	9c 81       	ldd	r25, Y+4	; 0x04
     cba:	0e 94 16 09 	call	0x122c	; 0x122c <__subsf3>
     cbe:	9b 01       	movw	r18, r22
     cc0:	ac 01       	movw	r20, r24
     cc2:	c5 01       	movw	r24, r10
     cc4:	b4 01       	movw	r22, r8
     cc6:	0e 94 89 0b 	call	0x1712	; 0x1712 <__mulsf3>
     cca:	2f 2d       	mov	r18, r15
     ccc:	30 2f       	mov	r19, r16
     cce:	41 2f       	mov	r20, r17
     cd0:	52 2d       	mov	r21, r2
     cd2:	0e 94 17 09 	call	0x122e	; 0x122e <__addsf3>
     cd6:	28 96       	adiw	r28, 0x08	; 8
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	ff 90       	pop	r15
     cec:	ef 90       	pop	r14
     cee:	df 90       	pop	r13
     cf0:	cf 90       	pop	r12
     cf2:	bf 90       	pop	r11
     cf4:	af 90       	pop	r10
     cf6:	9f 90       	pop	r9
     cf8:	8f 90       	pop	r8
     cfa:	7f 90       	pop	r7
     cfc:	6f 90       	pop	r6
     cfe:	5f 90       	pop	r5
     d00:	4f 90       	pop	r4
     d02:	3f 90       	pop	r3
     d04:	2f 90       	pop	r2
     d06:	08 95       	ret

00000d08 <_Z12getTotalWindff>:
     d08:	8f 92       	push	r8
     d0a:	9f 92       	push	r9
     d0c:	af 92       	push	r10
     d0e:	bf 92       	push	r11
     d10:	cf 92       	push	r12
     d12:	df 92       	push	r13
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	6b 01       	movw	r12, r22
     d1a:	7c 01       	movw	r14, r24
     d1c:	ca 01       	movw	r24, r20
     d1e:	b9 01       	movw	r22, r18
     d20:	0e 94 89 0b 	call	0x1712	; 0x1712 <__mulsf3>
     d24:	4b 01       	movw	r8, r22
     d26:	5c 01       	movw	r10, r24
     d28:	a7 01       	movw	r20, r14
     d2a:	96 01       	movw	r18, r12
     d2c:	c7 01       	movw	r24, r14
     d2e:	b6 01       	movw	r22, r12
     d30:	0e 94 89 0b 	call	0x1712	; 0x1712 <__mulsf3>
     d34:	9b 01       	movw	r18, r22
     d36:	ac 01       	movw	r20, r24
     d38:	c5 01       	movw	r24, r10
     d3a:	b4 01       	movw	r22, r8
     d3c:	0e 94 17 09 	call	0x122e	; 0x122e <__addsf3>
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	cf 90       	pop	r12
     d48:	bf 90       	pop	r11
     d4a:	af 90       	pop	r10
     d4c:	9f 90       	pop	r9
     d4e:	8f 90       	pop	r8
     d50:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <sqrt>

00000d54 <_GLOBAL__sub_I_flows94>:

#define TFT_CS     10
#define TFT_RST    9
#define TFT_DC     8

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);
     d54:	29 e0       	ldi	r18, 0x09	; 9
     d56:	48 e0       	ldi	r20, 0x08	; 8
     d58:	6a e0       	ldi	r22, 0x0A	; 10
     d5a:	8e eb       	ldi	r24, 0xBE	; 190
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	0c 94 33 18 	jmp	0x3066	; 0x3066 <_ZN15Adafruit_ST7735C1Eaaa>

00000d62 <_Z8plotLineiifi>:

int lastX1;
int lastY1;
float lastAngle;

void plotLine(int x0, int y0, float angle, int length = 50) {
     d62:	2f 92       	push	r2
     d64:	3f 92       	push	r3
     d66:	4f 92       	push	r4
     d68:	5f 92       	push	r5
     d6a:	6f 92       	push	r6
     d6c:	7f 92       	push	r7
     d6e:	8f 92       	push	r8
     d70:	9f 92       	push	r9
     d72:	af 92       	push	r10
     d74:	bf 92       	push	r11
     d76:	cf 92       	push	r12
     d78:	df 92       	push	r13
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	00 d0       	rcall	.+0      	; 0xd88 <_Z8plotLineiifi+0x26>
     d88:	00 d0       	rcall	.+0      	; 0xd8a <_Z8plotLineiifi+0x28>
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <_Z8plotLineiifi+0x2a>
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	1c 01       	movw	r2, r24
     d92:	7e 83       	std	Y+6, r23	; 0x06
     d94:	6d 83       	std	Y+5, r22	; 0x05
     d96:	69 01       	movw	r12, r18
     d98:	7a 01       	movw	r14, r20
	if (angle == 0) return;
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	a9 01       	movw	r20, r18
     da0:	c7 01       	movw	r24, r14
     da2:	b6 01       	movw	r22, r12
     da4:	0e 94 b2 09 	call	0x1364	; 0x1364 <__cmpsf2>
     da8:	88 23       	and	r24, r24
     daa:	09 f4       	brne	.+2      	; 0xdae <_Z8plotLineiifi+0x4c>
     dac:	61 c0       	rjmp	.+194    	; 0xe70 <_Z8plotLineiifi+0x10e>

	int x1 = x0 + (length * cos(angle));
     dae:	b8 01       	movw	r22, r16
     db0:	11 0f       	add	r17, r17
     db2:	88 0b       	sbc	r24, r24
     db4:	99 0b       	sbc	r25, r25
     db6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__floatsisf>
     dba:	4b 01       	movw	r8, r22
     dbc:	5c 01       	movw	r10, r24
     dbe:	c7 01       	movw	r24, r14
     dc0:	b6 01       	movw	r22, r12
     dc2:	0e 94 b7 09 	call	0x136e	; 0x136e <cos>
     dc6:	69 83       	std	Y+1, r22	; 0x01
     dc8:	7a 83       	std	Y+2, r23	; 0x02
     dca:	8b 83       	std	Y+3, r24	; 0x03
     dcc:	9c 83       	std	Y+4, r25	; 0x04
     dce:	b1 01       	movw	r22, r2
     dd0:	03 2c       	mov	r0, r3
     dd2:	00 0c       	add	r0, r0
     dd4:	88 0b       	sbc	r24, r24
     dd6:	99 0b       	sbc	r25, r25
     dd8:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__floatsisf>
     ddc:	2b 01       	movw	r4, r22
     dde:	3c 01       	movw	r6, r24
     de0:	29 81       	ldd	r18, Y+1	; 0x01
     de2:	3a 81       	ldd	r19, Y+2	; 0x02
     de4:	4b 81       	ldd	r20, Y+3	; 0x03
     de6:	5c 81       	ldd	r21, Y+4	; 0x04
     de8:	c5 01       	movw	r24, r10
     dea:	b4 01       	movw	r22, r8
     dec:	0e 94 89 0b 	call	0x1712	; 0x1712 <__mulsf3>
     df0:	9b 01       	movw	r18, r22
     df2:	ac 01       	movw	r20, r24
     df4:	c3 01       	movw	r24, r6
     df6:	b2 01       	movw	r22, r4
     df8:	0e 94 17 09 	call	0x122e	; 0x122e <__addsf3>
     dfc:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fixsfsi>
     e00:	69 83       	std	Y+1, r22	; 0x01
     e02:	7a 83       	std	Y+2, r23	; 0x02
     e04:	8b 83       	std	Y+3, r24	; 0x03
     e06:	9c 83       	std	Y+4, r25	; 0x04
	int y1 = y0 + (length * sin(angle));
     e08:	c7 01       	movw	r24, r14
     e0a:	b6 01       	movw	r22, r12
     e0c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <sin>
     e10:	2b 01       	movw	r4, r22
     e12:	3c 01       	movw	r6, r24
     e14:	2d 81       	ldd	r18, Y+5	; 0x05
     e16:	3e 81       	ldd	r19, Y+6	; 0x06
     e18:	b9 01       	movw	r22, r18
     e1a:	33 0f       	add	r19, r19
     e1c:	88 0b       	sbc	r24, r24
     e1e:	99 0b       	sbc	r25, r25
     e20:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__floatsisf>
     e24:	6b 01       	movw	r12, r22
     e26:	7c 01       	movw	r14, r24
     e28:	a3 01       	movw	r20, r6
     e2a:	92 01       	movw	r18, r4
     e2c:	c5 01       	movw	r24, r10
     e2e:	b4 01       	movw	r22, r8
     e30:	0e 94 89 0b 	call	0x1712	; 0x1712 <__mulsf3>
     e34:	9b 01       	movw	r18, r22
     e36:	ac 01       	movw	r20, r24
     e38:	c7 01       	movw	r24, r14
     e3a:	b6 01       	movw	r22, r12
     e3c:	0e 94 17 09 	call	0x122e	; 0x122e <__addsf3>
     e40:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fixsfsi>
	lastX1 = x1;
     e44:	29 81       	ldd	r18, Y+1	; 0x01
     e46:	3a 81       	ldd	r19, Y+2	; 0x02
     e48:	30 93 bd 01 	sts	0x01BD, r19	; 0x8001bd <lastX1+0x1>
     e4c:	20 93 bc 01 	sts	0x01BC, r18	; 0x8001bc <lastX1>
	lastY1 = y1;
     e50:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <lastY1+0x1>
     e54:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <lastY1>
	tft.drawLine(x0, y0, x1, y1, 0xF81F);
     e58:	8f e1       	ldi	r24, 0x1F	; 31
     e5a:	e8 2e       	mov	r14, r24
     e5c:	88 ef       	ldi	r24, 0xF8	; 248
     e5e:	f8 2e       	mov	r15, r24
     e60:	8b 01       	movw	r16, r22
     e62:	4d 81       	ldd	r20, Y+5	; 0x05
     e64:	5e 81       	ldd	r21, Y+6	; 0x06
     e66:	b1 01       	movw	r22, r2
     e68:	8e eb       	ldi	r24, 0xBE	; 190
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <_ZN12Adafruit_GFX8drawLineEiiiij>
}
     e70:	26 96       	adiw	r28, 0x06	; 6
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	bf 90       	pop	r11
     e8e:	af 90       	pop	r10
     e90:	9f 90       	pop	r9
     e92:	8f 90       	pop	r8
     e94:	7f 90       	pop	r7
     e96:	6f 90       	pop	r6
     e98:	5f 90       	pop	r5
     e9a:	4f 90       	pop	r4
     e9c:	3f 90       	pop	r3
     e9e:	2f 90       	pop	r2
     ea0:	08 95       	ret

00000ea2 <setup>:

void setup() {
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
	tft.initR(INITR_BLACKTAB);
     eaa:	62 e0       	ldi	r22, 0x02	; 2
     eac:	8e eb       	ldi	r24, 0xBE	; 190
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	0e 94 0d 1a 	call	0x341a	; 0x341a <_ZN15Adafruit_ST77355initREh>
	pinMode(LED_BUILTIN, OUTPUT);
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	8d e0       	ldi	r24, 0x0D	; 13
     eb8:	0e 94 12 11 	call	0x2224	; 0x2224 <pinMode>

	pinMode(2, OUTPUT);
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	0e 94 12 11 	call	0x2224	; 0x2224 <pinMode>
	pinMode(A0, INPUT);
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	8e e0       	ldi	r24, 0x0E	; 14
     ec8:	0e 94 12 11 	call	0x2224	; 0x2224 <pinMode>
	pinMode(A1, INPUT);
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	8f e0       	ldi	r24, 0x0F	; 15
     ed0:	0e 94 12 11 	call	0x2224	; 0x2224 <pinMode>
	pinMode(A2, INPUT);
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	80 e1       	ldi	r24, 0x10	; 16
     ed8:	0e 94 12 11 	call	0x2224	; 0x2224 <pinMode>
	pinMode(6, OUTPUT);
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	86 e0       	ldi	r24, 0x06	; 6
     ee0:	0e 94 12 11 	call	0x2224	; 0x2224 <pinMode>
	digitalWrite(6, HIGH);
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	86 e0       	ldi	r24, 0x06	; 6
     ee8:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
	digitalWrite(7, HIGH);
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	87 e0       	ldi	r24, 0x07	; 7
     ef0:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
	digitalWrite(5, LOW);
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	85 e0       	ldi	r24, 0x05	; 5
     ef8:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
	digitalWrite(2, HIGH);
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     f04:	26 e0       	ldi	r18, 0x06	; 6
     f06:	40 e8       	ldi	r20, 0x80	; 128
     f08:	55 e2       	ldi	r21, 0x25	; 37
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	8f ed       	ldi	r24, 0xDF	; 223
     f10:	92 e0       	ldi	r25, 0x02	; 2
     f12:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <_ZN14HardwareSerial5beginEmh>

	Serial.begin(9600);

	set();
     f16:	0e 94 a3 04 	call	0x946	; 0x946 <_Z3setv>
	tft.fillRect(0, 0, tft.width() , tft.height(), 0);
     f1a:	8e eb       	ldi	r24, 0xBE	; 190
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	0e 94 e7 17 	call	0x2fce	; 0x2fce <_ZNK12Adafruit_GFX6heightEv>
     f22:	8c 01       	movw	r16, r24
     f24:	8e eb       	ldi	r24, 0xBE	; 190
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <_ZNK12Adafruit_GFX5widthEv>
     f2c:	e1 2c       	mov	r14, r1
     f2e:	f1 2c       	mov	r15, r1
     f30:	9c 01       	movw	r18, r24
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	8e eb       	ldi	r24, 0xBE	; 190
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	0e 94 76 1b 	call	0x36ec	; 0x36ec <_ZN15Adafruit_ST77358fillRectEiiiij>

}
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	08 95       	ret

00000f4c <loop>:
float Ywind;

float totalWind;
float angle;

void loop() {
     f4c:	8f 92       	push	r8
     f4e:	9f 92       	push	r9
     f50:	af 92       	push	r10
     f52:	bf 92       	push	r11
     f54:	cf 92       	push	r12
     f56:	df 92       	push	r13
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	00 d0       	rcall	.+0      	; 0xf66 <loop+0x1a>
     f66:	00 d0       	rcall	.+0      	; 0xf68 <loop+0x1c>
     f68:	00 d0       	rcall	.+0      	; 0xf6a <loop+0x1e>
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(LED_BUILTIN, HIGH);
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	8d e0       	ldi	r24, 0x0D	; 13
     f72:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>

	/*
	raw0 = analogRead(A0);
	raw1 = analogRead(A2);
	*/
	raw0 = 552;
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	aa e0       	ldi	r26, 0x0A	; 10
     f7c:	b4 e4       	ldi	r27, 0x44	; 68
     f7e:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <raw0>
     f82:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <raw0+0x1>
     f86:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <raw0+0x2>
     f8a:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <raw0+0x3>
	raw1 = 552;
     f8e:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <raw1>
     f92:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <raw1+0x1>
     f96:	a0 93 ac 01 	sts	0x01AC, r26	; 0x8001ac <raw1+0x2>
     f9a:	b0 93 ad 01 	sts	0x01AD, r27	; 0x8001ad <raw1+0x3>
	Ywind = interpolate(flows95, (raw1 / 1023.0) * 5.0);
     f9e:	4b e2       	ldi	r20, 0x2B	; 43
     fa0:	5b ea       	ldi	r21, 0xAB	; 171
     fa2:	6c e2       	ldi	r22, 0x2C	; 44
     fa4:	70 e4       	ldi	r23, 0x40	; 64
     fa6:	8f ee       	ldi	r24, 0xEF	; 239
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	0e 94 cb 05 	call	0xb96	; 0xb96 <_Z11interpolatePA2_ff>
     fae:	6b 01       	movw	r12, r22
     fb0:	7c 01       	movw	r14, r24
     fb2:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <Ywind>
     fb6:	70 93 a3 01 	sts	0x01A3, r23	; 0x8001a3 <Ywind+0x1>
     fba:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <Ywind+0x2>
     fbe:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <Ywind+0x3>
	Xwind = interpolate(flows94, (raw0 / 1023.0) * 5.0);
     fc2:	4b e2       	ldi	r20, 0x2B	; 43
     fc4:	5b ea       	ldi	r21, 0xAB	; 171
     fc6:	6c e2       	ldi	r22, 0x2C	; 44
     fc8:	70 e4       	ldi	r23, 0x40	; 64
     fca:	87 e6       	ldi	r24, 0x67	; 103
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	0e 94 cb 05 	call	0xb96	; 0xb96 <_Z11interpolatePA2_ff>
     fd2:	4b 01       	movw	r8, r22
     fd4:	5c 01       	movw	r10, r24
     fd6:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <Xwind>
     fda:	70 93 a7 01 	sts	0x01A7, r23	; 0x8001a7 <Xwind+0x1>
     fde:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <Xwind+0x2>
     fe2:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <Xwind+0x3>
	totalWind = getTotalWind(Ywind, Xwind);
     fe6:	9b 01       	movw	r18, r22
     fe8:	ac 01       	movw	r20, r24
     fea:	c7 01       	movw	r24, r14
     fec:	b6 01       	movw	r22, r12
     fee:	0e 94 84 06 	call	0xd08	; 0xd08 <_Z12getTotalWindff>
     ff2:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <totalWind>
     ff6:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <totalWind+0x1>
     ffa:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <totalWind+0x2>
     ffe:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <totalWind+0x3>
	return sqrt(sq(WSx) + sq(WSy));
}

float getWindAngle(float WSy, float WSx) {

	return atan(WSy / WSx);
    1002:	a5 01       	movw	r20, r10
    1004:	94 01       	movw	r18, r8
    1006:	c7 01       	movw	r24, r14
    1008:	b6 01       	movw	r22, r12
    100a:	0e 94 bc 09 	call	0x1378	; 0x1378 <__divsf3>
    100e:	0e 94 83 09 	call	0x1306	; 0x1306 <atan>
	raw0 = 552;
	raw1 = 552;
	Ywind = interpolate(flows95, (raw1 / 1023.0) * 5.0);
	Xwind = interpolate(flows94, (raw0 / 1023.0) * 5.0);
	totalWind = getTotalWind(Ywind, Xwind);
	angle = getWindAngle(Ywind, Xwind );
    1012:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <__data_end>
    1016:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <__data_end+0x1>
    101a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end+0x2>
    101e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <__data_end+0x3>


	if (Xwind >= 2 || Ywind >= 2) {
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	50 e4       	ldi	r21, 0x40	; 64
    102a:	c5 01       	movw	r24, r10
    102c:	b4 01       	movw	r22, r8
    102e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__gesf2>
    1032:	87 ff       	sbrs	r24, 7
    1034:	0a c0       	rjmp	.+20     	; 0x104a <loop+0xfe>
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	50 e4       	ldi	r21, 0x40	; 64
    103e:	c7 01       	movw	r24, r14
    1040:	b6 01       	movw	r22, r12
    1042:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__gesf2>
    1046:	87 fd       	sbrc	r24, 7
    1048:	de c0       	rjmp	.+444    	; 0x1206 <loop+0x2ba>
		tft.setRotation(2);
    104a:	62 e0       	ldi	r22, 0x02	; 2
    104c:	8e eb       	ldi	r24, 0xBE	; 190
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	0e 94 a7 1a 	call	0x354e	; 0x354e <_ZN15Adafruit_ST773511setRotationEh>
		tft.setCursor(64, 10);
    1054:	4a e0       	ldi	r20, 0x0A	; 10
    1056:	50 e0       	ldi	r21, 0x00	; 0
    1058:	60 e4       	ldi	r22, 0x40	; 64
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	8e eb       	ldi	r24, 0xBE	; 190
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	0e 94 d7 17 	call	0x2fae	; 0x2fae <_ZN12Adafruit_GFX9setCursorEii>
		tft.setTextColor(0);
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	8e eb       	ldi	r24, 0xBE	; 190
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <_ZN12Adafruit_GFX12setTextColorEj>
		tft.print(lastSpeed);
    1070:	40 91 b2 01 	lds	r20, 0x01B2	; 0x8001b2 <lastSpeed>
    1074:	50 91 b3 01 	lds	r21, 0x01B3	; 0x8001b3 <lastSpeed+0x1>
    1078:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <lastSpeed+0x2>
    107c:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <lastSpeed+0x3>
    1080:	22 e0       	ldi	r18, 0x02	; 2
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	8e eb       	ldi	r24, 0xBE	; 190
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <_ZN5Print5printEdi>
		tft.setCursor(64, 10);
    108c:	4a e0       	ldi	r20, 0x0A	; 10
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	60 e4       	ldi	r22, 0x40	; 64
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	8e eb       	ldi	r24, 0xBE	; 190
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	0e 94 d7 17 	call	0x2fae	; 0x2fae <_ZN12Adafruit_GFX9setCursorEii>

		tft.setTextColor(0xFFFFF);
    109c:	6f ef       	ldi	r22, 0xFF	; 255
    109e:	7f ef       	ldi	r23, 0xFF	; 255
    10a0:	8e eb       	ldi	r24, 0xBE	; 190
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	0e 94 dd 17 	call	0x2fba	; 0x2fba <_ZN12Adafruit_GFX12setTextColorEj>
		int windKMh = totalWind * 3.6;
    10a8:	26 e6       	ldi	r18, 0x66	; 102
    10aa:	36 e6       	ldi	r19, 0x66	; 102
    10ac:	46 e6       	ldi	r20, 0x66	; 102
    10ae:	50 e4       	ldi	r21, 0x40	; 64
    10b0:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <totalWind>
    10b4:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <totalWind+0x1>
    10b8:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <totalWind+0x2>
    10bc:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <totalWind+0x3>
    10c0:	0e 94 89 0b 	call	0x1712	; 0x1712 <__mulsf3>
    10c4:	0e 94 2e 0a 	call	0x145c	; 0x145c <__fixsfsi>
    10c8:	6b 01       	movw	r12, r22
    10ca:	7c 01       	movw	r14, r24
		lastSpeed = windKMh;
    10cc:	07 2e       	mov	r0, r23
    10ce:	00 0c       	add	r0, r0
    10d0:	88 0b       	sbc	r24, r24
    10d2:	99 0b       	sbc	r25, r25
    10d4:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__floatsisf>
    10d8:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <lastSpeed>
    10dc:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <lastSpeed+0x1>
    10e0:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <lastSpeed+0x2>
    10e4:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <lastSpeed+0x3>
		tft.print(String(windKMh));
    10e8:	4a e0       	ldi	r20, 0x0A	; 10
    10ea:	b6 01       	movw	r22, r12
    10ec:	ce 01       	movw	r24, r28
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	0e 94 02 12 	call	0x2404	; 0x2404 <_ZN6StringC1Eih>
    10f4:	be 01       	movw	r22, r28
    10f6:	6f 5f       	subi	r22, 0xFF	; 255
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255
    10fa:	8e eb       	ldi	r24, 0xBE	; 190
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_ZN5Print5printERK6String>
    1102:	ce 01       	movw	r24, r28
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	0e 94 7d 11 	call	0x22fa	; 0x22fa <_ZN6StringD1Ev>
		//	tft.print(" km/h");



		tft.drawLine(x0, y0, lastX1, lastY1, 0x0);
    110a:	00 91 ba 01 	lds	r16, 0x01BA	; 0x8001ba <lastY1>
    110e:	10 91 bb 01 	lds	r17, 0x01BB	; 0x8001bb <lastY1+0x1>
    1112:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <lastX1>
    1116:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <lastX1+0x1>
    111a:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <y0>
    111e:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <y0+0x1>
    1122:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <x0>
    1126:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <x0+0x1>
    112a:	e1 2c       	mov	r14, r1
    112c:	f1 2c       	mov	r15, r1
    112e:	8e eb       	ldi	r24, 0xBE	; 190
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <_ZN12Adafruit_GFX8drawLineEiiiij>


		plotLine (x0, y0, angle, 50);
    1136:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <__data_end>
    113a:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <__data_end+0x1>
    113e:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <__data_end+0x2>
    1142:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <__data_end+0x3>
    1146:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <y0>
    114a:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <y0+0x1>
    114e:	02 e3       	ldi	r16, 0x32	; 50
    1150:	10 e0       	ldi	r17, 0x00	; 0
    1152:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <x0>
    1156:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <x0+0x1>
    115a:	0e 94 b1 06 	call	0xd62	; 0xd62 <_Z8plotLineiifi>
		Serial.println(angle * (180 / PI));
    115e:	20 ee       	ldi	r18, 0xE0	; 224
    1160:	3e e2       	ldi	r19, 0x2E	; 46
    1162:	45 e6       	ldi	r20, 0x65	; 101
    1164:	52 e4       	ldi	r21, 0x42	; 66
    1166:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <__data_end>
    116a:	70 91 9b 01 	lds	r23, 0x019B	; 0x80019b <__data_end+0x1>
    116e:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end+0x2>
    1172:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <__data_end+0x3>
    1176:	0e 94 89 0b 	call	0x1712	; 0x1712 <__mulsf3>
    117a:	ab 01       	movw	r20, r22
    117c:	bc 01       	movw	r22, r24
    117e:	22 e0       	ldi	r18, 0x02	; 2
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	8f ed       	ldi	r24, 0xDF	; 223
    1184:	92 e0       	ldi	r25, 0x02	; 2
    1186:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_ZN5Print7printlnEdi>
		Serial.println("!!!!!!!!!!!!!!!!!!!!!");
    118a:	6a e0       	ldi	r22, 0x0A	; 10
    118c:	71 e0       	ldi	r23, 0x01	; 1
    118e:	8f ed       	ldi	r24, 0xDF	; 223
    1190:	92 e0       	ldi	r25, 0x02	; 2
    1192:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <_ZN5Print7printlnEPKc>

		Serial.println(Xwind);
    1196:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <Xwind>
    119a:	50 91 a7 01 	lds	r21, 0x01A7	; 0x8001a7 <Xwind+0x1>
    119e:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <Xwind+0x2>
    11a2:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <Xwind+0x3>
    11a6:	22 e0       	ldi	r18, 0x02	; 2
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8f ed       	ldi	r24, 0xDF	; 223
    11ac:	92 e0       	ldi	r25, 0x02	; 2
    11ae:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_ZN5Print7printlnEdi>
		Serial.println(Ywind);
    11b2:	40 91 a2 01 	lds	r20, 0x01A2	; 0x8001a2 <Ywind>
    11b6:	50 91 a3 01 	lds	r21, 0x01A3	; 0x8001a3 <Ywind+0x1>
    11ba:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <Ywind+0x2>
    11be:	70 91 a5 01 	lds	r23, 0x01A5	; 0x8001a5 <Ywind+0x3>
    11c2:	22 e0       	ldi	r18, 0x02	; 2
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	8f ed       	ldi	r24, 0xDF	; 223
    11c8:	92 e0       	ldi	r25, 0x02	; 2
    11ca:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <_ZN5Print7printlnEdi>
		Serial.println("!!!!!!!!!!!!!!!!!!!!!");
    11ce:	6a e0       	ldi	r22, 0x0A	; 10
    11d0:	71 e0       	ldi	r23, 0x01	; 1
    11d2:	8f ed       	ldi	r24, 0xDF	; 223
    11d4:	92 e0       	ldi	r25, 0x02	; 2
    11d6:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <_ZN5Print7printlnEPKc>
		lastAngle = angle;
    11da:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
    11de:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x1>
    11e2:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <__data_end+0x2>
    11e6:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <__data_end+0x3>
    11ea:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lastAngle>
    11ee:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <lastAngle+0x1>
    11f2:	a0 93 b8 01 	sts	0x01B8, r26	; 0x8001b8 <lastAngle+0x2>
    11f6:	b0 93 b9 01 	sts	0x01B9, r27	; 0x8001b9 <lastAngle+0x3>
		delay(100);
    11fa:	64 e6       	ldi	r22, 0x64	; 100
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 72 10 	call	0x20e4	; 0x20e4 <delay>

	}

}
    1206:	26 96       	adiw	r28, 0x06	; 6
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	ff 90       	pop	r15
    121c:	ef 90       	pop	r14
    121e:	df 90       	pop	r13
    1220:	cf 90       	pop	r12
    1222:	bf 90       	pop	r11
    1224:	af 90       	pop	r10
    1226:	9f 90       	pop	r9
    1228:	8f 90       	pop	r8
    122a:	08 95       	ret

0000122c <__subsf3>:
    122c:	50 58       	subi	r21, 0x80	; 128

0000122e <__addsf3>:
    122e:	bb 27       	eor	r27, r27
    1230:	aa 27       	eor	r26, r26
    1232:	0e 94 2e 09 	call	0x125c	; 0x125c <__addsf3x>
    1236:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__fp_round>
    123a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__fp_pscA>
    123e:	38 f0       	brcs	.+14     	; 0x124e <__addsf3+0x20>
    1240:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fp_pscB>
    1244:	20 f0       	brcs	.+8      	; 0x124e <__addsf3+0x20>
    1246:	39 f4       	brne	.+14     	; 0x1256 <__addsf3+0x28>
    1248:	9f 3f       	cpi	r25, 0xFF	; 255
    124a:	19 f4       	brne	.+6      	; 0x1252 <__addsf3+0x24>
    124c:	26 f4       	brtc	.+8      	; 0x1256 <__addsf3+0x28>
    124e:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_nan>
    1252:	0e f4       	brtc	.+2      	; 0x1256 <__addsf3+0x28>
    1254:	e0 95       	com	r30
    1256:	e7 fb       	bst	r30, 7
    1258:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__fp_inf>

0000125c <__addsf3x>:
    125c:	e9 2f       	mov	r30, r25
    125e:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__fp_split3>
    1262:	58 f3       	brcs	.-42     	; 0x123a <__addsf3+0xc>
    1264:	ba 17       	cp	r27, r26
    1266:	62 07       	cpc	r22, r18
    1268:	73 07       	cpc	r23, r19
    126a:	84 07       	cpc	r24, r20
    126c:	95 07       	cpc	r25, r21
    126e:	20 f0       	brcs	.+8      	; 0x1278 <__addsf3x+0x1c>
    1270:	79 f4       	brne	.+30     	; 0x1290 <__addsf3x+0x34>
    1272:	a6 f5       	brtc	.+104    	; 0x12dc <__addsf3x+0x80>
    1274:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__fp_zero>
    1278:	0e f4       	brtc	.+2      	; 0x127c <__addsf3x+0x20>
    127a:	e0 95       	com	r30
    127c:	0b 2e       	mov	r0, r27
    127e:	ba 2f       	mov	r27, r26
    1280:	a0 2d       	mov	r26, r0
    1282:	0b 01       	movw	r0, r22
    1284:	b9 01       	movw	r22, r18
    1286:	90 01       	movw	r18, r0
    1288:	0c 01       	movw	r0, r24
    128a:	ca 01       	movw	r24, r20
    128c:	a0 01       	movw	r20, r0
    128e:	11 24       	eor	r1, r1
    1290:	ff 27       	eor	r31, r31
    1292:	59 1b       	sub	r21, r25
    1294:	99 f0       	breq	.+38     	; 0x12bc <__addsf3x+0x60>
    1296:	59 3f       	cpi	r21, 0xF9	; 249
    1298:	50 f4       	brcc	.+20     	; 0x12ae <__addsf3x+0x52>
    129a:	50 3e       	cpi	r21, 0xE0	; 224
    129c:	68 f1       	brcs	.+90     	; 0x12f8 <__addsf3x+0x9c>
    129e:	1a 16       	cp	r1, r26
    12a0:	f0 40       	sbci	r31, 0x00	; 0
    12a2:	a2 2f       	mov	r26, r18
    12a4:	23 2f       	mov	r18, r19
    12a6:	34 2f       	mov	r19, r20
    12a8:	44 27       	eor	r20, r20
    12aa:	58 5f       	subi	r21, 0xF8	; 248
    12ac:	f3 cf       	rjmp	.-26     	; 0x1294 <__addsf3x+0x38>
    12ae:	46 95       	lsr	r20
    12b0:	37 95       	ror	r19
    12b2:	27 95       	ror	r18
    12b4:	a7 95       	ror	r26
    12b6:	f0 40       	sbci	r31, 0x00	; 0
    12b8:	53 95       	inc	r21
    12ba:	c9 f7       	brne	.-14     	; 0x12ae <__addsf3x+0x52>
    12bc:	7e f4       	brtc	.+30     	; 0x12dc <__addsf3x+0x80>
    12be:	1f 16       	cp	r1, r31
    12c0:	ba 0b       	sbc	r27, r26
    12c2:	62 0b       	sbc	r22, r18
    12c4:	73 0b       	sbc	r23, r19
    12c6:	84 0b       	sbc	r24, r20
    12c8:	ba f0       	brmi	.+46     	; 0x12f8 <__addsf3x+0x9c>
    12ca:	91 50       	subi	r25, 0x01	; 1
    12cc:	a1 f0       	breq	.+40     	; 0x12f6 <__addsf3x+0x9a>
    12ce:	ff 0f       	add	r31, r31
    12d0:	bb 1f       	adc	r27, r27
    12d2:	66 1f       	adc	r22, r22
    12d4:	77 1f       	adc	r23, r23
    12d6:	88 1f       	adc	r24, r24
    12d8:	c2 f7       	brpl	.-16     	; 0x12ca <__addsf3x+0x6e>
    12da:	0e c0       	rjmp	.+28     	; 0x12f8 <__addsf3x+0x9c>
    12dc:	ba 0f       	add	r27, r26
    12de:	62 1f       	adc	r22, r18
    12e0:	73 1f       	adc	r23, r19
    12e2:	84 1f       	adc	r24, r20
    12e4:	48 f4       	brcc	.+18     	; 0x12f8 <__addsf3x+0x9c>
    12e6:	87 95       	ror	r24
    12e8:	77 95       	ror	r23
    12ea:	67 95       	ror	r22
    12ec:	b7 95       	ror	r27
    12ee:	f7 95       	ror	r31
    12f0:	9e 3f       	cpi	r25, 0xFE	; 254
    12f2:	08 f0       	brcs	.+2      	; 0x12f6 <__addsf3x+0x9a>
    12f4:	b0 cf       	rjmp	.-160    	; 0x1256 <__addsf3+0x28>
    12f6:	93 95       	inc	r25
    12f8:	88 0f       	add	r24, r24
    12fa:	08 f0       	brcs	.+2      	; 0x12fe <__addsf3x+0xa2>
    12fc:	99 27       	eor	r25, r25
    12fe:	ee 0f       	add	r30, r30
    1300:	97 95       	ror	r25
    1302:	87 95       	ror	r24
    1304:	08 95       	ret

00001306 <atan>:
    1306:	df 93       	push	r29
    1308:	dd 27       	eor	r29, r29
    130a:	b9 2f       	mov	r27, r25
    130c:	bf 77       	andi	r27, 0x7F	; 127
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	5f e3       	ldi	r21, 0x3F	; 63
    1312:	16 16       	cp	r1, r22
    1314:	17 06       	cpc	r1, r23
    1316:	48 07       	cpc	r20, r24
    1318:	5b 07       	cpc	r21, r27
    131a:	18 f4       	brcc	.+6      	; 0x1322 <atan+0x1c>
    131c:	d9 2f       	mov	r29, r25
    131e:	0e 94 81 0b 	call	0x1702	; 0x1702 <inverse>
    1322:	9f 93       	push	r25
    1324:	8f 93       	push	r24
    1326:	7f 93       	push	r23
    1328:	6f 93       	push	r22
    132a:	0e 94 44 0c 	call	0x1888	; 0x1888 <square>
    132e:	e8 e6       	ldi	r30, 0x68	; 104
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	0e 94 ce 0a 	call	0x159c	; 0x159c <__fp_powser>
    1336:	0e 94 2e 0b 	call	0x165c	; 0x165c <__fp_round>
    133a:	2f 91       	pop	r18
    133c:	3f 91       	pop	r19
    133e:	4f 91       	pop	r20
    1340:	5f 91       	pop	r21
    1342:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__mulsf3x>
    1346:	dd 23       	and	r29, r29
    1348:	51 f0       	breq	.+20     	; 0x135e <atan+0x58>
    134a:	90 58       	subi	r25, 0x80	; 128
    134c:	a2 ea       	ldi	r26, 0xA2	; 162
    134e:	2a ed       	ldi	r18, 0xDA	; 218
    1350:	3f e0       	ldi	r19, 0x0F	; 15
    1352:	49 ec       	ldi	r20, 0xC9	; 201
    1354:	5f e3       	ldi	r21, 0x3F	; 63
    1356:	d0 78       	andi	r29, 0x80	; 128
    1358:	5d 27       	eor	r21, r29
    135a:	0e 94 2e 09 	call	0x125c	; 0x125c <__addsf3x>
    135e:	df 91       	pop	r29
    1360:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__fp_round>

00001364 <__cmpsf2>:
    1364:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__fp_cmp>
    1368:	08 f4       	brcc	.+2      	; 0x136c <__cmpsf2+0x8>
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	08 95       	ret

0000136e <cos>:
    136e:	0e 94 05 0b 	call	0x160a	; 0x160a <__fp_rempio2>
    1372:	e3 95       	inc	r30
    1374:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__fp_sinus>

00001378 <__divsf3>:
    1378:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__divsf3x>
    137c:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__fp_round>
    1380:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fp_pscB>
    1384:	58 f0       	brcs	.+22     	; 0x139c <__divsf3+0x24>
    1386:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__fp_pscA>
    138a:	40 f0       	brcs	.+16     	; 0x139c <__divsf3+0x24>
    138c:	29 f4       	brne	.+10     	; 0x1398 <__divsf3+0x20>
    138e:	5f 3f       	cpi	r21, 0xFF	; 255
    1390:	29 f0       	breq	.+10     	; 0x139c <__divsf3+0x24>
    1392:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__fp_inf>
    1396:	51 11       	cpse	r21, r1
    1398:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__fp_szero>
    139c:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_nan>

000013a0 <__divsf3x>:
    13a0:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__fp_split3>
    13a4:	68 f3       	brcs	.-38     	; 0x1380 <__divsf3+0x8>

000013a6 <__divsf3_pse>:
    13a6:	99 23       	and	r25, r25
    13a8:	b1 f3       	breq	.-20     	; 0x1396 <__divsf3+0x1e>
    13aa:	55 23       	and	r21, r21
    13ac:	91 f3       	breq	.-28     	; 0x1392 <__divsf3+0x1a>
    13ae:	95 1b       	sub	r25, r21
    13b0:	55 0b       	sbc	r21, r21
    13b2:	bb 27       	eor	r27, r27
    13b4:	aa 27       	eor	r26, r26
    13b6:	62 17       	cp	r22, r18
    13b8:	73 07       	cpc	r23, r19
    13ba:	84 07       	cpc	r24, r20
    13bc:	38 f0       	brcs	.+14     	; 0x13cc <__divsf3_pse+0x26>
    13be:	9f 5f       	subi	r25, 0xFF	; 255
    13c0:	5f 4f       	sbci	r21, 0xFF	; 255
    13c2:	22 0f       	add	r18, r18
    13c4:	33 1f       	adc	r19, r19
    13c6:	44 1f       	adc	r20, r20
    13c8:	aa 1f       	adc	r26, r26
    13ca:	a9 f3       	breq	.-22     	; 0x13b6 <__divsf3_pse+0x10>
    13cc:	35 d0       	rcall	.+106    	; 0x1438 <__divsf3_pse+0x92>
    13ce:	0e 2e       	mov	r0, r30
    13d0:	3a f0       	brmi	.+14     	; 0x13e0 <__divsf3_pse+0x3a>
    13d2:	e0 e8       	ldi	r30, 0x80	; 128
    13d4:	32 d0       	rcall	.+100    	; 0x143a <__divsf3_pse+0x94>
    13d6:	91 50       	subi	r25, 0x01	; 1
    13d8:	50 40       	sbci	r21, 0x00	; 0
    13da:	e6 95       	lsr	r30
    13dc:	00 1c       	adc	r0, r0
    13de:	ca f7       	brpl	.-14     	; 0x13d2 <__divsf3_pse+0x2c>
    13e0:	2b d0       	rcall	.+86     	; 0x1438 <__divsf3_pse+0x92>
    13e2:	fe 2f       	mov	r31, r30
    13e4:	29 d0       	rcall	.+82     	; 0x1438 <__divsf3_pse+0x92>
    13e6:	66 0f       	add	r22, r22
    13e8:	77 1f       	adc	r23, r23
    13ea:	88 1f       	adc	r24, r24
    13ec:	bb 1f       	adc	r27, r27
    13ee:	26 17       	cp	r18, r22
    13f0:	37 07       	cpc	r19, r23
    13f2:	48 07       	cpc	r20, r24
    13f4:	ab 07       	cpc	r26, r27
    13f6:	b0 e8       	ldi	r27, 0x80	; 128
    13f8:	09 f0       	breq	.+2      	; 0x13fc <__divsf3_pse+0x56>
    13fa:	bb 0b       	sbc	r27, r27
    13fc:	80 2d       	mov	r24, r0
    13fe:	bf 01       	movw	r22, r30
    1400:	ff 27       	eor	r31, r31
    1402:	93 58       	subi	r25, 0x83	; 131
    1404:	5f 4f       	sbci	r21, 0xFF	; 255
    1406:	3a f0       	brmi	.+14     	; 0x1416 <__divsf3_pse+0x70>
    1408:	9e 3f       	cpi	r25, 0xFE	; 254
    140a:	51 05       	cpc	r21, r1
    140c:	78 f0       	brcs	.+30     	; 0x142c <__divsf3_pse+0x86>
    140e:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__fp_inf>
    1412:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__fp_szero>
    1416:	5f 3f       	cpi	r21, 0xFF	; 255
    1418:	e4 f3       	brlt	.-8      	; 0x1412 <__divsf3_pse+0x6c>
    141a:	98 3e       	cpi	r25, 0xE8	; 232
    141c:	d4 f3       	brlt	.-12     	; 0x1412 <__divsf3_pse+0x6c>
    141e:	86 95       	lsr	r24
    1420:	77 95       	ror	r23
    1422:	67 95       	ror	r22
    1424:	b7 95       	ror	r27
    1426:	f7 95       	ror	r31
    1428:	9f 5f       	subi	r25, 0xFF	; 255
    142a:	c9 f7       	brne	.-14     	; 0x141e <__divsf3_pse+0x78>
    142c:	88 0f       	add	r24, r24
    142e:	91 1d       	adc	r25, r1
    1430:	96 95       	lsr	r25
    1432:	87 95       	ror	r24
    1434:	97 f9       	bld	r25, 7
    1436:	08 95       	ret
    1438:	e1 e0       	ldi	r30, 0x01	; 1
    143a:	66 0f       	add	r22, r22
    143c:	77 1f       	adc	r23, r23
    143e:	88 1f       	adc	r24, r24
    1440:	bb 1f       	adc	r27, r27
    1442:	62 17       	cp	r22, r18
    1444:	73 07       	cpc	r23, r19
    1446:	84 07       	cpc	r24, r20
    1448:	ba 07       	cpc	r27, r26
    144a:	20 f0       	brcs	.+8      	; 0x1454 <__divsf3_pse+0xae>
    144c:	62 1b       	sub	r22, r18
    144e:	73 0b       	sbc	r23, r19
    1450:	84 0b       	sbc	r24, r20
    1452:	ba 0b       	sbc	r27, r26
    1454:	ee 1f       	adc	r30, r30
    1456:	88 f7       	brcc	.-30     	; 0x143a <__divsf3_pse+0x94>
    1458:	e0 95       	com	r30
    145a:	08 95       	ret

0000145c <__fixsfsi>:
    145c:	0e 94 35 0a 	call	0x146a	; 0x146a <__fixunssfsi>
    1460:	68 94       	set
    1462:	b1 11       	cpse	r27, r1
    1464:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__fp_szero>
    1468:	08 95       	ret

0000146a <__fixunssfsi>:
    146a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__fp_splitA>
    146e:	88 f0       	brcs	.+34     	; 0x1492 <__fixunssfsi+0x28>
    1470:	9f 57       	subi	r25, 0x7F	; 127
    1472:	98 f0       	brcs	.+38     	; 0x149a <__fixunssfsi+0x30>
    1474:	b9 2f       	mov	r27, r25
    1476:	99 27       	eor	r25, r25
    1478:	b7 51       	subi	r27, 0x17	; 23
    147a:	b0 f0       	brcs	.+44     	; 0x14a8 <__fixunssfsi+0x3e>
    147c:	e1 f0       	breq	.+56     	; 0x14b6 <__fixunssfsi+0x4c>
    147e:	66 0f       	add	r22, r22
    1480:	77 1f       	adc	r23, r23
    1482:	88 1f       	adc	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	1a f0       	brmi	.+6      	; 0x148e <__fixunssfsi+0x24>
    1488:	ba 95       	dec	r27
    148a:	c9 f7       	brne	.-14     	; 0x147e <__fixunssfsi+0x14>
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <__fixunssfsi+0x4c>
    148e:	b1 30       	cpi	r27, 0x01	; 1
    1490:	91 f0       	breq	.+36     	; 0x14b6 <__fixunssfsi+0x4c>
    1492:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__fp_zero>
    1496:	b1 e0       	ldi	r27, 0x01	; 1
    1498:	08 95       	ret
    149a:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__fp_zero>
    149e:	67 2f       	mov	r22, r23
    14a0:	78 2f       	mov	r23, r24
    14a2:	88 27       	eor	r24, r24
    14a4:	b8 5f       	subi	r27, 0xF8	; 248
    14a6:	39 f0       	breq	.+14     	; 0x14b6 <__fixunssfsi+0x4c>
    14a8:	b9 3f       	cpi	r27, 0xF9	; 249
    14aa:	cc f3       	brlt	.-14     	; 0x149e <__fixunssfsi+0x34>
    14ac:	86 95       	lsr	r24
    14ae:	77 95       	ror	r23
    14b0:	67 95       	ror	r22
    14b2:	b3 95       	inc	r27
    14b4:	d9 f7       	brne	.-10     	; 0x14ac <__fixunssfsi+0x42>
    14b6:	3e f4       	brtc	.+14     	; 0x14c6 <__fixunssfsi+0x5c>
    14b8:	90 95       	com	r25
    14ba:	80 95       	com	r24
    14bc:	70 95       	com	r23
    14be:	61 95       	neg	r22
    14c0:	7f 4f       	sbci	r23, 0xFF	; 255
    14c2:	8f 4f       	sbci	r24, 0xFF	; 255
    14c4:	9f 4f       	sbci	r25, 0xFF	; 255
    14c6:	08 95       	ret

000014c8 <__floatunsisf>:
    14c8:	e8 94       	clt
    14ca:	09 c0       	rjmp	.+18     	; 0x14de <__floatsisf+0x12>

000014cc <__floatsisf>:
    14cc:	97 fb       	bst	r25, 7
    14ce:	3e f4       	brtc	.+14     	; 0x14de <__floatsisf+0x12>
    14d0:	90 95       	com	r25
    14d2:	80 95       	com	r24
    14d4:	70 95       	com	r23
    14d6:	61 95       	neg	r22
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	8f 4f       	sbci	r24, 0xFF	; 255
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	99 23       	and	r25, r25
    14e0:	a9 f0       	breq	.+42     	; 0x150c <__floatsisf+0x40>
    14e2:	f9 2f       	mov	r31, r25
    14e4:	96 e9       	ldi	r25, 0x96	; 150
    14e6:	bb 27       	eor	r27, r27
    14e8:	93 95       	inc	r25
    14ea:	f6 95       	lsr	r31
    14ec:	87 95       	ror	r24
    14ee:	77 95       	ror	r23
    14f0:	67 95       	ror	r22
    14f2:	b7 95       	ror	r27
    14f4:	f1 11       	cpse	r31, r1
    14f6:	f8 cf       	rjmp	.-16     	; 0x14e8 <__floatsisf+0x1c>
    14f8:	fa f4       	brpl	.+62     	; 0x1538 <__floatsisf+0x6c>
    14fa:	bb 0f       	add	r27, r27
    14fc:	11 f4       	brne	.+4      	; 0x1502 <__floatsisf+0x36>
    14fe:	60 ff       	sbrs	r22, 0
    1500:	1b c0       	rjmp	.+54     	; 0x1538 <__floatsisf+0x6c>
    1502:	6f 5f       	subi	r22, 0xFF	; 255
    1504:	7f 4f       	sbci	r23, 0xFF	; 255
    1506:	8f 4f       	sbci	r24, 0xFF	; 255
    1508:	9f 4f       	sbci	r25, 0xFF	; 255
    150a:	16 c0       	rjmp	.+44     	; 0x1538 <__floatsisf+0x6c>
    150c:	88 23       	and	r24, r24
    150e:	11 f0       	breq	.+4      	; 0x1514 <__floatsisf+0x48>
    1510:	96 e9       	ldi	r25, 0x96	; 150
    1512:	11 c0       	rjmp	.+34     	; 0x1536 <__floatsisf+0x6a>
    1514:	77 23       	and	r23, r23
    1516:	21 f0       	breq	.+8      	; 0x1520 <__floatsisf+0x54>
    1518:	9e e8       	ldi	r25, 0x8E	; 142
    151a:	87 2f       	mov	r24, r23
    151c:	76 2f       	mov	r23, r22
    151e:	05 c0       	rjmp	.+10     	; 0x152a <__floatsisf+0x5e>
    1520:	66 23       	and	r22, r22
    1522:	71 f0       	breq	.+28     	; 0x1540 <__floatsisf+0x74>
    1524:	96 e8       	ldi	r25, 0x86	; 134
    1526:	86 2f       	mov	r24, r22
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	2a f0       	brmi	.+10     	; 0x1538 <__floatsisf+0x6c>
    152e:	9a 95       	dec	r25
    1530:	66 0f       	add	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	da f7       	brpl	.-10     	; 0x152e <__floatsisf+0x62>
    1538:	88 0f       	add	r24, r24
    153a:	96 95       	lsr	r25
    153c:	87 95       	ror	r24
    153e:	97 f9       	bld	r25, 7
    1540:	08 95       	ret

00001542 <__fp_cmp>:
    1542:	99 0f       	add	r25, r25
    1544:	00 08       	sbc	r0, r0
    1546:	55 0f       	add	r21, r21
    1548:	aa 0b       	sbc	r26, r26
    154a:	e0 e8       	ldi	r30, 0x80	; 128
    154c:	fe ef       	ldi	r31, 0xFE	; 254
    154e:	16 16       	cp	r1, r22
    1550:	17 06       	cpc	r1, r23
    1552:	e8 07       	cpc	r30, r24
    1554:	f9 07       	cpc	r31, r25
    1556:	c0 f0       	brcs	.+48     	; 0x1588 <__fp_cmp+0x46>
    1558:	12 16       	cp	r1, r18
    155a:	13 06       	cpc	r1, r19
    155c:	e4 07       	cpc	r30, r20
    155e:	f5 07       	cpc	r31, r21
    1560:	98 f0       	brcs	.+38     	; 0x1588 <__fp_cmp+0x46>
    1562:	62 1b       	sub	r22, r18
    1564:	73 0b       	sbc	r23, r19
    1566:	84 0b       	sbc	r24, r20
    1568:	95 0b       	sbc	r25, r21
    156a:	39 f4       	brne	.+14     	; 0x157a <__fp_cmp+0x38>
    156c:	0a 26       	eor	r0, r26
    156e:	61 f0       	breq	.+24     	; 0x1588 <__fp_cmp+0x46>
    1570:	23 2b       	or	r18, r19
    1572:	24 2b       	or	r18, r20
    1574:	25 2b       	or	r18, r21
    1576:	21 f4       	brne	.+8      	; 0x1580 <__fp_cmp+0x3e>
    1578:	08 95       	ret
    157a:	0a 26       	eor	r0, r26
    157c:	09 f4       	brne	.+2      	; 0x1580 <__fp_cmp+0x3e>
    157e:	a1 40       	sbci	r26, 0x01	; 1
    1580:	a6 95       	lsr	r26
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	81 1d       	adc	r24, r1
    1586:	81 1d       	adc	r24, r1
    1588:	08 95       	ret

0000158a <__fp_inf>:
    158a:	97 f9       	bld	r25, 7
    158c:	9f 67       	ori	r25, 0x7F	; 127
    158e:	80 e8       	ldi	r24, 0x80	; 128
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	08 95       	ret

00001596 <__fp_nan>:
    1596:	9f ef       	ldi	r25, 0xFF	; 255
    1598:	80 ec       	ldi	r24, 0xC0	; 192
    159a:	08 95       	ret

0000159c <__fp_powser>:
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	1f 93       	push	r17
    15a2:	0f 93       	push	r16
    15a4:	ff 92       	push	r15
    15a6:	ef 92       	push	r14
    15a8:	df 92       	push	r13
    15aa:	7b 01       	movw	r14, r22
    15ac:	8c 01       	movw	r16, r24
    15ae:	68 94       	set
    15b0:	06 c0       	rjmp	.+12     	; 0x15be <__fp_powser+0x22>
    15b2:	da 2e       	mov	r13, r26
    15b4:	ef 01       	movw	r28, r30
    15b6:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__mulsf3x>
    15ba:	fe 01       	movw	r30, r28
    15bc:	e8 94       	clt
    15be:	a5 91       	lpm	r26, Z+
    15c0:	25 91       	lpm	r18, Z+
    15c2:	35 91       	lpm	r19, Z+
    15c4:	45 91       	lpm	r20, Z+
    15c6:	55 91       	lpm	r21, Z+
    15c8:	a6 f3       	brts	.-24     	; 0x15b2 <__fp_powser+0x16>
    15ca:	ef 01       	movw	r28, r30
    15cc:	0e 94 2e 09 	call	0x125c	; 0x125c <__addsf3x>
    15d0:	fe 01       	movw	r30, r28
    15d2:	97 01       	movw	r18, r14
    15d4:	a8 01       	movw	r20, r16
    15d6:	da 94       	dec	r13
    15d8:	69 f7       	brne	.-38     	; 0x15b4 <__fp_powser+0x18>
    15da:	df 90       	pop	r13
    15dc:	ef 90       	pop	r14
    15de:	ff 90       	pop	r15
    15e0:	0f 91       	pop	r16
    15e2:	1f 91       	pop	r17
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <__fp_pscA>:
    15ea:	00 24       	eor	r0, r0
    15ec:	0a 94       	dec	r0
    15ee:	16 16       	cp	r1, r22
    15f0:	17 06       	cpc	r1, r23
    15f2:	18 06       	cpc	r1, r24
    15f4:	09 06       	cpc	r0, r25
    15f6:	08 95       	ret

000015f8 <__fp_pscB>:
    15f8:	00 24       	eor	r0, r0
    15fa:	0a 94       	dec	r0
    15fc:	12 16       	cp	r1, r18
    15fe:	13 06       	cpc	r1, r19
    1600:	14 06       	cpc	r1, r20
    1602:	05 06       	cpc	r0, r21
    1604:	08 95       	ret
    1606:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_nan>

0000160a <__fp_rempio2>:
    160a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__fp_splitA>
    160e:	d8 f3       	brcs	.-10     	; 0x1606 <__fp_pscB+0xe>
    1610:	e8 94       	clt
    1612:	e0 e0       	ldi	r30, 0x00	; 0
    1614:	bb 27       	eor	r27, r27
    1616:	9f 57       	subi	r25, 0x7F	; 127
    1618:	f0 f0       	brcs	.+60     	; 0x1656 <__fp_rempio2+0x4c>
    161a:	2a ed       	ldi	r18, 0xDA	; 218
    161c:	3f e0       	ldi	r19, 0x0F	; 15
    161e:	49 ec       	ldi	r20, 0xC9	; 201
    1620:	06 c0       	rjmp	.+12     	; 0x162e <__fp_rempio2+0x24>
    1622:	ee 0f       	add	r30, r30
    1624:	bb 0f       	add	r27, r27
    1626:	66 1f       	adc	r22, r22
    1628:	77 1f       	adc	r23, r23
    162a:	88 1f       	adc	r24, r24
    162c:	28 f0       	brcs	.+10     	; 0x1638 <__fp_rempio2+0x2e>
    162e:	b2 3a       	cpi	r27, 0xA2	; 162
    1630:	62 07       	cpc	r22, r18
    1632:	73 07       	cpc	r23, r19
    1634:	84 07       	cpc	r24, r20
    1636:	28 f0       	brcs	.+10     	; 0x1642 <__fp_rempio2+0x38>
    1638:	b2 5a       	subi	r27, 0xA2	; 162
    163a:	62 0b       	sbc	r22, r18
    163c:	73 0b       	sbc	r23, r19
    163e:	84 0b       	sbc	r24, r20
    1640:	e3 95       	inc	r30
    1642:	9a 95       	dec	r25
    1644:	72 f7       	brpl	.-36     	; 0x1622 <__fp_rempio2+0x18>
    1646:	80 38       	cpi	r24, 0x80	; 128
    1648:	30 f4       	brcc	.+12     	; 0x1656 <__fp_rempio2+0x4c>
    164a:	9a 95       	dec	r25
    164c:	bb 0f       	add	r27, r27
    164e:	66 1f       	adc	r22, r22
    1650:	77 1f       	adc	r23, r23
    1652:	88 1f       	adc	r24, r24
    1654:	d2 f7       	brpl	.-12     	; 0x164a <__fp_rempio2+0x40>
    1656:	90 48       	sbci	r25, 0x80	; 128
    1658:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <__fp_mpack_finite>

0000165c <__fp_round>:
    165c:	09 2e       	mov	r0, r25
    165e:	03 94       	inc	r0
    1660:	00 0c       	add	r0, r0
    1662:	11 f4       	brne	.+4      	; 0x1668 <__fp_round+0xc>
    1664:	88 23       	and	r24, r24
    1666:	52 f0       	brmi	.+20     	; 0x167c <__fp_round+0x20>
    1668:	bb 0f       	add	r27, r27
    166a:	40 f4       	brcc	.+16     	; 0x167c <__fp_round+0x20>
    166c:	bf 2b       	or	r27, r31
    166e:	11 f4       	brne	.+4      	; 0x1674 <__fp_round+0x18>
    1670:	60 ff       	sbrs	r22, 0
    1672:	04 c0       	rjmp	.+8      	; 0x167c <__fp_round+0x20>
    1674:	6f 5f       	subi	r22, 0xFF	; 255
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	8f 4f       	sbci	r24, 0xFF	; 255
    167a:	9f 4f       	sbci	r25, 0xFF	; 255
    167c:	08 95       	ret

0000167e <__fp_sinus>:
    167e:	ef 93       	push	r30
    1680:	e0 ff       	sbrs	r30, 0
    1682:	07 c0       	rjmp	.+14     	; 0x1692 <__fp_sinus+0x14>
    1684:	a2 ea       	ldi	r26, 0xA2	; 162
    1686:	2a ed       	ldi	r18, 0xDA	; 218
    1688:	3f e0       	ldi	r19, 0x0F	; 15
    168a:	49 ec       	ldi	r20, 0xC9	; 201
    168c:	5f eb       	ldi	r21, 0xBF	; 191
    168e:	0e 94 2e 09 	call	0x125c	; 0x125c <__addsf3x>
    1692:	0e 94 2e 0b 	call	0x165c	; 0x165c <__fp_round>
    1696:	0f 90       	pop	r0
    1698:	03 94       	inc	r0
    169a:	01 fc       	sbrc	r0, 1
    169c:	90 58       	subi	r25, 0x80	; 128
    169e:	e5 e9       	ldi	r30, 0x95	; 149
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__fp_powsodd>

000016a6 <__fp_split3>:
    16a6:	57 fd       	sbrc	r21, 7
    16a8:	90 58       	subi	r25, 0x80	; 128
    16aa:	44 0f       	add	r20, r20
    16ac:	55 1f       	adc	r21, r21
    16ae:	59 f0       	breq	.+22     	; 0x16c6 <__fp_splitA+0x10>
    16b0:	5f 3f       	cpi	r21, 0xFF	; 255
    16b2:	71 f0       	breq	.+28     	; 0x16d0 <__fp_splitA+0x1a>
    16b4:	47 95       	ror	r20

000016b6 <__fp_splitA>:
    16b6:	88 0f       	add	r24, r24
    16b8:	97 fb       	bst	r25, 7
    16ba:	99 1f       	adc	r25, r25
    16bc:	61 f0       	breq	.+24     	; 0x16d6 <__fp_splitA+0x20>
    16be:	9f 3f       	cpi	r25, 0xFF	; 255
    16c0:	79 f0       	breq	.+30     	; 0x16e0 <__fp_splitA+0x2a>
    16c2:	87 95       	ror	r24
    16c4:	08 95       	ret
    16c6:	12 16       	cp	r1, r18
    16c8:	13 06       	cpc	r1, r19
    16ca:	14 06       	cpc	r1, r20
    16cc:	55 1f       	adc	r21, r21
    16ce:	f2 cf       	rjmp	.-28     	; 0x16b4 <__fp_split3+0xe>
    16d0:	46 95       	lsr	r20
    16d2:	f1 df       	rcall	.-30     	; 0x16b6 <__fp_splitA>
    16d4:	08 c0       	rjmp	.+16     	; 0x16e6 <__fp_splitA+0x30>
    16d6:	16 16       	cp	r1, r22
    16d8:	17 06       	cpc	r1, r23
    16da:	18 06       	cpc	r1, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	f1 cf       	rjmp	.-30     	; 0x16c2 <__fp_splitA+0xc>
    16e0:	86 95       	lsr	r24
    16e2:	71 05       	cpc	r23, r1
    16e4:	61 05       	cpc	r22, r1
    16e6:	08 94       	sec
    16e8:	08 95       	ret

000016ea <__fp_zero>:
    16ea:	e8 94       	clt

000016ec <__fp_szero>:
    16ec:	bb 27       	eor	r27, r27
    16ee:	66 27       	eor	r22, r22
    16f0:	77 27       	eor	r23, r23
    16f2:	cb 01       	movw	r24, r22
    16f4:	97 f9       	bld	r25, 7
    16f6:	08 95       	ret

000016f8 <__gesf2>:
    16f8:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__fp_cmp>
    16fc:	08 f4       	brcc	.+2      	; 0x1700 <__gesf2+0x8>
    16fe:	8f ef       	ldi	r24, 0xFF	; 255
    1700:	08 95       	ret

00001702 <inverse>:
    1702:	9b 01       	movw	r18, r22
    1704:	ac 01       	movw	r20, r24
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	80 e8       	ldi	r24, 0x80	; 128
    170c:	9f e3       	ldi	r25, 0x3F	; 63
    170e:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__divsf3>

00001712 <__mulsf3>:
    1712:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__mulsf3x>
    1716:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__fp_round>
    171a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__fp_pscA>
    171e:	38 f0       	brcs	.+14     	; 0x172e <__mulsf3+0x1c>
    1720:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fp_pscB>
    1724:	20 f0       	brcs	.+8      	; 0x172e <__mulsf3+0x1c>
    1726:	95 23       	and	r25, r21
    1728:	11 f0       	breq	.+4      	; 0x172e <__mulsf3+0x1c>
    172a:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__fp_inf>
    172e:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_nan>
    1732:	11 24       	eor	r1, r1
    1734:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__fp_szero>

00001738 <__mulsf3x>:
    1738:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__fp_split3>
    173c:	70 f3       	brcs	.-36     	; 0x171a <__mulsf3+0x8>

0000173e <__mulsf3_pse>:
    173e:	95 9f       	mul	r25, r21
    1740:	c1 f3       	breq	.-16     	; 0x1732 <__mulsf3+0x20>
    1742:	95 0f       	add	r25, r21
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	55 1f       	adc	r21, r21
    1748:	62 9f       	mul	r22, r18
    174a:	f0 01       	movw	r30, r0
    174c:	72 9f       	mul	r23, r18
    174e:	bb 27       	eor	r27, r27
    1750:	f0 0d       	add	r31, r0
    1752:	b1 1d       	adc	r27, r1
    1754:	63 9f       	mul	r22, r19
    1756:	aa 27       	eor	r26, r26
    1758:	f0 0d       	add	r31, r0
    175a:	b1 1d       	adc	r27, r1
    175c:	aa 1f       	adc	r26, r26
    175e:	64 9f       	mul	r22, r20
    1760:	66 27       	eor	r22, r22
    1762:	b0 0d       	add	r27, r0
    1764:	a1 1d       	adc	r26, r1
    1766:	66 1f       	adc	r22, r22
    1768:	82 9f       	mul	r24, r18
    176a:	22 27       	eor	r18, r18
    176c:	b0 0d       	add	r27, r0
    176e:	a1 1d       	adc	r26, r1
    1770:	62 1f       	adc	r22, r18
    1772:	73 9f       	mul	r23, r19
    1774:	b0 0d       	add	r27, r0
    1776:	a1 1d       	adc	r26, r1
    1778:	62 1f       	adc	r22, r18
    177a:	83 9f       	mul	r24, r19
    177c:	a0 0d       	add	r26, r0
    177e:	61 1d       	adc	r22, r1
    1780:	22 1f       	adc	r18, r18
    1782:	74 9f       	mul	r23, r20
    1784:	33 27       	eor	r19, r19
    1786:	a0 0d       	add	r26, r0
    1788:	61 1d       	adc	r22, r1
    178a:	23 1f       	adc	r18, r19
    178c:	84 9f       	mul	r24, r20
    178e:	60 0d       	add	r22, r0
    1790:	21 1d       	adc	r18, r1
    1792:	82 2f       	mov	r24, r18
    1794:	76 2f       	mov	r23, r22
    1796:	6a 2f       	mov	r22, r26
    1798:	11 24       	eor	r1, r1
    179a:	9f 57       	subi	r25, 0x7F	; 127
    179c:	50 40       	sbci	r21, 0x00	; 0
    179e:	9a f0       	brmi	.+38     	; 0x17c6 <__mulsf3_pse+0x88>
    17a0:	f1 f0       	breq	.+60     	; 0x17de <__mulsf3_pse+0xa0>
    17a2:	88 23       	and	r24, r24
    17a4:	4a f0       	brmi	.+18     	; 0x17b8 <__mulsf3_pse+0x7a>
    17a6:	ee 0f       	add	r30, r30
    17a8:	ff 1f       	adc	r31, r31
    17aa:	bb 1f       	adc	r27, r27
    17ac:	66 1f       	adc	r22, r22
    17ae:	77 1f       	adc	r23, r23
    17b0:	88 1f       	adc	r24, r24
    17b2:	91 50       	subi	r25, 0x01	; 1
    17b4:	50 40       	sbci	r21, 0x00	; 0
    17b6:	a9 f7       	brne	.-22     	; 0x17a2 <__mulsf3_pse+0x64>
    17b8:	9e 3f       	cpi	r25, 0xFE	; 254
    17ba:	51 05       	cpc	r21, r1
    17bc:	80 f0       	brcs	.+32     	; 0x17de <__mulsf3_pse+0xa0>
    17be:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__fp_inf>
    17c2:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__fp_szero>
    17c6:	5f 3f       	cpi	r21, 0xFF	; 255
    17c8:	e4 f3       	brlt	.-8      	; 0x17c2 <__mulsf3_pse+0x84>
    17ca:	98 3e       	cpi	r25, 0xE8	; 232
    17cc:	d4 f3       	brlt	.-12     	; 0x17c2 <__mulsf3_pse+0x84>
    17ce:	86 95       	lsr	r24
    17d0:	77 95       	ror	r23
    17d2:	67 95       	ror	r22
    17d4:	b7 95       	ror	r27
    17d6:	f7 95       	ror	r31
    17d8:	e7 95       	ror	r30
    17da:	9f 5f       	subi	r25, 0xFF	; 255
    17dc:	c1 f7       	brne	.-16     	; 0x17ce <__mulsf3_pse+0x90>
    17de:	fe 2b       	or	r31, r30
    17e0:	88 0f       	add	r24, r24
    17e2:	91 1d       	adc	r25, r1
    17e4:	96 95       	lsr	r25
    17e6:	87 95       	ror	r24
    17e8:	97 f9       	bld	r25, 7
    17ea:	08 95       	ret

000017ec <sin>:
    17ec:	9f 93       	push	r25
    17ee:	0e 94 05 0b 	call	0x160a	; 0x160a <__fp_rempio2>
    17f2:	0f 90       	pop	r0
    17f4:	07 fc       	sbrc	r0, 7
    17f6:	ee 5f       	subi	r30, 0xFE	; 254
    17f8:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__fp_sinus>
    17fc:	19 f4       	brne	.+6      	; 0x1804 <sin+0x18>
    17fe:	16 f4       	brtc	.+4      	; 0x1804 <sin+0x18>
    1800:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_nan>
    1804:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__fp_mpack>

00001808 <sqrt>:
    1808:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__fp_splitA>
    180c:	b8 f3       	brcs	.-18     	; 0x17fc <sin+0x10>
    180e:	99 23       	and	r25, r25
    1810:	c9 f3       	breq	.-14     	; 0x1804 <sin+0x18>
    1812:	b6 f3       	brts	.-20     	; 0x1800 <sin+0x14>
    1814:	9f 57       	subi	r25, 0x7F	; 127
    1816:	55 0b       	sbc	r21, r21
    1818:	87 ff       	sbrs	r24, 7
    181a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__fp_norm2>
    181e:	00 24       	eor	r0, r0
    1820:	a0 e6       	ldi	r26, 0x60	; 96
    1822:	40 ea       	ldi	r20, 0xA0	; 160
    1824:	90 01       	movw	r18, r0
    1826:	80 58       	subi	r24, 0x80	; 128
    1828:	56 95       	lsr	r21
    182a:	97 95       	ror	r25
    182c:	28 f4       	brcc	.+10     	; 0x1838 <sqrt+0x30>
    182e:	80 5c       	subi	r24, 0xC0	; 192
    1830:	66 0f       	add	r22, r22
    1832:	77 1f       	adc	r23, r23
    1834:	88 1f       	adc	r24, r24
    1836:	20 f0       	brcs	.+8      	; 0x1840 <sqrt+0x38>
    1838:	26 17       	cp	r18, r22
    183a:	37 07       	cpc	r19, r23
    183c:	48 07       	cpc	r20, r24
    183e:	30 f4       	brcc	.+12     	; 0x184c <sqrt+0x44>
    1840:	62 1b       	sub	r22, r18
    1842:	73 0b       	sbc	r23, r19
    1844:	84 0b       	sbc	r24, r20
    1846:	20 29       	or	r18, r0
    1848:	31 29       	or	r19, r1
    184a:	4a 2b       	or	r20, r26
    184c:	a6 95       	lsr	r26
    184e:	17 94       	ror	r1
    1850:	07 94       	ror	r0
    1852:	20 25       	eor	r18, r0
    1854:	31 25       	eor	r19, r1
    1856:	4a 27       	eor	r20, r26
    1858:	58 f7       	brcc	.-42     	; 0x1830 <sqrt+0x28>
    185a:	66 0f       	add	r22, r22
    185c:	77 1f       	adc	r23, r23
    185e:	88 1f       	adc	r24, r24
    1860:	20 f0       	brcs	.+8      	; 0x186a <sqrt+0x62>
    1862:	26 17       	cp	r18, r22
    1864:	37 07       	cpc	r19, r23
    1866:	48 07       	cpc	r20, r24
    1868:	30 f4       	brcc	.+12     	; 0x1876 <sqrt+0x6e>
    186a:	62 0b       	sbc	r22, r18
    186c:	73 0b       	sbc	r23, r19
    186e:	84 0b       	sbc	r24, r20
    1870:	20 0d       	add	r18, r0
    1872:	31 1d       	adc	r19, r1
    1874:	41 1d       	adc	r20, r1
    1876:	a0 95       	com	r26
    1878:	81 f7       	brne	.-32     	; 0x185a <sqrt+0x52>
    187a:	b9 01       	movw	r22, r18
    187c:	84 2f       	mov	r24, r20
    187e:	91 58       	subi	r25, 0x81	; 129
    1880:	88 0f       	add	r24, r24
    1882:	96 95       	lsr	r25
    1884:	87 95       	ror	r24
    1886:	08 95       	ret

00001888 <square>:
    1888:	9b 01       	movw	r18, r22
    188a:	ac 01       	movw	r20, r24
    188c:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__mulsf3>

00001890 <__fp_mpack>:
    1890:	9f 3f       	cpi	r25, 0xFF	; 255
    1892:	31 f0       	breq	.+12     	; 0x18a0 <__fp_mpack_finite+0xc>

00001894 <__fp_mpack_finite>:
    1894:	91 50       	subi	r25, 0x01	; 1
    1896:	20 f4       	brcc	.+8      	; 0x18a0 <__fp_mpack_finite+0xc>
    1898:	87 95       	ror	r24
    189a:	77 95       	ror	r23
    189c:	67 95       	ror	r22
    189e:	b7 95       	ror	r27
    18a0:	88 0f       	add	r24, r24
    18a2:	91 1d       	adc	r25, r1
    18a4:	96 95       	lsr	r25
    18a6:	87 95       	ror	r24
    18a8:	97 f9       	bld	r25, 7
    18aa:	08 95       	ret

000018ac <__fp_norm2>:
    18ac:	91 50       	subi	r25, 0x01	; 1
    18ae:	50 40       	sbci	r21, 0x00	; 0
    18b0:	66 0f       	add	r22, r22
    18b2:	77 1f       	adc	r23, r23
    18b4:	88 1f       	adc	r24, r24
    18b6:	d2 f7       	brpl	.-12     	; 0x18ac <__fp_norm2>
    18b8:	08 95       	ret

000018ba <__fp_powsodd>:
    18ba:	9f 93       	push	r25
    18bc:	8f 93       	push	r24
    18be:	7f 93       	push	r23
    18c0:	6f 93       	push	r22
    18c2:	ff 93       	push	r31
    18c4:	ef 93       	push	r30
    18c6:	9b 01       	movw	r18, r22
    18c8:	ac 01       	movw	r20, r24
    18ca:	0e 94 89 0b 	call	0x1712	; 0x1712 <__mulsf3>
    18ce:	ef 91       	pop	r30
    18d0:	ff 91       	pop	r31
    18d2:	0e 94 ce 0a 	call	0x159c	; 0x159c <__fp_powser>
    18d6:	2f 91       	pop	r18
    18d8:	3f 91       	pop	r19
    18da:	4f 91       	pop	r20
    18dc:	5f 91       	pop	r21
    18de:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__mulsf3>

000018e2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    18e2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    18e4:	91 8d       	ldd	r25, Z+25	; 0x19
    18e6:	22 8d       	ldd	r18, Z+26	; 0x1a
    18e8:	89 2f       	mov	r24, r25
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	80 5c       	subi	r24, 0xC0	; 192
    18ee:	9f 4f       	sbci	r25, 0xFF	; 255
    18f0:	82 1b       	sub	r24, r18
    18f2:	91 09       	sbc	r25, r1
}
    18f4:	8f 73       	andi	r24, 0x3F	; 63
    18f6:	99 27       	eor	r25, r25
    18f8:	08 95       	ret

000018fa <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    18fa:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    18fc:	91 8d       	ldd	r25, Z+25	; 0x19
    18fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1900:	98 17       	cp	r25, r24
    1902:	31 f0       	breq	.+12     	; 0x1910 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1904:	82 8d       	ldd	r24, Z+26	; 0x1a
    1906:	e8 0f       	add	r30, r24
    1908:	f1 1d       	adc	r31, r1
    190a:	85 8d       	ldd	r24, Z+29	; 0x1d
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1910:	8f ef       	ldi	r24, 0xFF	; 255
    1912:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1914:	08 95       	ret

00001916 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1916:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1918:	91 8d       	ldd	r25, Z+25	; 0x19
    191a:	82 8d       	ldd	r24, Z+26	; 0x1a
    191c:	98 17       	cp	r25, r24
    191e:	61 f0       	breq	.+24     	; 0x1938 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1920:	82 8d       	ldd	r24, Z+26	; 0x1a
    1922:	df 01       	movw	r26, r30
    1924:	a8 0f       	add	r26, r24
    1926:	b1 1d       	adc	r27, r1
    1928:	5d 96       	adiw	r26, 0x1d	; 29
    192a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    192c:	92 8d       	ldd	r25, Z+26	; 0x1a
    192e:	9f 5f       	subi	r25, 0xFF	; 255
    1930:	9f 73       	andi	r25, 0x3F	; 63
    1932:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1938:	8f ef       	ldi	r24, 0xFF	; 255
    193a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    193c:	08 95       	ret

0000193e <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    193e:	fc 01       	movw	r30, r24
    1940:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    1942:	44 8d       	ldd	r20, Z+28	; 0x1c
    1944:	25 2f       	mov	r18, r21
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	84 2f       	mov	r24, r20
    194a:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    194c:	82 1b       	sub	r24, r18
    194e:	93 0b       	sbc	r25, r19
    1950:	54 17       	cp	r21, r20
    1952:	10 f0       	brcs	.+4      	; 0x1958 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1954:	cf 96       	adiw	r24, 0x3f	; 63
    1956:	08 95       	ret
  return tail - head - 1;
    1958:	01 97       	sbiw	r24, 0x01	; 1
}
    195a:	08 95       	ret

0000195c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    195c:	87 e0       	ldi	r24, 0x07	; 7
    195e:	9e e0       	ldi	r25, 0x0E	; 14
    1960:	89 2b       	or	r24, r25
    1962:	49 f0       	breq	.+18     	; 0x1976 <_Z14serialEventRunv+0x1a>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	89 2b       	or	r24, r25
    196a:	29 f0       	breq	.+10     	; 0x1976 <_Z14serialEventRunv+0x1a>
    196c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <_Z17Serial0_availablev>
    1970:	81 11       	cpse	r24, r1
    1972:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1976:	08 95       	ret

00001978 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1978:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    197a:	84 8d       	ldd	r24, Z+28	; 0x1c
    197c:	df 01       	movw	r26, r30
    197e:	a8 0f       	add	r26, r24
    1980:	b1 1d       	adc	r27, r1
    1982:	a3 5a       	subi	r26, 0xA3	; 163
    1984:	bf 4f       	sbci	r27, 0xFF	; 255
    1986:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1988:	84 8d       	ldd	r24, Z+28	; 0x1c
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	8f 73       	andi	r24, 0x3F	; 63
    1990:	99 27       	eor	r25, r25
    1992:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1994:	a6 89       	ldd	r26, Z+22	; 0x16
    1996:	b7 89       	ldd	r27, Z+23	; 0x17
    1998:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    199a:	a0 89       	ldd	r26, Z+16	; 0x10
    199c:	b1 89       	ldd	r27, Z+17	; 0x11
    199e:	8c 91       	ld	r24, X
    19a0:	80 64       	ori	r24, 0x40	; 64
    19a2:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    19a4:	93 8d       	ldd	r25, Z+27	; 0x1b
    19a6:	84 8d       	ldd	r24, Z+28	; 0x1c
    19a8:	98 13       	cpse	r25, r24
    19aa:	06 c0       	rjmp	.+12     	; 0x19b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    19ac:	02 88       	ldd	r0, Z+18	; 0x12
    19ae:	f3 89       	ldd	r31, Z+19	; 0x13
    19b0:	e0 2d       	mov	r30, r0
    19b2:	80 81       	ld	r24, Z
    19b4:	8f 7d       	andi	r24, 0xDF	; 223
    19b6:	80 83       	st	Z, r24
    19b8:	08 95       	ret

000019ba <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    19ba:	ef 92       	push	r14
    19bc:	ff 92       	push	r15
    19be:	0f 93       	push	r16
    19c0:	1f 93       	push	r17
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	ec 01       	movw	r28, r24
  _written = true;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    19cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19d0:	98 13       	cpse	r25, r24
    19d2:	05 c0       	rjmp	.+10     	; 0x19de <_ZN14HardwareSerial5writeEh+0x24>
    19d4:	e8 89       	ldd	r30, Y+16	; 0x10
    19d6:	f9 89       	ldd	r31, Y+17	; 0x11
    19d8:	80 81       	ld	r24, Z
    19da:	85 fd       	sbrc	r24, 5
    19dc:	24 c0       	rjmp	.+72     	; 0x1a26 <_ZN14HardwareSerial5writeEh+0x6c>
    19de:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    19e0:	0b 8d       	ldd	r16, Y+27	; 0x1b
    19e2:	10 e0       	ldi	r17, 0x00	; 0
    19e4:	0f 5f       	subi	r16, 0xFF	; 255
    19e6:	1f 4f       	sbci	r17, 0xFF	; 255
    19e8:	0f 73       	andi	r16, 0x3F	; 63
    19ea:	11 27       	eor	r17, r17
    19ec:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    19ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19f0:	e8 12       	cpse	r14, r24
    19f2:	0c c0       	rjmp	.+24     	; 0x1a0c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	07 fc       	sbrc	r0, 7
    19f8:	fa cf       	rjmp	.-12     	; 0x19ee <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    19fa:	e8 89       	ldd	r30, Y+16	; 0x10
    19fc:	f9 89       	ldd	r31, Y+17	; 0x11
    19fe:	80 81       	ld	r24, Z
    1a00:	85 ff       	sbrs	r24, 5
    1a02:	f5 cf       	rjmp	.-22     	; 0x19ee <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1a04:	ce 01       	movw	r24, r28
    1a06:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a0a:	f1 cf       	rjmp	.-30     	; 0x19ee <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1a0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a0e:	fe 01       	movw	r30, r28
    1a10:	e8 0f       	add	r30, r24
    1a12:	f1 1d       	adc	r31, r1
    1a14:	e3 5a       	subi	r30, 0xA3	; 163
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1a1a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1a1c:	ea 89       	ldd	r30, Y+18	; 0x12
    1a1e:	fb 89       	ldd	r31, Y+19	; 0x13
    1a20:	80 81       	ld	r24, Z
    1a22:	80 62       	ori	r24, 0x20	; 32
    1a24:	07 c0       	rjmp	.+14     	; 0x1a34 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1a26:	ee 89       	ldd	r30, Y+22	; 0x16
    1a28:	ff 89       	ldd	r31, Y+23	; 0x17
    1a2a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1a2c:	e8 89       	ldd	r30, Y+16	; 0x10
    1a2e:	f9 89       	ldd	r31, Y+17	; 0x11
    1a30:	80 81       	ld	r24, Z
    1a32:	80 64       	ori	r24, 0x40	; 64
    1a34:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	ff 90       	pop	r15
    1a44:	ef 90       	pop	r14
    1a46:	08 95       	ret

00001a48 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1a4e:	88 8d       	ldd	r24, Y+24	; 0x18
    1a50:	88 23       	and	r24, r24
    1a52:	c9 f0       	breq	.+50     	; 0x1a86 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1a54:	ea 89       	ldd	r30, Y+18	; 0x12
    1a56:	fb 89       	ldd	r31, Y+19	; 0x13
    1a58:	80 81       	ld	r24, Z
    1a5a:	85 fd       	sbrc	r24, 5
    1a5c:	05 c0       	rjmp	.+10     	; 0x1a68 <_ZN14HardwareSerial5flushEv+0x20>
    1a5e:	a8 89       	ldd	r26, Y+16	; 0x10
    1a60:	b9 89       	ldd	r27, Y+17	; 0x11
    1a62:	8c 91       	ld	r24, X
    1a64:	86 fd       	sbrc	r24, 6
    1a66:	0f c0       	rjmp	.+30     	; 0x1a86 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	07 fc       	sbrc	r0, 7
    1a6c:	f5 cf       	rjmp	.-22     	; 0x1a58 <_ZN14HardwareSerial5flushEv+0x10>
    1a6e:	80 81       	ld	r24, Z
    1a70:	85 ff       	sbrs	r24, 5
    1a72:	f2 cf       	rjmp	.-28     	; 0x1a58 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1a74:	a8 89       	ldd	r26, Y+16	; 0x10
    1a76:	b9 89       	ldd	r27, Y+17	; 0x11
    1a78:	8c 91       	ld	r24, X
    1a7a:	85 ff       	sbrs	r24, 5
    1a7c:	ed cf       	rjmp	.-38     	; 0x1a58 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1a7e:	ce 01       	movw	r24, r28
    1a80:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a84:	e7 cf       	rjmp	.-50     	; 0x1a54 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	08 95       	ret

00001a8c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1a8c:	cf 92       	push	r12
    1a8e:	df 92       	push	r13
    1a90:	ef 92       	push	r14
    1a92:	ff 92       	push	r15
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	ec 01       	movw	r28, r24
    1a9c:	6a 01       	movw	r12, r20
    1a9e:	7b 01       	movw	r14, r22
    1aa0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1aa2:	e8 89       	ldd	r30, Y+16	; 0x10
    1aa4:	f9 89       	ldd	r31, Y+17	; 0x11
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1aaa:	41 15       	cp	r20, r1
    1aac:	51 4e       	sbci	r21, 0xE1	; 225
    1aae:	61 05       	cpc	r22, r1
    1ab0:	71 05       	cpc	r23, r1
    1ab2:	b1 f0       	breq	.+44     	; 0x1ae0 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	79 e0       	ldi	r23, 0x09	; 9
    1ab8:	8d e3       	ldi	r24, 0x3D	; 61
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a7 01       	movw	r20, r14
    1abe:	96 01       	movw	r18, r12
    1ac0:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__udivmodsi4>
    1ac4:	da 01       	movw	r26, r20
    1ac6:	c9 01       	movw	r24, r18
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	a1 09       	sbc	r26, r1
    1acc:	b1 09       	sbc	r27, r1
    1ace:	b6 95       	lsr	r27
    1ad0:	a7 95       	ror	r26
    1ad2:	97 95       	ror	r25
    1ad4:	87 95       	ror	r24
    1ad6:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1ad8:	21 15       	cp	r18, r1
    1ada:	80 e1       	ldi	r24, 0x10	; 16
    1adc:	38 07       	cpc	r19, r24
    1ade:	a8 f0       	brcs	.+42     	; 0x1b0a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1ae0:	e8 89       	ldd	r30, Y+16	; 0x10
    1ae2:	f9 89       	ldd	r31, Y+17	; 0x11
    1ae4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1ae6:	60 e8       	ldi	r22, 0x80	; 128
    1ae8:	74 e8       	ldi	r23, 0x84	; 132
    1aea:	8e e1       	ldi	r24, 0x1E	; 30
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	a7 01       	movw	r20, r14
    1af0:	96 01       	movw	r18, r12
    1af2:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__udivmodsi4>
    1af6:	da 01       	movw	r26, r20
    1af8:	c9 01       	movw	r24, r18
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	a1 09       	sbc	r26, r1
    1afe:	b1 09       	sbc	r27, r1
    1b00:	b6 95       	lsr	r27
    1b02:	a7 95       	ror	r26
    1b04:	97 95       	ror	r25
    1b06:	87 95       	ror	r24
    1b08:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1b0a:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b0c:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b0e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1b10:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b12:	ff 85       	ldd	r31, Y+15	; 0x0f
    1b14:	20 83       	st	Z, r18

  _written = false;
    1b16:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1b18:	ec 89       	ldd	r30, Y+20	; 0x14
    1b1a:	fd 89       	ldd	r31, Y+21	; 0x15
    1b1c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1b1e:	ea 89       	ldd	r30, Y+18	; 0x12
    1b20:	fb 89       	ldd	r31, Y+19	; 0x13
    1b22:	80 81       	ld	r24, Z
    1b24:	80 61       	ori	r24, 0x10	; 16
    1b26:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1b28:	ea 89       	ldd	r30, Y+18	; 0x12
    1b2a:	fb 89       	ldd	r31, Y+19	; 0x13
    1b2c:	80 81       	ld	r24, Z
    1b2e:	88 60       	ori	r24, 0x08	; 8
    1b30:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1b32:	ea 89       	ldd	r30, Y+18	; 0x12
    1b34:	fb 89       	ldd	r31, Y+19	; 0x13
    1b36:	80 81       	ld	r24, Z
    1b38:	80 68       	ori	r24, 0x80	; 128
    1b3a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1b3c:	ea 89       	ldd	r30, Y+18	; 0x12
    1b3e:	fb 89       	ldd	r31, Y+19	; 0x13
    1b40:	80 81       	ld	r24, Z
    1b42:	8f 7d       	andi	r24, 0xDF	; 223
    1b44:	80 83       	st	Z, r24
}
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	ff 90       	pop	r15
    1b4e:	ef 90       	pop	r14
    1b50:	df 90       	pop	r13
    1b52:	cf 90       	pop	r12
    1b54:	08 95       	ret

00001b56 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	08 95       	ret

00001b5c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1b5c:	08 95       	ret

00001b5e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1b5e:	1f 92       	push	r1
    1b60:	0f 92       	push	r0
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	0f 92       	push	r0
    1b66:	11 24       	eor	r1, r1
    1b68:	2f 93       	push	r18
    1b6a:	8f 93       	push	r24
    1b6c:	9f 93       	push	r25
    1b6e:	ef 93       	push	r30
    1b70:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1b72:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <Serial+0x10>
    1b76:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <Serial+0x11>
    1b7a:	80 81       	ld	r24, Z
    1b7c:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <Serial+0x16>
    1b80:	f0 91 f6 02 	lds	r31, 0x02F6	; 0x8002f6 <Serial+0x17>
    1b84:	82 fd       	sbrc	r24, 2
    1b86:	12 c0       	rjmp	.+36     	; 0x1bac <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1b88:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1b8a:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <Serial+0x19>
    1b8e:	8f 5f       	subi	r24, 0xFF	; 255
    1b90:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1b92:	20 91 f9 02 	lds	r18, 0x02F9	; 0x8002f9 <Serial+0x1a>
    1b96:	82 17       	cp	r24, r18
    1b98:	51 f0       	breq	.+20     	; 0x1bae <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1b9a:	e0 91 f8 02 	lds	r30, 0x02F8	; 0x8002f8 <Serial+0x19>
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	e1 52       	subi	r30, 0x21	; 33
    1ba2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ba4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1ba6:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <Serial+0x19>
    1baa:	01 c0       	rjmp	.+2      	; 0x1bae <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1bac:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1bae:	ff 91       	pop	r31
    1bb0:	ef 91       	pop	r30
    1bb2:	9f 91       	pop	r25
    1bb4:	8f 91       	pop	r24
    1bb6:	2f 91       	pop	r18
    1bb8:	0f 90       	pop	r0
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	0f 90       	pop	r0
    1bbe:	1f 90       	pop	r1
    1bc0:	18 95       	reti

00001bc2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1bc2:	1f 92       	push	r1
    1bc4:	0f 92       	push	r0
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	0f 92       	push	r0
    1bca:	11 24       	eor	r1, r1
    1bcc:	2f 93       	push	r18
    1bce:	3f 93       	push	r19
    1bd0:	4f 93       	push	r20
    1bd2:	5f 93       	push	r21
    1bd4:	6f 93       	push	r22
    1bd6:	7f 93       	push	r23
    1bd8:	8f 93       	push	r24
    1bda:	9f 93       	push	r25
    1bdc:	af 93       	push	r26
    1bde:	bf 93       	push	r27
    1be0:	ef 93       	push	r30
    1be2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1be4:	8f ed       	ldi	r24, 0xDF	; 223
    1be6:	92 e0       	ldi	r25, 0x02	; 2
    1be8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1bec:	ff 91       	pop	r31
    1bee:	ef 91       	pop	r30
    1bf0:	bf 91       	pop	r27
    1bf2:	af 91       	pop	r26
    1bf4:	9f 91       	pop	r25
    1bf6:	8f 91       	pop	r24
    1bf8:	7f 91       	pop	r23
    1bfa:	6f 91       	pop	r22
    1bfc:	5f 91       	pop	r21
    1bfe:	4f 91       	pop	r20
    1c00:	3f 91       	pop	r19
    1c02:	2f 91       	pop	r18
    1c04:	0f 90       	pop	r0
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	0f 90       	pop	r0
    1c0a:	1f 90       	pop	r1
    1c0c:	18 95       	reti

00001c0e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1c0e:	8f ed       	ldi	r24, 0xDF	; 223
    1c10:	92 e0       	ldi	r25, 0x02	; 2
    1c12:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN14HardwareSerial9availableEv>
    1c16:	21 e0       	ldi	r18, 0x01	; 1
    1c18:	89 2b       	or	r24, r25
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <_Z17Serial0_availablev+0x10>
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
}
    1c1e:	82 2f       	mov	r24, r18
    1c20:	08 95       	ret

00001c22 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1c22:	ef ed       	ldi	r30, 0xDF	; 223
    1c24:	f2 e0       	ldi	r31, 0x02	; 2
    1c26:	13 82       	std	Z+3, r1	; 0x03
    1c28:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1c2a:	88 ee       	ldi	r24, 0xE8	; 232
    1c2c:	93 e0       	ldi	r25, 0x03	; 3
    1c2e:	a0 e0       	ldi	r26, 0x00	; 0
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	84 83       	std	Z+4, r24	; 0x04
    1c34:	95 83       	std	Z+5, r25	; 0x05
    1c36:	a6 83       	std	Z+6, r26	; 0x06
    1c38:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1c3a:	84 e2       	ldi	r24, 0x24	; 36
    1c3c:	91 e0       	ldi	r25, 0x01	; 1
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24
    1c42:	85 ec       	ldi	r24, 0xC5	; 197
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	95 87       	std	Z+13, r25	; 0x0d
    1c48:	84 87       	std	Z+12, r24	; 0x0c
    1c4a:	84 ec       	ldi	r24, 0xC4	; 196
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	97 87       	std	Z+15, r25	; 0x0f
    1c50:	86 87       	std	Z+14, r24	; 0x0e
    1c52:	80 ec       	ldi	r24, 0xC0	; 192
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	91 8b       	std	Z+17, r25	; 0x11
    1c58:	80 8b       	std	Z+16, r24	; 0x10
    1c5a:	81 ec       	ldi	r24, 0xC1	; 193
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	93 8b       	std	Z+19, r25	; 0x13
    1c60:	82 8b       	std	Z+18, r24	; 0x12
    1c62:	82 ec       	ldi	r24, 0xC2	; 194
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	95 8b       	std	Z+21, r25	; 0x15
    1c68:	84 8b       	std	Z+20, r24	; 0x14
    1c6a:	86 ec       	ldi	r24, 0xC6	; 198
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	97 8b       	std	Z+23, r25	; 0x17
    1c70:	86 8b       	std	Z+22, r24	; 0x16
    1c72:	11 8e       	std	Z+25, r1	; 0x19
    1c74:	12 8e       	std	Z+26, r1	; 0x1a
    1c76:	13 8e       	std	Z+27, r1	; 0x1b
    1c78:	14 8e       	std	Z+28, r1	; 0x1c
    1c7a:	08 95       	ret

00001c7c <initVariant>:
    1c7c:	08 95       	ret

00001c7e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1c7e:	0e 94 ae 10 	call	0x215c	; 0x215c <init>

	initVariant();
    1c82:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1c86:	0e 94 51 07 	call	0xea2	; 0xea2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1c8a:	ce ea       	ldi	r28, 0xAE	; 174
    1c8c:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1c8e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <loop>
		if (serialEventRun) serialEventRun();
    1c92:	20 97       	sbiw	r28, 0x00	; 0
    1c94:	e1 f3       	breq	.-8      	; 0x1c8e <main+0x10>
    1c96:	0e 94 ae 0c 	call	0x195c	; 0x195c <_Z14serialEventRunv>
    1c9a:	f9 cf       	rjmp	.-14     	; 0x1c8e <main+0x10>

00001c9c <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1c9c:	cf 92       	push	r12
    1c9e:	df 92       	push	r13
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	6c 01       	movw	r12, r24
    1cae:	7a 01       	movw	r14, r20
    1cb0:	8b 01       	movw	r16, r22
    1cb2:	c0 e0       	ldi	r28, 0x00	; 0
    1cb4:	d0 e0       	ldi	r29, 0x00	; 0
    1cb6:	ce 15       	cp	r28, r14
    1cb8:	df 05       	cpc	r29, r15
    1cba:	81 f0       	breq	.+32     	; 0x1cdc <_ZN5Print5writeEPKhj+0x40>
    1cbc:	d8 01       	movw	r26, r16
    1cbe:	6d 91       	ld	r22, X+
    1cc0:	8d 01       	movw	r16, r26
    1cc2:	d6 01       	movw	r26, r12
    1cc4:	ed 91       	ld	r30, X+
    1cc6:	fc 91       	ld	r31, X
    1cc8:	01 90       	ld	r0, Z+
    1cca:	f0 81       	ld	r31, Z
    1ccc:	e0 2d       	mov	r30, r0
    1cce:	c6 01       	movw	r24, r12
    1cd0:	09 95       	icall
    1cd2:	89 2b       	or	r24, r25
    1cd4:	11 f0       	breq	.+4      	; 0x1cda <_ZN5Print5writeEPKhj+0x3e>
    1cd6:	21 96       	adiw	r28, 0x01	; 1
    1cd8:	ee cf       	rjmp	.-36     	; 0x1cb6 <_ZN5Print5writeEPKhj+0x1a>
    1cda:	7e 01       	movw	r14, r28
    1cdc:	c7 01       	movw	r24, r14
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	1f 91       	pop	r17
    1ce4:	0f 91       	pop	r16
    1ce6:	ff 90       	pop	r15
    1ce8:	ef 90       	pop	r14
    1cea:	df 90       	pop	r13
    1cec:	cf 90       	pop	r12
    1cee:	08 95       	ret

00001cf0 <_ZN5Print5writeEPKc>:
    1cf0:	61 15       	cp	r22, r1
    1cf2:	71 05       	cpc	r23, r1
    1cf4:	79 f0       	breq	.+30     	; 0x1d14 <_ZN5Print5writeEPKc+0x24>
    1cf6:	fb 01       	movw	r30, r22
    1cf8:	01 90       	ld	r0, Z+
    1cfa:	00 20       	and	r0, r0
    1cfc:	e9 f7       	brne	.-6      	; 0x1cf8 <_ZN5Print5writeEPKc+0x8>
    1cfe:	31 97       	sbiw	r30, 0x01	; 1
    1d00:	af 01       	movw	r20, r30
    1d02:	46 1b       	sub	r20, r22
    1d04:	57 0b       	sbc	r21, r23
    1d06:	dc 01       	movw	r26, r24
    1d08:	ed 91       	ld	r30, X+
    1d0a:	fc 91       	ld	r31, X
    1d0c:	02 80       	ldd	r0, Z+2	; 0x02
    1d0e:	f3 81       	ldd	r31, Z+3	; 0x03
    1d10:	e0 2d       	mov	r30, r0
    1d12:	09 94       	ijmp
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	08 95       	ret

00001d1a <_ZN5Print5printERK6String>:
    1d1a:	db 01       	movw	r26, r22
    1d1c:	14 96       	adiw	r26, 0x04	; 4
    1d1e:	4d 91       	ld	r20, X+
    1d20:	5c 91       	ld	r21, X
    1d22:	15 97       	sbiw	r26, 0x05	; 5
    1d24:	6d 91       	ld	r22, X+
    1d26:	7c 91       	ld	r23, X
    1d28:	dc 01       	movw	r26, r24
    1d2a:	ed 91       	ld	r30, X+
    1d2c:	fc 91       	ld	r31, X
    1d2e:	02 80       	ldd	r0, Z+2	; 0x02
    1d30:	f3 81       	ldd	r31, Z+3	; 0x03
    1d32:	e0 2d       	mov	r30, r0
    1d34:	09 94       	ijmp

00001d36 <_ZN5Print5printEc>:
    1d36:	dc 01       	movw	r26, r24
    1d38:	ed 91       	ld	r30, X+
    1d3a:	fc 91       	ld	r31, X
    1d3c:	01 90       	ld	r0, Z+
    1d3e:	f0 81       	ld	r31, Z
    1d40:	e0 2d       	mov	r30, r0
    1d42:	09 94       	ijmp

00001d44 <_ZN5Print7printlnEv>:
    1d44:	62 e3       	ldi	r22, 0x32	; 50
    1d46:	71 e0       	ldi	r23, 0x01	; 1
    1d48:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <_ZN5Print5writeEPKc>

00001d4c <_ZN5Print7printlnEPKc>:
    1d4c:	0f 93       	push	r16
    1d4e:	1f 93       	push	r17
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	ec 01       	movw	r28, r24
    1d56:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <_ZN5Print5writeEPKc>
    1d5a:	8c 01       	movw	r16, r24
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <_ZN5Print7printlnEv>
    1d62:	80 0f       	add	r24, r16
    1d64:	91 1f       	adc	r25, r17
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	08 95       	ret

00001d70 <_ZN5Print11printNumberEmh>:
    1d70:	8f 92       	push	r8
    1d72:	9f 92       	push	r9
    1d74:	af 92       	push	r10
    1d76:	bf 92       	push	r11
    1d78:	ef 92       	push	r14
    1d7a:	ff 92       	push	r15
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	a1 97       	sbiw	r28, 0x21	; 33
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	cd bf       	out	0x3d, r28	; 61
    1d94:	7c 01       	movw	r14, r24
    1d96:	fa 01       	movw	r30, r20
    1d98:	cb 01       	movw	r24, r22
    1d9a:	19 a2       	std	Y+33, r1	; 0x21
    1d9c:	22 30       	cpi	r18, 0x02	; 2
    1d9e:	08 f4       	brcc	.+2      	; 0x1da2 <_ZN5Print11printNumberEmh+0x32>
    1da0:	2a e0       	ldi	r18, 0x0A	; 10
    1da2:	8e 01       	movw	r16, r28
    1da4:	0f 5d       	subi	r16, 0xDF	; 223
    1da6:	1f 4f       	sbci	r17, 0xFF	; 255
    1da8:	82 2e       	mov	r8, r18
    1daa:	91 2c       	mov	r9, r1
    1dac:	a1 2c       	mov	r10, r1
    1dae:	b1 2c       	mov	r11, r1
    1db0:	bf 01       	movw	r22, r30
    1db2:	a5 01       	movw	r20, r10
    1db4:	94 01       	movw	r18, r8
    1db6:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__udivmodsi4>
    1dba:	f9 01       	movw	r30, r18
    1dbc:	ca 01       	movw	r24, r20
    1dbe:	01 50       	subi	r16, 0x01	; 1
    1dc0:	11 09       	sbc	r17, r1
    1dc2:	6a 30       	cpi	r22, 0x0A	; 10
    1dc4:	10 f4       	brcc	.+4      	; 0x1dca <_ZN5Print11printNumberEmh+0x5a>
    1dc6:	60 5d       	subi	r22, 0xD0	; 208
    1dc8:	01 c0       	rjmp	.+2      	; 0x1dcc <_ZN5Print11printNumberEmh+0x5c>
    1dca:	69 5c       	subi	r22, 0xC9	; 201
    1dcc:	d8 01       	movw	r26, r16
    1dce:	6c 93       	st	X, r22
    1dd0:	23 2b       	or	r18, r19
    1dd2:	24 2b       	or	r18, r20
    1dd4:	25 2b       	or	r18, r21
    1dd6:	61 f7       	brne	.-40     	; 0x1db0 <_ZN5Print11printNumberEmh+0x40>
    1dd8:	b8 01       	movw	r22, r16
    1dda:	c7 01       	movw	r24, r14
    1ddc:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <_ZN5Print5writeEPKc>
    1de0:	a1 96       	adiw	r28, 0x21	; 33
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	ff 90       	pop	r15
    1df6:	ef 90       	pop	r14
    1df8:	bf 90       	pop	r11
    1dfa:	af 90       	pop	r10
    1dfc:	9f 90       	pop	r9
    1dfe:	8f 90       	pop	r8
    1e00:	08 95       	ret

00001e02 <_ZN5Print5printEmi>:
    1e02:	21 15       	cp	r18, r1
    1e04:	31 05       	cpc	r19, r1
    1e06:	41 f4       	brne	.+16     	; 0x1e18 <_ZN5Print5printEmi+0x16>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	ed 91       	ld	r30, X+
    1e0c:	fc 91       	ld	r31, X
    1e0e:	01 90       	ld	r0, Z+
    1e10:	f0 81       	ld	r31, Z
    1e12:	e0 2d       	mov	r30, r0
    1e14:	64 2f       	mov	r22, r20
    1e16:	09 94       	ijmp
    1e18:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <_ZN5Print11printNumberEmh>

00001e1c <_ZN5Print5printEji>:
    1e1c:	9a 01       	movw	r18, r20
    1e1e:	ab 01       	movw	r20, r22
    1e20:	60 e0       	ldi	r22, 0x00	; 0
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <_ZN5Print5printEmi>

00001e28 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1e28:	7f 92       	push	r7
    1e2a:	8f 92       	push	r8
    1e2c:	9f 92       	push	r9
    1e2e:	af 92       	push	r10
    1e30:	bf 92       	push	r11
    1e32:	cf 92       	push	r12
    1e34:	df 92       	push	r13
    1e36:	ef 92       	push	r14
    1e38:	ff 92       	push	r15
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	8c 01       	movw	r16, r24
    1e44:	6a 01       	movw	r12, r20
    1e46:	7b 01       	movw	r14, r22
    1e48:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1e4a:	9a 01       	movw	r18, r20
    1e4c:	ab 01       	movw	r20, r22
    1e4e:	c7 01       	movw	r24, r14
    1e50:	b6 01       	movw	r22, r12
    1e52:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__unordsf2>
    1e56:	88 23       	and	r24, r24
    1e58:	19 f0       	breq	.+6      	; 0x1e60 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1e5a:	65 e3       	ldi	r22, 0x35	; 53
    1e5c:	71 e0       	ldi	r23, 0x01	; 1
    1e5e:	27 c0       	rjmp	.+78     	; 0x1eae <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1e60:	46 01       	movw	r8, r12
    1e62:	57 01       	movw	r10, r14
    1e64:	e8 94       	clt
    1e66:	b7 f8       	bld	r11, 7
    1e68:	2f ef       	ldi	r18, 0xFF	; 255
    1e6a:	3f ef       	ldi	r19, 0xFF	; 255
    1e6c:	4f e7       	ldi	r20, 0x7F	; 127
    1e6e:	5f e7       	ldi	r21, 0x7F	; 127
    1e70:	c5 01       	movw	r24, r10
    1e72:	b4 01       	movw	r22, r8
    1e74:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__unordsf2>
    1e78:	81 11       	cpse	r24, r1
    1e7a:	0d c0       	rjmp	.+26     	; 0x1e96 <_ZN5Print10printFloatEdh+0x6e>
    1e7c:	2f ef       	ldi	r18, 0xFF	; 255
    1e7e:	3f ef       	ldi	r19, 0xFF	; 255
    1e80:	4f e7       	ldi	r20, 0x7F	; 127
    1e82:	5f e7       	ldi	r21, 0x7F	; 127
    1e84:	c5 01       	movw	r24, r10
    1e86:	b4 01       	movw	r22, r8
    1e88:	0e 94 b2 09 	call	0x1364	; 0x1364 <__cmpsf2>
    1e8c:	18 16       	cp	r1, r24
    1e8e:	1c f4       	brge	.+6      	; 0x1e96 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1e90:	69 e3       	ldi	r22, 0x39	; 57
    1e92:	71 e0       	ldi	r23, 0x01	; 1
    1e94:	0c c0       	rjmp	.+24     	; 0x1eae <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1e96:	2f ef       	ldi	r18, 0xFF	; 255
    1e98:	3f ef       	ldi	r19, 0xFF	; 255
    1e9a:	4f e7       	ldi	r20, 0x7F	; 127
    1e9c:	5f e4       	ldi	r21, 0x4F	; 79
    1e9e:	c7 01       	movw	r24, r14
    1ea0:	b6 01       	movw	r22, r12
    1ea2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__gesf2>
    1ea6:	18 16       	cp	r1, r24
    1ea8:	94 f4       	brge	.+36     	; 0x1ece <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1eaa:	6d e3       	ldi	r22, 0x3D	; 61
    1eac:	71 e0       	ldi	r23, 0x01	; 1
    1eae:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	ff 90       	pop	r15
    1eba:	ef 90       	pop	r14
    1ebc:	df 90       	pop	r13
    1ebe:	cf 90       	pop	r12
    1ec0:	bf 90       	pop	r11
    1ec2:	af 90       	pop	r10
    1ec4:	9f 90       	pop	r9
    1ec6:	8f 90       	pop	r8
    1ec8:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1eca:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1ece:	2f ef       	ldi	r18, 0xFF	; 255
    1ed0:	3f ef       	ldi	r19, 0xFF	; 255
    1ed2:	4f e7       	ldi	r20, 0x7F	; 127
    1ed4:	5f ec       	ldi	r21, 0xCF	; 207
    1ed6:	c7 01       	movw	r24, r14
    1ed8:	b6 01       	movw	r22, r12
    1eda:	0e 94 b2 09 	call	0x1364	; 0x1364 <__cmpsf2>
    1ede:	87 fd       	sbrc	r24, 7
    1ee0:	e4 cf       	rjmp	.-56     	; 0x1eaa <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	a9 01       	movw	r20, r18
    1ee8:	c7 01       	movw	r24, r14
    1eea:	b6 01       	movw	r22, r12
    1eec:	0e 94 b2 09 	call	0x1364	; 0x1364 <__cmpsf2>
    1ef0:	87 ff       	sbrs	r24, 7
    1ef2:	0a c0       	rjmp	.+20     	; 0x1f08 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    1ef4:	6d e2       	ldi	r22, 0x2D	; 45
    1ef6:	c8 01       	movw	r24, r16
    1ef8:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN5Print5printEc>
    1efc:	ec 01       	movw	r28, r24
     number = -number;
    1efe:	f7 fa       	bst	r15, 7
    1f00:	f0 94       	com	r15
    1f02:	f7 f8       	bld	r15, 7
    1f04:	f0 94       	com	r15
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1f08:	c0 e0       	ldi	r28, 0x00	; 0
    1f0a:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1f0c:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1f0e:	60 e0       	ldi	r22, 0x00	; 0
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1f16:	7b 14       	cp	r7, r11
    1f18:	41 f0       	breq	.+16     	; 0x1f2a <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e2       	ldi	r20, 0x20	; 32
    1f20:	51 e4       	ldi	r21, 0x41	; 65
    1f22:	0e 94 bc 09 	call	0x1378	; 0x1378 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1f26:	b3 94       	inc	r11
    1f28:	f6 cf       	rjmp	.-20     	; 0x1f16 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    1f2a:	a7 01       	movw	r20, r14
    1f2c:	96 01       	movw	r18, r12
    1f2e:	0e 94 17 09 	call	0x122e	; 0x122e <__addsf3>
    1f32:	6b 01       	movw	r12, r22
    1f34:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1f36:	0e 94 35 0a 	call	0x146a	; 0x146a <__fixunssfsi>
    1f3a:	4b 01       	movw	r8, r22
    1f3c:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1f3e:	2a e0       	ldi	r18, 0x0A	; 10
    1f40:	ab 01       	movw	r20, r22
    1f42:	bc 01       	movw	r22, r24
    1f44:	c8 01       	movw	r24, r16
    1f46:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1f4a:	c8 0f       	add	r28, r24
    1f4c:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1f4e:	77 20       	and	r7, r7
    1f50:	b9 f1       	breq	.+110    	; 0x1fc0 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1f52:	c5 01       	movw	r24, r10
    1f54:	b4 01       	movw	r22, r8
    1f56:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__floatunsisf>
    1f5a:	9b 01       	movw	r18, r22
    1f5c:	ac 01       	movw	r20, r24
    1f5e:	c7 01       	movw	r24, r14
    1f60:	b6 01       	movw	r22, r12
    1f62:	0e 94 16 09 	call	0x122c	; 0x122c <__subsf3>
    1f66:	6b 01       	movw	r12, r22
    1f68:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1f6a:	6e e2       	ldi	r22, 0x2E	; 46
    1f6c:	c8 01       	movw	r24, r16
    1f6e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <_ZN5Print5printEc>
    1f72:	c8 0f       	add	r28, r24
    1f74:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e2       	ldi	r20, 0x20	; 32
    1f7c:	51 e4       	ldi	r21, 0x41	; 65
    1f7e:	c7 01       	movw	r24, r14
    1f80:	b6 01       	movw	r22, r12
    1f82:	0e 94 89 0b 	call	0x1712	; 0x1712 <__mulsf3>
    1f86:	4b 01       	movw	r8, r22
    1f88:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    1f8a:	0e 94 35 0a 	call	0x146a	; 0x146a <__fixunssfsi>
    1f8e:	6b 01       	movw	r12, r22
    1f90:	7c 01       	movw	r14, r24
    n += print(toPrint);
    1f92:	4a e0       	ldi	r20, 0x0A	; 10
    1f94:	50 e0       	ldi	r21, 0x00	; 0
    1f96:	c8 01       	movw	r24, r16
    1f98:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_ZN5Print5printEji>
    1f9c:	c8 0f       	add	r28, r24
    1f9e:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1fa0:	b6 01       	movw	r22, r12
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__floatunsisf>
    1faa:	9b 01       	movw	r18, r22
    1fac:	ac 01       	movw	r20, r24
    1fae:	c5 01       	movw	r24, r10
    1fb0:	b4 01       	movw	r22, r8
    1fb2:	0e 94 16 09 	call	0x122c	; 0x122c <__subsf3>
    1fb6:	6b 01       	movw	r12, r22
    1fb8:	7c 01       	movw	r14, r24
    1fba:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1fbc:	71 10       	cpse	r7, r1
    1fbe:	db cf       	rjmp	.-74     	; 0x1f76 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1fc0:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	1f 91       	pop	r17
    1fc8:	0f 91       	pop	r16
    1fca:	ff 90       	pop	r15
    1fcc:	ef 90       	pop	r14
    1fce:	df 90       	pop	r13
    1fd0:	cf 90       	pop	r12
    1fd2:	bf 90       	pop	r11
    1fd4:	af 90       	pop	r10
    1fd6:	9f 90       	pop	r9
    1fd8:	8f 90       	pop	r8
    1fda:	7f 90       	pop	r7
    1fdc:	08 95       	ret

00001fde <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1fde:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <_ZN5Print10printFloatEdh>

00001fe2 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1fe2:	0f 93       	push	r16
    1fe4:	1f 93       	push	r17
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
    1fea:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1fec:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <_ZN5Print10printFloatEdh>
    1ff0:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1ff2:	ce 01       	movw	r24, r28
    1ff4:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <_ZN5Print7printlnEv>
  return n;
}
    1ff8:	80 0f       	add	r24, r16
    1ffa:	91 1f       	adc	r25, r17
    1ffc:	df 91       	pop	r29
    1ffe:	cf 91       	pop	r28
    2000:	1f 91       	pop	r17
    2002:	0f 91       	pop	r16
    2004:	08 95       	ret

00002006 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2006:	1f 92       	push	r1
    2008:	0f 92       	push	r0
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	0f 92       	push	r0
    200e:	11 24       	eor	r1, r1
    2010:	2f 93       	push	r18
    2012:	3f 93       	push	r19
    2014:	8f 93       	push	r24
    2016:	9f 93       	push	r25
    2018:	af 93       	push	r26
    201a:	bf 93       	push	r27
    201c:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <timer0_millis>
    2020:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <timer0_millis+0x1>
    2024:	a0 91 7f 03 	lds	r26, 0x037F	; 0x80037f <timer0_millis+0x2>
    2028:	b0 91 80 03 	lds	r27, 0x0380	; 0x800380 <timer0_millis+0x3>
    202c:	30 91 7c 03 	lds	r19, 0x037C	; 0x80037c <timer0_fract>
    2030:	23 e0       	ldi	r18, 0x03	; 3
    2032:	23 0f       	add	r18, r19
    2034:	2d 37       	cpi	r18, 0x7D	; 125
    2036:	20 f4       	brcc	.+8      	; 0x2040 <__vector_16+0x3a>
    2038:	01 96       	adiw	r24, 0x01	; 1
    203a:	a1 1d       	adc	r26, r1
    203c:	b1 1d       	adc	r27, r1
    203e:	05 c0       	rjmp	.+10     	; 0x204a <__vector_16+0x44>
    2040:	26 e8       	ldi	r18, 0x86	; 134
    2042:	23 0f       	add	r18, r19
    2044:	02 96       	adiw	r24, 0x02	; 2
    2046:	a1 1d       	adc	r26, r1
    2048:	b1 1d       	adc	r27, r1
    204a:	20 93 7c 03 	sts	0x037C, r18	; 0x80037c <timer0_fract>
    204e:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <timer0_millis>
    2052:	90 93 7e 03 	sts	0x037E, r25	; 0x80037e <timer0_millis+0x1>
    2056:	a0 93 7f 03 	sts	0x037F, r26	; 0x80037f <timer0_millis+0x2>
    205a:	b0 93 80 03 	sts	0x0380, r27	; 0x800380 <timer0_millis+0x3>
    205e:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <timer0_overflow_count>
    2062:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <timer0_overflow_count+0x1>
    2066:	a0 91 83 03 	lds	r26, 0x0383	; 0x800383 <timer0_overflow_count+0x2>
    206a:	b0 91 84 03 	lds	r27, 0x0384	; 0x800384 <timer0_overflow_count+0x3>
    206e:	01 96       	adiw	r24, 0x01	; 1
    2070:	a1 1d       	adc	r26, r1
    2072:	b1 1d       	adc	r27, r1
    2074:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <timer0_overflow_count>
    2078:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <timer0_overflow_count+0x1>
    207c:	a0 93 83 03 	sts	0x0383, r26	; 0x800383 <timer0_overflow_count+0x2>
    2080:	b0 93 84 03 	sts	0x0384, r27	; 0x800384 <timer0_overflow_count+0x3>
    2084:	bf 91       	pop	r27
    2086:	af 91       	pop	r26
    2088:	9f 91       	pop	r25
    208a:	8f 91       	pop	r24
    208c:	3f 91       	pop	r19
    208e:	2f 91       	pop	r18
    2090:	0f 90       	pop	r0
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	0f 90       	pop	r0
    2096:	1f 90       	pop	r1
    2098:	18 95       	reti

0000209a <micros>:
    209a:	3f b7       	in	r19, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <timer0_overflow_count>
    20a2:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <timer0_overflow_count+0x1>
    20a6:	a0 91 83 03 	lds	r26, 0x0383	; 0x800383 <timer0_overflow_count+0x2>
    20aa:	b0 91 84 03 	lds	r27, 0x0384	; 0x800384 <timer0_overflow_count+0x3>
    20ae:	26 b5       	in	r18, 0x26	; 38
    20b0:	a8 9b       	sbis	0x15, 0	; 21
    20b2:	05 c0       	rjmp	.+10     	; 0x20be <micros+0x24>
    20b4:	2f 3f       	cpi	r18, 0xFF	; 255
    20b6:	19 f0       	breq	.+6      	; 0x20be <micros+0x24>
    20b8:	01 96       	adiw	r24, 0x01	; 1
    20ba:	a1 1d       	adc	r26, r1
    20bc:	b1 1d       	adc	r27, r1
    20be:	3f bf       	out	0x3f, r19	; 63
    20c0:	ba 2f       	mov	r27, r26
    20c2:	a9 2f       	mov	r26, r25
    20c4:	98 2f       	mov	r25, r24
    20c6:	88 27       	eor	r24, r24
    20c8:	82 0f       	add	r24, r18
    20ca:	91 1d       	adc	r25, r1
    20cc:	a1 1d       	adc	r26, r1
    20ce:	b1 1d       	adc	r27, r1
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	42 e0       	ldi	r20, 0x02	; 2
    20d6:	66 0f       	add	r22, r22
    20d8:	77 1f       	adc	r23, r23
    20da:	88 1f       	adc	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	4a 95       	dec	r20
    20e0:	d1 f7       	brne	.-12     	; 0x20d6 <micros+0x3c>
    20e2:	08 95       	ret

000020e4 <delay>:
    20e4:	8f 92       	push	r8
    20e6:	9f 92       	push	r9
    20e8:	af 92       	push	r10
    20ea:	bf 92       	push	r11
    20ec:	cf 92       	push	r12
    20ee:	df 92       	push	r13
    20f0:	ef 92       	push	r14
    20f2:	ff 92       	push	r15
    20f4:	6b 01       	movw	r12, r22
    20f6:	7c 01       	movw	r14, r24
    20f8:	0e 94 4d 10 	call	0x209a	; 0x209a <micros>
    20fc:	4b 01       	movw	r8, r22
    20fe:	5c 01       	movw	r10, r24
    2100:	c1 14       	cp	r12, r1
    2102:	d1 04       	cpc	r13, r1
    2104:	e1 04       	cpc	r14, r1
    2106:	f1 04       	cpc	r15, r1
    2108:	01 f1       	breq	.+64     	; 0x214a <delay+0x66>
    210a:	0e 94 cb 1c 	call	0x3996	; 0x3996 <yield>
    210e:	0e 94 4d 10 	call	0x209a	; 0x209a <micros>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	88 19       	sub	r24, r8
    2118:	99 09       	sbc	r25, r9
    211a:	aa 09       	sbc	r26, r10
    211c:	bb 09       	sbc	r27, r11
    211e:	88 3e       	cpi	r24, 0xE8	; 232
    2120:	93 40       	sbci	r25, 0x03	; 3
    2122:	a1 05       	cpc	r26, r1
    2124:	b1 05       	cpc	r27, r1
    2126:	60 f3       	brcs	.-40     	; 0x2100 <delay+0x1c>
    2128:	21 e0       	ldi	r18, 0x01	; 1
    212a:	c2 1a       	sub	r12, r18
    212c:	d1 08       	sbc	r13, r1
    212e:	e1 08       	sbc	r14, r1
    2130:	f1 08       	sbc	r15, r1
    2132:	88 ee       	ldi	r24, 0xE8	; 232
    2134:	88 0e       	add	r8, r24
    2136:	83 e0       	ldi	r24, 0x03	; 3
    2138:	98 1e       	adc	r9, r24
    213a:	a1 1c       	adc	r10, r1
    213c:	b1 1c       	adc	r11, r1
    213e:	c1 14       	cp	r12, r1
    2140:	d1 04       	cpc	r13, r1
    2142:	e1 04       	cpc	r14, r1
    2144:	f1 04       	cpc	r15, r1
    2146:	19 f7       	brne	.-58     	; 0x210e <delay+0x2a>
    2148:	db cf       	rjmp	.-74     	; 0x2100 <delay+0x1c>
    214a:	ff 90       	pop	r15
    214c:	ef 90       	pop	r14
    214e:	df 90       	pop	r13
    2150:	cf 90       	pop	r12
    2152:	bf 90       	pop	r11
    2154:	af 90       	pop	r10
    2156:	9f 90       	pop	r9
    2158:	8f 90       	pop	r8
    215a:	08 95       	ret

0000215c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    215c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    215e:	84 b5       	in	r24, 0x24	; 36
    2160:	82 60       	ori	r24, 0x02	; 2
    2162:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2164:	84 b5       	in	r24, 0x24	; 36
    2166:	81 60       	ori	r24, 0x01	; 1
    2168:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    216a:	85 b5       	in	r24, 0x25	; 37
    216c:	82 60       	ori	r24, 0x02	; 2
    216e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2170:	85 b5       	in	r24, 0x25	; 37
    2172:	81 60       	ori	r24, 0x01	; 1
    2174:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2176:	ee e6       	ldi	r30, 0x6E	; 110
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	81 60       	ori	r24, 0x01	; 1
    217e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2180:	e1 e8       	ldi	r30, 0x81	; 129
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2186:	80 81       	ld	r24, Z
    2188:	82 60       	ori	r24, 0x02	; 2
    218a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    218c:	80 81       	ld	r24, Z
    218e:	81 60       	ori	r24, 0x01	; 1
    2190:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2192:	e0 e8       	ldi	r30, 0x80	; 128
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	81 60       	ori	r24, 0x01	; 1
    219a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    219c:	e1 eb       	ldi	r30, 0xB1	; 177
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	84 60       	ori	r24, 0x04	; 4
    21a4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    21a6:	e0 eb       	ldi	r30, 0xB0	; 176
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	81 60       	ori	r24, 0x01	; 1
    21ae:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    21b0:	ea e7       	ldi	r30, 0x7A	; 122
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	84 60       	ori	r24, 0x04	; 4
    21b8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    21ba:	80 81       	ld	r24, Z
    21bc:	82 60       	ori	r24, 0x02	; 2
    21be:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    21c0:	80 81       	ld	r24, Z
    21c2:	81 60       	ori	r24, 0x01	; 1
    21c4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    21c6:	80 81       	ld	r24, Z
    21c8:	80 68       	ori	r24, 0x80	; 128
    21ca:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    21cc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    21d0:	08 95       	ret

000021d2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    21d2:	83 30       	cpi	r24, 0x03	; 3
    21d4:	81 f0       	breq	.+32     	; 0x21f6 <turnOffPWM+0x24>
    21d6:	28 f4       	brcc	.+10     	; 0x21e2 <turnOffPWM+0x10>
    21d8:	81 30       	cpi	r24, 0x01	; 1
    21da:	99 f0       	breq	.+38     	; 0x2202 <turnOffPWM+0x30>
    21dc:	82 30       	cpi	r24, 0x02	; 2
    21de:	a1 f0       	breq	.+40     	; 0x2208 <turnOffPWM+0x36>
    21e0:	08 95       	ret
    21e2:	87 30       	cpi	r24, 0x07	; 7
    21e4:	a9 f0       	breq	.+42     	; 0x2210 <turnOffPWM+0x3e>
    21e6:	88 30       	cpi	r24, 0x08	; 8
    21e8:	b9 f0       	breq	.+46     	; 0x2218 <turnOffPWM+0x46>
    21ea:	84 30       	cpi	r24, 0x04	; 4
    21ec:	d1 f4       	brne	.+52     	; 0x2222 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    21ee:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    21f2:	8f 7d       	andi	r24, 0xDF	; 223
    21f4:	03 c0       	rjmp	.+6      	; 0x21fc <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    21f6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    21fa:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    21fc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2200:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2202:	84 b5       	in	r24, 0x24	; 36
    2204:	8f 77       	andi	r24, 0x7F	; 127
    2206:	02 c0       	rjmp	.+4      	; 0x220c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2208:	84 b5       	in	r24, 0x24	; 36
    220a:	8f 7d       	andi	r24, 0xDF	; 223
    220c:	84 bd       	out	0x24, r24	; 36
    220e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2210:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2214:	8f 77       	andi	r24, 0x7F	; 127
    2216:	03 c0       	rjmp	.+6      	; 0x221e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2218:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    221c:	8f 7d       	andi	r24, 0xDF	; 223
    221e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2222:	08 95       	ret

00002224 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	fc 01       	movw	r30, r24
    222c:	e8 53       	subi	r30, 0x38	; 56
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2232:	fc 01       	movw	r30, r24
    2234:	e4 52       	subi	r30, 0x24	; 36
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    223a:	88 23       	and	r24, r24
    223c:	61 f1       	breq	.+88     	; 0x2296 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	88 0f       	add	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	fc 01       	movw	r30, r24
    2246:	e6 50       	subi	r30, 0x06	; 6
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	c5 91       	lpm	r28, Z+
    224c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    224e:	fc 01       	movw	r30, r24
    2250:	e0 51       	subi	r30, 0x10	; 16
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	a5 91       	lpm	r26, Z+
    2256:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2258:	61 11       	cpse	r22, r1
    225a:	09 c0       	rjmp	.+18     	; 0x226e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    225c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    225e:	f8 94       	cli
		*reg &= ~bit;
    2260:	88 81       	ld	r24, Y
    2262:	20 95       	com	r18
    2264:	82 23       	and	r24, r18
    2266:	88 83       	st	Y, r24
		*out &= ~bit;
    2268:	ec 91       	ld	r30, X
    226a:	2e 23       	and	r18, r30
    226c:	0b c0       	rjmp	.+22     	; 0x2284 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    226e:	62 30       	cpi	r22, 0x02	; 2
    2270:	61 f4       	brne	.+24     	; 0x228a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2272:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2274:	f8 94       	cli
		*reg &= ~bit;
    2276:	88 81       	ld	r24, Y
    2278:	32 2f       	mov	r19, r18
    227a:	30 95       	com	r19
    227c:	83 23       	and	r24, r19
    227e:	88 83       	st	Y, r24
		*out |= bit;
    2280:	ec 91       	ld	r30, X
    2282:	2e 2b       	or	r18, r30
    2284:	2c 93       	st	X, r18
		SREG = oldSREG;
    2286:	9f bf       	out	0x3f, r25	; 63
    2288:	06 c0       	rjmp	.+12     	; 0x2296 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    228a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    228c:	f8 94       	cli
		*reg |= bit;
    228e:	e8 81       	ld	r30, Y
    2290:	2e 2b       	or	r18, r30
    2292:	28 83       	st	Y, r18
		SREG = oldSREG;
    2294:	8f bf       	out	0x3f, r24	; 63
	}
}
    2296:	df 91       	pop	r29
    2298:	cf 91       	pop	r28
    229a:	08 95       	ret

0000229c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    229c:	1f 93       	push	r17
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    22a2:	28 2f       	mov	r18, r24
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	f9 01       	movw	r30, r18
    22a8:	ec 54       	subi	r30, 0x4C	; 76
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    22ae:	f9 01       	movw	r30, r18
    22b0:	e8 53       	subi	r30, 0x38	; 56
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    22b6:	f9 01       	movw	r30, r18
    22b8:	e4 52       	subi	r30, 0x24	; 36
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    22be:	cc 23       	and	r28, r28
    22c0:	c1 f0       	breq	.+48     	; 0x22f2 <digitalWrite+0x56>
    22c2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    22c4:	81 11       	cpse	r24, r1
    22c6:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <turnOffPWM>

	out = portOutputRegister(port);
    22ca:	ec 2f       	mov	r30, r28
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	ee 0f       	add	r30, r30
    22d0:	ff 1f       	adc	r31, r31
    22d2:	e0 51       	subi	r30, 0x10	; 16
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	a5 91       	lpm	r26, Z+
    22d8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    22da:	9f b7       	in	r25, 0x3f	; 63
	cli();
    22dc:	f8 94       	cli

	if (val == LOW) {
    22de:	11 11       	cpse	r17, r1
    22e0:	04 c0       	rjmp	.+8      	; 0x22ea <digitalWrite+0x4e>
		*out &= ~bit;
    22e2:	8c 91       	ld	r24, X
    22e4:	d0 95       	com	r29
    22e6:	d8 23       	and	r29, r24
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <digitalWrite+0x52>
	} else {
		*out |= bit;
    22ea:	ec 91       	ld	r30, X
    22ec:	de 2b       	or	r29, r30
    22ee:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    22f0:	9f bf       	out	0x3f, r25	; 63
}
    22f2:	df 91       	pop	r29
    22f4:	cf 91       	pop	r28
    22f6:	1f 91       	pop	r17
    22f8:	08 95       	ret

000022fa <_ZN6StringD1Ev>:
{
	init();
	char buf[1 + 8 * sizeof(unsigned char)];
	utoa(value, buf, base);
	*this = buf;
}
    22fa:	fc 01       	movw	r30, r24
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	0c 94 91 1d 	jmp	0x3b22	; 0x3b22 <free>

00002304 <_ZN6String10invalidateEv>:
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	ec 01       	movw	r28, r24
    230a:	88 81       	ld	r24, Y
    230c:	99 81       	ldd	r25, Y+1	; 0x01
    230e:	00 97       	sbiw	r24, 0x00	; 0
    2310:	11 f0       	breq	.+4      	; 0x2316 <_ZN6String10invalidateEv+0x12>
    2312:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <free>
    2316:	19 82       	std	Y+1, r1	; 0x01
    2318:	18 82       	st	Y, r1
    231a:	1d 82       	std	Y+5, r1	; 0x05
    231c:	1c 82       	std	Y+4, r1	; 0x04
    231e:	1b 82       	std	Y+3, r1	; 0x03
    2320:	1a 82       	std	Y+2, r1	; 0x02
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	08 95       	ret

00002328 <_ZN6String12changeBufferEj>:
    2328:	0f 93       	push	r16
    232a:	1f 93       	push	r17
    232c:	cf 93       	push	r28
    232e:	df 93       	push	r29
    2330:	ec 01       	movw	r28, r24
    2332:	8b 01       	movw	r16, r22
    2334:	6f 5f       	subi	r22, 0xFF	; 255
    2336:	7f 4f       	sbci	r23, 0xFF	; 255
    2338:	88 81       	ld	r24, Y
    233a:	99 81       	ldd	r25, Y+1	; 0x01
    233c:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <realloc>
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	31 f0       	breq	.+12     	; 0x2350 <_ZN6String12changeBufferEj+0x28>
    2344:	99 83       	std	Y+1, r25	; 0x01
    2346:	88 83       	st	Y, r24
    2348:	1b 83       	std	Y+3, r17	; 0x03
    234a:	0a 83       	std	Y+2, r16	; 0x02
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	01 c0       	rjmp	.+2      	; 0x2352 <_ZN6String12changeBufferEj+0x2a>
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	08 95       	ret

0000235c <_ZN6String7reserveEj>:
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	ec 01       	movw	r28, r24
    2362:	88 81       	ld	r24, Y
    2364:	99 81       	ldd	r25, Y+1	; 0x01
    2366:	89 2b       	or	r24, r25
    2368:	29 f0       	breq	.+10     	; 0x2374 <_ZN6String7reserveEj+0x18>
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	9b 81       	ldd	r25, Y+3	; 0x03
    236e:	86 17       	cp	r24, r22
    2370:	97 07       	cpc	r25, r23
    2372:	60 f4       	brcc	.+24     	; 0x238c <_ZN6String7reserveEj+0x30>
    2374:	ce 01       	movw	r24, r28
    2376:	0e 94 94 11 	call	0x2328	; 0x2328 <_ZN6String12changeBufferEj>
    237a:	88 23       	and	r24, r24
    237c:	41 f0       	breq	.+16     	; 0x238e <_ZN6String7reserveEj+0x32>
    237e:	8c 81       	ldd	r24, Y+4	; 0x04
    2380:	9d 81       	ldd	r25, Y+5	; 0x05
    2382:	89 2b       	or	r24, r25
    2384:	19 f4       	brne	.+6      	; 0x238c <_ZN6String7reserveEj+0x30>
    2386:	e8 81       	ld	r30, Y
    2388:	f9 81       	ldd	r31, Y+1	; 0x01
    238a:	10 82       	st	Z, r1
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	08 95       	ret

00002394 <_ZN6String4copyEPKcj>:
    2394:	ef 92       	push	r14
    2396:	ff 92       	push	r15
    2398:	0f 93       	push	r16
    239a:	1f 93       	push	r17
    239c:	cf 93       	push	r28
    239e:	df 93       	push	r29
    23a0:	ec 01       	movw	r28, r24
    23a2:	7b 01       	movw	r14, r22
    23a4:	8a 01       	movw	r16, r20
    23a6:	ba 01       	movw	r22, r20
    23a8:	0e 94 ae 11 	call	0x235c	; 0x235c <_ZN6String7reserveEj>
    23ac:	81 11       	cpse	r24, r1
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <_ZN6String4copyEPKcj+0x24>
    23b0:	ce 01       	movw	r24, r28
    23b2:	0e 94 82 11 	call	0x2304	; 0x2304 <_ZN6String10invalidateEv>
    23b6:	07 c0       	rjmp	.+14     	; 0x23c6 <_ZN6String4copyEPKcj+0x32>
    23b8:	1d 83       	std	Y+5, r17	; 0x05
    23ba:	0c 83       	std	Y+4, r16	; 0x04
    23bc:	b7 01       	movw	r22, r14
    23be:	88 81       	ld	r24, Y
    23c0:	99 81       	ldd	r25, Y+1	; 0x01
    23c2:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <strcpy>
    23c6:	ce 01       	movw	r24, r28
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	1f 91       	pop	r17
    23ce:	0f 91       	pop	r16
    23d0:	ff 90       	pop	r15
    23d2:	ef 90       	pop	r14
    23d4:	08 95       	ret

000023d6 <_ZN6StringaSEPKc>:
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	ec 01       	movw	r28, r24
    23dc:	61 15       	cp	r22, r1
    23de:	71 05       	cpc	r23, r1
    23e0:	59 f0       	breq	.+22     	; 0x23f8 <_ZN6StringaSEPKc+0x22>
    23e2:	fb 01       	movw	r30, r22
    23e4:	01 90       	ld	r0, Z+
    23e6:	00 20       	and	r0, r0
    23e8:	e9 f7       	brne	.-6      	; 0x23e4 <_ZN6StringaSEPKc+0xe>
    23ea:	31 97       	sbiw	r30, 0x01	; 1
    23ec:	af 01       	movw	r20, r30
    23ee:	46 1b       	sub	r20, r22
    23f0:	57 0b       	sbc	r21, r23
    23f2:	0e 94 ca 11 	call	0x2394	; 0x2394 <_ZN6String4copyEPKcj>
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <_ZN6StringaSEPKc+0x26>
    23f8:	0e 94 82 11 	call	0x2304	; 0x2304 <_ZN6String10invalidateEv>
    23fc:	ce 01       	movw	r24, r28
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	08 95       	ret

00002404 <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
    2404:	0f 93       	push	r16
    2406:	1f 93       	push	r17
    2408:	cf 93       	push	r28
    240a:	df 93       	push	r29
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	62 97       	sbiw	r28, 0x12	; 18
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	8c 01       	movw	r16, r24
    241e:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2420:	f8 01       	movw	r30, r16
    2422:	11 82       	std	Z+1, r1	; 0x01
    2424:	10 82       	st	Z, r1
	capacity = 0;
    2426:	13 82       	std	Z+3, r1	; 0x03
    2428:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    242a:	15 82       	std	Z+5, r1	; 0x05
    242c:	14 82       	std	Z+4, r1	; 0x04
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
    242e:	50 e0       	ldi	r21, 0x00	; 0
    2430:	be 01       	movw	r22, r28
    2432:	6f 5f       	subi	r22, 0xFF	; 255
    2434:	7f 4f       	sbci	r23, 0xFF	; 255
    2436:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <itoa>
String::String(int value, unsigned char base)
{
	init();
	char buf[2 + 8 * sizeof(int)];
	itoa(value, buf, base);
	*this = buf;
    243a:	be 01       	movw	r22, r28
    243c:	6f 5f       	subi	r22, 0xFF	; 255
    243e:	7f 4f       	sbci	r23, 0xFF	; 255
    2440:	c8 01       	movw	r24, r16
    2442:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <_ZN6StringaSEPKc>
}
    2446:	62 96       	adiw	r28, 0x12	; 18
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	1f 91       	pop	r17
    2458:	0f 91       	pop	r16
    245a:	08 95       	ret

0000245c <_ZN12Adafruit_GFX9writeLineEiiiij>:
    }
    if(maxy >= miny) {
        *y1 = miny;
        *h  = maxy - miny + 1;
    }
}
    245c:	2f 92       	push	r2
    245e:	3f 92       	push	r3
    2460:	4f 92       	push	r4
    2462:	5f 92       	push	r5
    2464:	6f 92       	push	r6
    2466:	7f 92       	push	r7
    2468:	8f 92       	push	r8
    246a:	9f 92       	push	r9
    246c:	af 92       	push	r10
    246e:	bf 92       	push	r11
    2470:	cf 92       	push	r12
    2472:	df 92       	push	r13
    2474:	ef 92       	push	r14
    2476:	ff 92       	push	r15
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
    2480:	00 d0       	rcall	.+0      	; 0x2482 <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    2482:	00 d0       	rcall	.+0      	; 0x2484 <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    2484:	00 d0       	rcall	.+0      	; 0x2486 <_ZN12Adafruit_GFX9writeLineEiiiij+0x2a>
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	2c 01       	movw	r4, r24
    248c:	7e 83       	std	Y+6, r23	; 0x06
    248e:	6d 83       	std	Y+5, r22	; 0x05
    2490:	6a 01       	movw	r12, r20
    2492:	59 01       	movw	r10, r18
    2494:	c8 01       	movw	r24, r16
    2496:	fc 82       	std	Y+4, r15	; 0x04
    2498:	eb 82       	std	Y+3, r14	; 0x03
    249a:	48 01       	movw	r8, r16
    249c:	84 1a       	sub	r8, r20
    249e:	95 0a       	sbc	r9, r21
    24a0:	97 fe       	sbrs	r9, 7
    24a2:	03 c0       	rjmp	.+6      	; 0x24aa <_ZN12Adafruit_GFX9writeLineEiiiij+0x4e>
    24a4:	91 94       	neg	r9
    24a6:	81 94       	neg	r8
    24a8:	91 08       	sbc	r9, r1
    24aa:	35 01       	movw	r6, r10
    24ac:	2d 81       	ldd	r18, Y+5	; 0x05
    24ae:	3e 81       	ldd	r19, Y+6	; 0x06
    24b0:	62 1a       	sub	r6, r18
    24b2:	73 0a       	sbc	r7, r19
    24b4:	77 fe       	sbrs	r7, 7
    24b6:	03 c0       	rjmp	.+6      	; 0x24be <_ZN12Adafruit_GFX9writeLineEiiiij+0x62>
    24b8:	71 94       	neg	r7
    24ba:	61 94       	neg	r6
    24bc:	71 08       	sbc	r7, r1
    24be:	68 14       	cp	r6, r8
    24c0:	79 04       	cpc	r7, r9
    24c2:	5c f4       	brge	.+22     	; 0x24da <_ZN12Adafruit_GFX9writeLineEiiiij+0x7e>
    24c4:	3a 2d       	mov	r19, r10
    24c6:	2b 2d       	mov	r18, r11
    24c8:	5c 01       	movw	r10, r24
    24ca:	83 2f       	mov	r24, r19
    24cc:	92 2f       	mov	r25, r18
    24ce:	3d 81       	ldd	r19, Y+5	; 0x05
    24d0:	2e 81       	ldd	r18, Y+6	; 0x06
    24d2:	de 82       	std	Y+6, r13	; 0x06
    24d4:	cd 82       	std	Y+5, r12	; 0x05
    24d6:	c3 2e       	mov	r12, r19
    24d8:	d2 2e       	mov	r13, r18
    24da:	ad 81       	ldd	r26, Y+5	; 0x05
    24dc:	be 81       	ldd	r27, Y+6	; 0x06
    24de:	aa 16       	cp	r10, r26
    24e0:	bb 06       	cpc	r11, r27
    24e2:	5c f4       	brge	.+22     	; 0x24fa <_ZN12Adafruit_GFX9writeLineEiiiij+0x9e>
    24e4:	3c 2d       	mov	r19, r12
    24e6:	2d 2d       	mov	r18, r13
    24e8:	6c 01       	movw	r12, r24
    24ea:	83 2f       	mov	r24, r19
    24ec:	92 2f       	mov	r25, r18
    24ee:	3d 81       	ldd	r19, Y+5	; 0x05
    24f0:	2e 81       	ldd	r18, Y+6	; 0x06
    24f2:	be 82       	std	Y+6, r11	; 0x06
    24f4:	ad 82       	std	Y+5, r10	; 0x05
    24f6:	a3 2e       	mov	r10, r19
    24f8:	b2 2e       	mov	r11, r18
    24fa:	85 01       	movw	r16, r10
    24fc:	2d 81       	ldd	r18, Y+5	; 0x05
    24fe:	3e 81       	ldd	r19, Y+6	; 0x06
    2500:	02 1b       	sub	r16, r18
    2502:	13 0b       	sbc	r17, r19
    2504:	1c 01       	movw	r2, r24
    2506:	2c 18       	sub	r2, r12
    2508:	3d 08       	sbc	r3, r13
    250a:	37 fe       	sbrs	r3, 7
    250c:	03 c0       	rjmp	.+6      	; 0x2514 <_ZN12Adafruit_GFX9writeLineEiiiij+0xb8>
    250e:	31 94       	neg	r3
    2510:	21 94       	neg	r2
    2512:	31 08       	sbc	r3, r1
    2514:	78 01       	movw	r14, r16
    2516:	17 ff       	sbrs	r17, 7
    2518:	03 c0       	rjmp	.+6      	; 0x2520 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc4>
    251a:	3f ef       	ldi	r19, 0xFF	; 255
    251c:	e3 1a       	sub	r14, r19
    251e:	f3 0a       	sbc	r15, r19
    2520:	f5 94       	asr	r15
    2522:	e7 94       	ror	r14
    2524:	c8 16       	cp	r12, r24
    2526:	d9 06       	cpc	r13, r25
    2528:	2c f0       	brlt	.+10     	; 0x2534 <_ZN12Adafruit_GFX9writeLineEiiiij+0xd8>
    252a:	8f ef       	ldi	r24, 0xFF	; 255
    252c:	9f ef       	ldi	r25, 0xFF	; 255
    252e:	9a 83       	std	Y+2, r25	; 0x02
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	04 c0       	rjmp	.+8      	; 0x253c <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    2534:	a1 e0       	ldi	r26, 0x01	; 1
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	ba 83       	std	Y+2, r27	; 0x02
    253a:	a9 83       	std	Y+1, r26	; 0x01
    253c:	2d 81       	ldd	r18, Y+5	; 0x05
    253e:	3e 81       	ldd	r19, Y+6	; 0x06
    2540:	a2 16       	cp	r10, r18
    2542:	b3 06       	cpc	r11, r19
    2544:	24 f1       	brlt	.+72     	; 0x258e <_ZN12Adafruit_GFX9writeLineEiiiij+0x132>
    2546:	d2 01       	movw	r26, r4
    2548:	ed 91       	ld	r30, X+
    254a:	fc 91       	ld	r31, X
    254c:	04 84       	ldd	r0, Z+12	; 0x0c
    254e:	f5 85       	ldd	r31, Z+13	; 0x0d
    2550:	e0 2d       	mov	r30, r0
    2552:	2b 81       	ldd	r18, Y+3	; 0x03
    2554:	3c 81       	ldd	r19, Y+4	; 0x04
    2556:	68 14       	cp	r6, r8
    2558:	79 04       	cpc	r7, r9
    255a:	24 f4       	brge	.+8      	; 0x2564 <_ZN12Adafruit_GFX9writeLineEiiiij+0x108>
    255c:	4d 81       	ldd	r20, Y+5	; 0x05
    255e:	5e 81       	ldd	r21, Y+6	; 0x06
    2560:	b6 01       	movw	r22, r12
    2562:	03 c0       	rjmp	.+6      	; 0x256a <_ZN12Adafruit_GFX9writeLineEiiiij+0x10e>
    2564:	a6 01       	movw	r20, r12
    2566:	6d 81       	ldd	r22, Y+5	; 0x05
    2568:	7e 81       	ldd	r23, Y+6	; 0x06
    256a:	c2 01       	movw	r24, r4
    256c:	09 95       	icall
    256e:	e2 18       	sub	r14, r2
    2570:	f3 08       	sbc	r15, r3
    2572:	f7 fe       	sbrs	r15, 7
    2574:	06 c0       	rjmp	.+12     	; 0x2582 <_ZN12Adafruit_GFX9writeLineEiiiij+0x126>
    2576:	29 81       	ldd	r18, Y+1	; 0x01
    2578:	3a 81       	ldd	r19, Y+2	; 0x02
    257a:	c2 0e       	add	r12, r18
    257c:	d3 1e       	adc	r13, r19
    257e:	e0 0e       	add	r14, r16
    2580:	f1 1e       	adc	r15, r17
    2582:	8d 81       	ldd	r24, Y+5	; 0x05
    2584:	9e 81       	ldd	r25, Y+6	; 0x06
    2586:	01 96       	adiw	r24, 0x01	; 1
    2588:	9e 83       	std	Y+6, r25	; 0x06
    258a:	8d 83       	std	Y+5, r24	; 0x05
    258c:	d7 cf       	rjmp	.-82     	; 0x253c <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    258e:	26 96       	adiw	r28, 0x06	; 6
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	1f 91       	pop	r17
    25a0:	0f 91       	pop	r16
    25a2:	ff 90       	pop	r15
    25a4:	ef 90       	pop	r14
    25a6:	df 90       	pop	r13
    25a8:	cf 90       	pop	r12
    25aa:	bf 90       	pop	r11
    25ac:	af 90       	pop	r10
    25ae:	9f 90       	pop	r9
    25b0:	8f 90       	pop	r8
    25b2:	7f 90       	pop	r7
    25b4:	6f 90       	pop	r6
    25b6:	5f 90       	pop	r5
    25b8:	4f 90       	pop	r4
    25ba:	3f 90       	pop	r3
    25bc:	2f 90       	pop	r2
    25be:	08 95       	ret

000025c0 <_ZN12Adafruit_GFX10writePixelEiij>:
    25c0:	dc 01       	movw	r26, r24
    25c2:	ed 91       	ld	r30, X+
    25c4:	fc 91       	ld	r31, X
    25c6:	00 84       	ldd	r0, Z+8	; 0x08
    25c8:	f1 85       	ldd	r31, Z+9	; 0x09
    25ca:	e0 2d       	mov	r30, r0
    25cc:	09 94       	ijmp

000025ce <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    25ce:	0f 93       	push	r16
    25d0:	1f 93       	push	r17
    25d2:	dc 01       	movw	r26, r24
    25d4:	ed 91       	ld	r30, X+
    25d6:	fc 91       	ld	r31, X
    25d8:	04 8c       	ldd	r0, Z+28	; 0x1c
    25da:	f5 8d       	ldd	r31, Z+29	; 0x1d
    25dc:	e0 2d       	mov	r30, r0
    25de:	09 95       	icall
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
    25e4:	08 95       	ret

000025e6 <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    25e6:	0f 93       	push	r16
    25e8:	1f 93       	push	r17
    25ea:	dc 01       	movw	r26, r24
    25ec:	ed 91       	ld	r30, X+
    25ee:	fc 91       	ld	r31, X
    25f0:	06 8c       	ldd	r0, Z+30	; 0x1e
    25f2:	f7 8d       	ldd	r31, Z+31	; 0x1f
    25f4:	e0 2d       	mov	r30, r0
    25f6:	09 95       	icall
    25f8:	1f 91       	pop	r17
    25fa:	0f 91       	pop	r16
    25fc:	08 95       	ret

000025fe <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    25fe:	ef 92       	push	r14
    2600:	ff 92       	push	r15
    2602:	0f 93       	push	r16
    2604:	1f 93       	push	r17
    2606:	dc 01       	movw	r26, r24
    2608:	ed 91       	ld	r30, X+
    260a:	fc 91       	ld	r31, X
    260c:	00 a0       	ldd	r0, Z+32	; 0x20
    260e:	f1 a1       	ldd	r31, Z+33	; 0x21
    2610:	e0 2d       	mov	r30, r0
    2612:	09 95       	icall
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	ff 90       	pop	r15
    261a:	ef 90       	pop	r14
    261c:	08 95       	ret

0000261e <_ZN12Adafruit_GFX10startWriteEv>:
    261e:	08 95       	ret

00002620 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    2620:	8f 92       	push	r8
    2622:	9f 92       	push	r9
    2624:	af 92       	push	r10
    2626:	bf 92       	push	r11
    2628:	cf 92       	push	r12
    262a:	df 92       	push	r13
    262c:	ef 92       	push	r14
    262e:	ff 92       	push	r15
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	ec 01       	movw	r28, r24
    263a:	5b 01       	movw	r10, r22
    263c:	4a 01       	movw	r8, r20
    263e:	69 01       	movw	r12, r18
    2640:	78 01       	movw	r14, r16
    2642:	e8 81       	ld	r30, Y
    2644:	f9 81       	ldd	r31, Y+1	; 0x01
    2646:	02 84       	ldd	r0, Z+10	; 0x0a
    2648:	f3 85       	ldd	r31, Z+11	; 0x0b
    264a:	e0 2d       	mov	r30, r0
    264c:	09 95       	icall
    264e:	c8 0c       	add	r12, r8
    2650:	d9 1c       	adc	r13, r9
    2652:	86 01       	movw	r16, r12
    2654:	01 50       	subi	r16, 0x01	; 1
    2656:	11 09       	sbc	r17, r1
    2658:	e8 81       	ld	r30, Y
    265a:	f9 81       	ldd	r31, Y+1	; 0x01
    265c:	04 88       	ldd	r0, Z+20	; 0x14
    265e:	f5 89       	ldd	r31, Z+21	; 0x15
    2660:	e0 2d       	mov	r30, r0
    2662:	95 01       	movw	r18, r10
    2664:	a4 01       	movw	r20, r8
    2666:	b5 01       	movw	r22, r10
    2668:	ce 01       	movw	r24, r28
    266a:	09 95       	icall
    266c:	e8 81       	ld	r30, Y
    266e:	f9 81       	ldd	r31, Y+1	; 0x01
    2670:	06 88       	ldd	r0, Z+22	; 0x16
    2672:	f7 89       	ldd	r31, Z+23	; 0x17
    2674:	e0 2d       	mov	r30, r0
    2676:	ce 01       	movw	r24, r28
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	1f 91       	pop	r17
    267e:	0f 91       	pop	r16
    2680:	ff 90       	pop	r15
    2682:	ef 90       	pop	r14
    2684:	df 90       	pop	r13
    2686:	cf 90       	pop	r12
    2688:	bf 90       	pop	r11
    268a:	af 90       	pop	r10
    268c:	9f 90       	pop	r9
    268e:	8f 90       	pop	r8
    2690:	09 94       	ijmp

00002692 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    2692:	8f 92       	push	r8
    2694:	9f 92       	push	r9
    2696:	af 92       	push	r10
    2698:	bf 92       	push	r11
    269a:	cf 92       	push	r12
    269c:	df 92       	push	r13
    269e:	ef 92       	push	r14
    26a0:	ff 92       	push	r15
    26a2:	0f 93       	push	r16
    26a4:	1f 93       	push	r17
    26a6:	cf 93       	push	r28
    26a8:	df 93       	push	r29
    26aa:	ec 01       	movw	r28, r24
    26ac:	5b 01       	movw	r10, r22
    26ae:	4a 01       	movw	r8, r20
    26b0:	69 01       	movw	r12, r18
    26b2:	e8 81       	ld	r30, Y
    26b4:	f9 81       	ldd	r31, Y+1	; 0x01
    26b6:	02 84       	ldd	r0, Z+10	; 0x0a
    26b8:	f3 85       	ldd	r31, Z+11	; 0x0b
    26ba:	e0 2d       	mov	r30, r0
    26bc:	09 95       	icall
    26be:	95 01       	movw	r18, r10
    26c0:	2c 0d       	add	r18, r12
    26c2:	3d 1d       	adc	r19, r13
    26c4:	21 50       	subi	r18, 0x01	; 1
    26c6:	31 09       	sbc	r19, r1
    26c8:	e8 81       	ld	r30, Y
    26ca:	f9 81       	ldd	r31, Y+1	; 0x01
    26cc:	04 88       	ldd	r0, Z+20	; 0x14
    26ce:	f5 89       	ldd	r31, Z+21	; 0x15
    26d0:	e0 2d       	mov	r30, r0
    26d2:	78 01       	movw	r14, r16
    26d4:	84 01       	movw	r16, r8
    26d6:	a4 01       	movw	r20, r8
    26d8:	b5 01       	movw	r22, r10
    26da:	ce 01       	movw	r24, r28
    26dc:	09 95       	icall
    26de:	e8 81       	ld	r30, Y
    26e0:	f9 81       	ldd	r31, Y+1	; 0x01
    26e2:	06 88       	ldd	r0, Z+22	; 0x16
    26e4:	f7 89       	ldd	r31, Z+23	; 0x17
    26e6:	e0 2d       	mov	r30, r0
    26e8:	ce 01       	movw	r24, r28
    26ea:	df 91       	pop	r29
    26ec:	cf 91       	pop	r28
    26ee:	1f 91       	pop	r17
    26f0:	0f 91       	pop	r16
    26f2:	ff 90       	pop	r15
    26f4:	ef 90       	pop	r14
    26f6:	df 90       	pop	r13
    26f8:	cf 90       	pop	r12
    26fa:	bf 90       	pop	r11
    26fc:	af 90       	pop	r10
    26fe:	9f 90       	pop	r9
    2700:	8f 90       	pop	r8
    2702:	09 94       	ijmp

00002704 <_ZN12Adafruit_GFX8fillRectEiiiij>:
    2704:	4f 92       	push	r4
    2706:	5f 92       	push	r5
    2708:	6f 92       	push	r6
    270a:	7f 92       	push	r7
    270c:	8f 92       	push	r8
    270e:	9f 92       	push	r9
    2710:	af 92       	push	r10
    2712:	bf 92       	push	r11
    2714:	cf 92       	push	r12
    2716:	df 92       	push	r13
    2718:	ef 92       	push	r14
    271a:	ff 92       	push	r15
    271c:	0f 93       	push	r16
    271e:	1f 93       	push	r17
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	6c 01       	movw	r12, r24
    2726:	2b 01       	movw	r4, r22
    2728:	5a 01       	movw	r10, r20
    272a:	39 01       	movw	r6, r18
    272c:	48 01       	movw	r8, r16
    272e:	dc 01       	movw	r26, r24
    2730:	ed 91       	ld	r30, X+
    2732:	fc 91       	ld	r31, X
    2734:	02 84       	ldd	r0, Z+10	; 0x0a
    2736:	f3 85       	ldd	r31, Z+11	; 0x0b
    2738:	e0 2d       	mov	r30, r0
    273a:	09 95       	icall
    273c:	e2 01       	movw	r28, r4
    273e:	64 0c       	add	r6, r4
    2740:	75 1c       	adc	r7, r5
    2742:	d6 01       	movw	r26, r12
    2744:	ed 91       	ld	r30, X+
    2746:	fc 91       	ld	r31, X
    2748:	c6 15       	cp	r28, r6
    274a:	d7 05       	cpc	r29, r7
    274c:	5c f4       	brge	.+22     	; 0x2764 <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    274e:	00 88       	ldd	r0, Z+16	; 0x10
    2750:	f1 89       	ldd	r31, Z+17	; 0x11
    2752:	e0 2d       	mov	r30, r0
    2754:	87 01       	movw	r16, r14
    2756:	94 01       	movw	r18, r8
    2758:	a5 01       	movw	r20, r10
    275a:	be 01       	movw	r22, r28
    275c:	c6 01       	movw	r24, r12
    275e:	09 95       	icall
    2760:	21 96       	adiw	r28, 0x01	; 1
    2762:	ef cf       	rjmp	.-34     	; 0x2742 <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    2764:	06 88       	ldd	r0, Z+22	; 0x16
    2766:	f7 89       	ldd	r31, Z+23	; 0x17
    2768:	e0 2d       	mov	r30, r0
    276a:	c6 01       	movw	r24, r12
    276c:	df 91       	pop	r29
    276e:	cf 91       	pop	r28
    2770:	1f 91       	pop	r17
    2772:	0f 91       	pop	r16
    2774:	ff 90       	pop	r15
    2776:	ef 90       	pop	r14
    2778:	df 90       	pop	r13
    277a:	cf 90       	pop	r12
    277c:	bf 90       	pop	r11
    277e:	af 90       	pop	r10
    2780:	9f 90       	pop	r9
    2782:	8f 90       	pop	r8
    2784:	7f 90       	pop	r7
    2786:	6f 90       	pop	r6
    2788:	5f 90       	pop	r5
    278a:	4f 90       	pop	r4
    278c:	09 94       	ijmp

0000278e <_ZN12Adafruit_GFX10fillScreenEj>:
    278e:	ef 92       	push	r14
    2790:	ff 92       	push	r15
    2792:	0f 93       	push	r16
    2794:	1f 93       	push	r17
    2796:	dc 01       	movw	r26, r24
    2798:	1a 96       	adiw	r26, 0x0a	; 10
    279a:	0d 91       	ld	r16, X+
    279c:	1c 91       	ld	r17, X
    279e:	1b 97       	sbiw	r26, 0x0b	; 11
    27a0:	18 96       	adiw	r26, 0x08	; 8
    27a2:	2d 91       	ld	r18, X+
    27a4:	3c 91       	ld	r19, X
    27a6:	19 97       	sbiw	r26, 0x09	; 9
    27a8:	ed 91       	ld	r30, X+
    27aa:	fc 91       	ld	r31, X
    27ac:	00 a0       	ldd	r0, Z+32	; 0x20
    27ae:	f1 a1       	ldd	r31, Z+33	; 0x21
    27b0:	e0 2d       	mov	r30, r0
    27b2:	7b 01       	movw	r14, r22
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	60 e0       	ldi	r22, 0x00	; 0
    27ba:	70 e0       	ldi	r23, 0x00	; 0
    27bc:	09 95       	icall
    27be:	1f 91       	pop	r17
    27c0:	0f 91       	pop	r16
    27c2:	ff 90       	pop	r15
    27c4:	ef 90       	pop	r14
    27c6:	08 95       	ret

000027c8 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    27c8:	8f 92       	push	r8
    27ca:	9f 92       	push	r9
    27cc:	af 92       	push	r10
    27ce:	bf 92       	push	r11
    27d0:	cf 92       	push	r12
    27d2:	df 92       	push	r13
    27d4:	ef 92       	push	r14
    27d6:	ff 92       	push	r15
    27d8:	0f 93       	push	r16
    27da:	1f 93       	push	r17
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    27e0:	4c 01       	movw	r8, r24
    27e2:	6b 01       	movw	r12, r22
    27e4:	5a 01       	movw	r10, r20
    27e6:	e9 01       	movw	r28, r18
    27e8:	dc 01       	movw	r26, r24
    27ea:	ed 91       	ld	r30, X+
    27ec:	fc 91       	ld	r31, X
    27ee:	62 17       	cp	r22, r18
    27f0:	73 07       	cpc	r23, r19
    27f2:	81 f4       	brne	.+32     	; 0x2814 <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    27f4:	04 17       	cp	r16, r20
    27f6:	15 07       	cpc	r17, r21
    27f8:	24 f4       	brge	.+8      	; 0x2802 <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    27fa:	8b 2d       	mov	r24, r11
    27fc:	58 01       	movw	r10, r16
    27fe:	04 2f       	mov	r16, r20
    2800:	18 2f       	mov	r17, r24
    2802:	0a 19       	sub	r16, r10
    2804:	1b 09       	sbc	r17, r11
    2806:	98 01       	movw	r18, r16
    2808:	2f 5f       	subi	r18, 0xFF	; 255
    280a:	3f 4f       	sbci	r19, 0xFF	; 255
    280c:	04 8c       	ldd	r0, Z+28	; 0x1c
    280e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2810:	e0 2d       	mov	r30, r0
    2812:	12 c0       	rjmp	.+36     	; 0x2838 <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    2814:	40 17       	cp	r20, r16
    2816:	51 07       	cpc	r21, r17
    2818:	09 f5       	brne	.+66     	; 0x285c <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    281a:	26 17       	cp	r18, r22
    281c:	37 07       	cpc	r19, r23
    281e:	24 f4       	brge	.+8      	; 0x2828 <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    2820:	8d 2d       	mov	r24, r13
    2822:	69 01       	movw	r12, r18
    2824:	c6 2f       	mov	r28, r22
    2826:	d8 2f       	mov	r29, r24
    2828:	9e 01       	movw	r18, r28
    282a:	2c 19       	sub	r18, r12
    282c:	3d 09       	sbc	r19, r13
    282e:	2f 5f       	subi	r18, 0xFF	; 255
    2830:	3f 4f       	sbci	r19, 0xFF	; 255
    2832:	06 8c       	ldd	r0, Z+30	; 0x1e
    2834:	f7 8d       	ldd	r31, Z+31	; 0x1f
    2836:	e0 2d       	mov	r30, r0
    2838:	87 01       	movw	r16, r14
    283a:	a5 01       	movw	r20, r10
    283c:	b6 01       	movw	r22, r12
    283e:	c4 01       	movw	r24, r8
    2840:	09 95       	icall
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	1f 91       	pop	r17
    2848:	0f 91       	pop	r16
    284a:	ff 90       	pop	r15
    284c:	ef 90       	pop	r14
    284e:	df 90       	pop	r13
    2850:	cf 90       	pop	r12
    2852:	bf 90       	pop	r11
    2854:	af 90       	pop	r10
    2856:	9f 90       	pop	r9
    2858:	8f 90       	pop	r8
    285a:	08 95       	ret
    285c:	02 84       	ldd	r0, Z+10	; 0x0a
    285e:	f3 85       	ldd	r31, Z+11	; 0x0b
    2860:	e0 2d       	mov	r30, r0
    2862:	09 95       	icall
    2864:	d4 01       	movw	r26, r8
    2866:	ed 91       	ld	r30, X+
    2868:	fc 91       	ld	r31, X
    286a:	04 88       	ldd	r0, Z+20	; 0x14
    286c:	f5 89       	ldd	r31, Z+21	; 0x15
    286e:	e0 2d       	mov	r30, r0
    2870:	9e 01       	movw	r18, r28
    2872:	a5 01       	movw	r20, r10
    2874:	b6 01       	movw	r22, r12
    2876:	c4 01       	movw	r24, r8
    2878:	09 95       	icall
    287a:	d4 01       	movw	r26, r8
    287c:	ed 91       	ld	r30, X+
    287e:	fc 91       	ld	r31, X
    2880:	06 88       	ldd	r0, Z+22	; 0x16
    2882:	f7 89       	ldd	r31, Z+23	; 0x17
    2884:	e0 2d       	mov	r30, r0
    2886:	c4 01       	movw	r24, r8
    2888:	df 91       	pop	r29
    288a:	cf 91       	pop	r28
    288c:	1f 91       	pop	r17
    288e:	0f 91       	pop	r16
    2890:	ff 90       	pop	r15
    2892:	ef 90       	pop	r14
    2894:	df 90       	pop	r13
    2896:	cf 90       	pop	r12
    2898:	bf 90       	pop	r11
    289a:	af 90       	pop	r10
    289c:	9f 90       	pop	r9
    289e:	8f 90       	pop	r8
    28a0:	09 94       	ijmp

000028a2 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    28a2:	6f 92       	push	r6
    28a4:	7f 92       	push	r7
    28a6:	8f 92       	push	r8
    28a8:	9f 92       	push	r9
    28aa:	af 92       	push	r10
    28ac:	bf 92       	push	r11
    28ae:	cf 92       	push	r12
    28b0:	df 92       	push	r13
    28b2:	ef 92       	push	r14
    28b4:	ff 92       	push	r15
    28b6:	0f 93       	push	r16
    28b8:	1f 93       	push	r17
    28ba:	cf 93       	push	r28
    28bc:	df 93       	push	r29
    28be:	ec 01       	movw	r28, r24
    28c0:	4b 01       	movw	r8, r22
    28c2:	5a 01       	movw	r10, r20
    28c4:	69 01       	movw	r12, r18
    28c6:	38 01       	movw	r6, r16
    28c8:	e8 81       	ld	r30, Y
    28ca:	f9 81       	ldd	r31, Y+1	; 0x01
    28cc:	02 84       	ldd	r0, Z+10	; 0x0a
    28ce:	f3 85       	ldd	r31, Z+11	; 0x0b
    28d0:	e0 2d       	mov	r30, r0
    28d2:	09 95       	icall
    28d4:	e8 81       	ld	r30, Y
    28d6:	f9 81       	ldd	r31, Y+1	; 0x01
    28d8:	02 88       	ldd	r0, Z+18	; 0x12
    28da:	f3 89       	ldd	r31, Z+19	; 0x13
    28dc:	e0 2d       	mov	r30, r0
    28de:	87 01       	movw	r16, r14
    28e0:	96 01       	movw	r18, r12
    28e2:	a5 01       	movw	r20, r10
    28e4:	b4 01       	movw	r22, r8
    28e6:	ce 01       	movw	r24, r28
    28e8:	09 95       	icall
    28ea:	a5 01       	movw	r20, r10
    28ec:	46 0d       	add	r20, r6
    28ee:	57 1d       	adc	r21, r7
    28f0:	41 50       	subi	r20, 0x01	; 1
    28f2:	51 09       	sbc	r21, r1
    28f4:	e8 81       	ld	r30, Y
    28f6:	f9 81       	ldd	r31, Y+1	; 0x01
    28f8:	02 88       	ldd	r0, Z+18	; 0x12
    28fa:	f3 89       	ldd	r31, Z+19	; 0x13
    28fc:	e0 2d       	mov	r30, r0
    28fe:	96 01       	movw	r18, r12
    2900:	b4 01       	movw	r22, r8
    2902:	ce 01       	movw	r24, r28
    2904:	09 95       	icall
    2906:	e8 81       	ld	r30, Y
    2908:	f9 81       	ldd	r31, Y+1	; 0x01
    290a:	00 88       	ldd	r0, Z+16	; 0x10
    290c:	f1 89       	ldd	r31, Z+17	; 0x11
    290e:	e0 2d       	mov	r30, r0
    2910:	93 01       	movw	r18, r6
    2912:	a5 01       	movw	r20, r10
    2914:	b4 01       	movw	r22, r8
    2916:	ce 01       	movw	r24, r28
    2918:	09 95       	icall
    291a:	c8 0c       	add	r12, r8
    291c:	d9 1c       	adc	r13, r9
    291e:	b6 01       	movw	r22, r12
    2920:	61 50       	subi	r22, 0x01	; 1
    2922:	71 09       	sbc	r23, r1
    2924:	e8 81       	ld	r30, Y
    2926:	f9 81       	ldd	r31, Y+1	; 0x01
    2928:	00 88       	ldd	r0, Z+16	; 0x10
    292a:	f1 89       	ldd	r31, Z+17	; 0x11
    292c:	e0 2d       	mov	r30, r0
    292e:	93 01       	movw	r18, r6
    2930:	a5 01       	movw	r20, r10
    2932:	ce 01       	movw	r24, r28
    2934:	09 95       	icall
    2936:	e8 81       	ld	r30, Y
    2938:	f9 81       	ldd	r31, Y+1	; 0x01
    293a:	06 88       	ldd	r0, Z+22	; 0x16
    293c:	f7 89       	ldd	r31, Z+23	; 0x17
    293e:	e0 2d       	mov	r30, r0
    2940:	ce 01       	movw	r24, r28
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	1f 91       	pop	r17
    2948:	0f 91       	pop	r16
    294a:	ff 90       	pop	r15
    294c:	ef 90       	pop	r14
    294e:	df 90       	pop	r13
    2950:	cf 90       	pop	r12
    2952:	bf 90       	pop	r11
    2954:	af 90       	pop	r10
    2956:	9f 90       	pop	r9
    2958:	8f 90       	pop	r8
    295a:	7f 90       	pop	r7
    295c:	6f 90       	pop	r6
    295e:	09 94       	ijmp

00002960 <_ZN12Adafruit_GFX13invertDisplayEb>:
    2960:	08 95       	ret

00002962 <_ZN12Adafruit_GFX11setRotationEh>:
    2962:	fc 01       	movw	r30, r24
    2964:	63 70       	andi	r22, 0x03	; 3
    2966:	65 8b       	std	Z+21, r22	; 0x15
    2968:	84 81       	ldd	r24, Z+4	; 0x04
    296a:	95 81       	ldd	r25, Z+5	; 0x05
    296c:	26 81       	ldd	r18, Z+6	; 0x06
    296e:	37 81       	ldd	r19, Z+7	; 0x07
    2970:	61 30       	cpi	r22, 0x01	; 1
    2972:	39 f0       	breq	.+14     	; 0x2982 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    2974:	63 30       	cpi	r22, 0x03	; 3
    2976:	29 f0       	breq	.+10     	; 0x2982 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    2978:	91 87       	std	Z+9, r25	; 0x09
    297a:	80 87       	std	Z+8, r24	; 0x08
    297c:	33 87       	std	Z+11, r19	; 0x0b
    297e:	22 87       	std	Z+10, r18	; 0x0a
    2980:	08 95       	ret
    2982:	31 87       	std	Z+9, r19	; 0x09
    2984:	20 87       	std	Z+8, r18	; 0x08
    2986:	93 87       	std	Z+11, r25	; 0x0b
    2988:	82 87       	std	Z+10, r24	; 0x0a
    298a:	08 95       	ret

0000298c <_ZN12Adafruit_GFXC1Eii>:
    298c:	fc 01       	movw	r30, r24
    298e:	13 82       	std	Z+3, r1	; 0x03
    2990:	12 82       	std	Z+2, r1	; 0x02
    2992:	85 e4       	ldi	r24, 0x45	; 69
    2994:	91 e0       	ldi	r25, 0x01	; 1
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
    299a:	75 83       	std	Z+5, r23	; 0x05
    299c:	64 83       	std	Z+4, r22	; 0x04
    299e:	57 83       	std	Z+7, r21	; 0x07
    29a0:	46 83       	std	Z+6, r20	; 0x06
    29a2:	71 87       	std	Z+9, r23	; 0x09
    29a4:	60 87       	std	Z+8, r22	; 0x08
    29a6:	53 87       	std	Z+11, r21	; 0x0b
    29a8:	42 87       	std	Z+10, r20	; 0x0a
    29aa:	15 8a       	std	Z+21, r1	; 0x15
    29ac:	15 86       	std	Z+13, r1	; 0x0d
    29ae:	14 86       	std	Z+12, r1	; 0x0c
    29b0:	17 86       	std	Z+15, r1	; 0x0f
    29b2:	16 86       	std	Z+14, r1	; 0x0e
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	84 8b       	std	Z+20, r24	; 0x14
    29b8:	2f ef       	ldi	r18, 0xFF	; 255
    29ba:	3f ef       	ldi	r19, 0xFF	; 255
    29bc:	33 8b       	std	Z+19, r19	; 0x13
    29be:	22 8b       	std	Z+18, r18	; 0x12
    29c0:	31 8b       	std	Z+17, r19	; 0x11
    29c2:	20 8b       	std	Z+16, r18	; 0x10
    29c4:	86 8b       	std	Z+22, r24	; 0x16
    29c6:	17 8a       	std	Z+23, r1	; 0x17
    29c8:	11 8e       	std	Z+25, r1	; 0x19
    29ca:	10 8e       	std	Z+24, r1	; 0x18
    29cc:	08 95       	ret

000029ce <_ZN12Adafruit_GFX8drawCharEiihjjh>:
    29ce:	2f 92       	push	r2
    29d0:	3f 92       	push	r3
    29d2:	4f 92       	push	r4
    29d4:	5f 92       	push	r5
    29d6:	6f 92       	push	r6
    29d8:	7f 92       	push	r7
    29da:	8f 92       	push	r8
    29dc:	9f 92       	push	r9
    29de:	af 92       	push	r10
    29e0:	bf 92       	push	r11
    29e2:	cf 92       	push	r12
    29e4:	df 92       	push	r13
    29e6:	ef 92       	push	r14
    29e8:	ff 92       	push	r15
    29ea:	0f 93       	push	r16
    29ec:	1f 93       	push	r17
    29ee:	cf 93       	push	r28
    29f0:	df 93       	push	r29
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
    29f6:	6b 97       	sbiw	r28, 0x1b	; 27
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	9b 8f       	std	Y+27, r25	; 0x1b
    2a04:	8a 8f       	std	Y+26, r24	; 0x1a
    2a06:	5b 01       	movw	r10, r22
    2a08:	1a 01       	movw	r2, r20
    2a0a:	d2 2e       	mov	r13, r18
    2a0c:	1f 83       	std	Y+7, r17	; 0x07
    2a0e:	0e 83       	std	Y+6, r16	; 0x06
    2a10:	37 01       	movw	r6, r14
    2a12:	c9 82       	std	Y+1, r12	; 0x01
    2a14:	dc 01       	movw	r26, r24
    2a16:	58 96       	adiw	r26, 0x18	; 24
    2a18:	2d 91       	ld	r18, X+
    2a1a:	3c 91       	ld	r19, X
    2a1c:	59 97       	sbiw	r26, 0x19	; 25
    2a1e:	21 15       	cp	r18, r1
    2a20:	31 05       	cpc	r19, r1
    2a22:	09 f0       	breq	.+2      	; 0x2a26 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x58>
    2a24:	e6 c0       	rjmp	.+460    	; 0x2bf2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x224>
    2a26:	18 96       	adiw	r26, 0x08	; 8
    2a28:	8d 91       	ld	r24, X+
    2a2a:	9c 91       	ld	r25, X
    2a2c:	19 97       	sbiw	r26, 0x09	; 9
    2a2e:	68 17       	cp	r22, r24
    2a30:	79 07       	cpc	r23, r25
    2a32:	0c f0       	brlt	.+2      	; 0x2a36 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x68>
    2a34:	cd c1       	rjmp	.+922    	; 0x2dd0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    2a36:	1a 96       	adiw	r26, 0x0a	; 10
    2a38:	8d 91       	ld	r24, X+
    2a3a:	9c 91       	ld	r25, X
    2a3c:	1b 97       	sbiw	r26, 0x0b	; 11
    2a3e:	48 17       	cp	r20, r24
    2a40:	59 07       	cpc	r21, r25
    2a42:	0c f0       	brlt	.+2      	; 0x2a46 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x78>
    2a44:	c5 c1       	rjmp	.+906    	; 0x2dd0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    2a46:	8c 2c       	mov	r8, r12
    2a48:	91 2c       	mov	r9, r1
    2a4a:	fb 01       	movw	r30, r22
    2a4c:	26 e0       	ldi	r18, 0x06	; 6
    2a4e:	c2 9e       	mul	r12, r18
    2a50:	e0 0d       	add	r30, r0
    2a52:	f1 1d       	adc	r31, r1
    2a54:	11 24       	eor	r1, r1
    2a56:	fb 87       	std	Y+11, r31	; 0x0b
    2a58:	ea 87       	std	Y+10, r30	; 0x0a
    2a5a:	1e 16       	cp	r1, r30
    2a5c:	1f 06       	cpc	r1, r31
    2a5e:	0c f0       	brlt	.+2      	; 0x2a62 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x94>
    2a60:	b7 c1       	rjmp	.+878    	; 0x2dd0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    2a62:	a4 01       	movw	r20, r8
    2a64:	83 e0       	ldi	r24, 0x03	; 3
    2a66:	44 0f       	add	r20, r20
    2a68:	55 1f       	adc	r21, r21
    2a6a:	8a 95       	dec	r24
    2a6c:	e1 f7       	brne	.-8      	; 0x2a66 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x98>
    2a6e:	5d 87       	std	Y+13, r21	; 0x0d
    2a70:	4c 87       	std	Y+12, r20	; 0x0c
    2a72:	ca 01       	movw	r24, r20
    2a74:	82 0d       	add	r24, r2
    2a76:	93 1d       	adc	r25, r3
    2a78:	18 16       	cp	r1, r24
    2a7a:	19 06       	cpc	r1, r25
    2a7c:	0c f0       	brlt	.+2      	; 0x2a80 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xb2>
    2a7e:	a8 c1       	rjmp	.+848    	; 0x2dd0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    2a80:	57 96       	adiw	r26, 0x17	; 23
    2a82:	8c 91       	ld	r24, X
    2a84:	81 11       	cpse	r24, r1
    2a86:	04 c0       	rjmp	.+8      	; 0x2a90 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xc2>
    2a88:	5f ea       	ldi	r21, 0xAF	; 175
    2a8a:	5d 15       	cp	r21, r13
    2a8c:	08 f4       	brcc	.+2      	; 0x2a90 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xc2>
    2a8e:	d3 94       	inc	r13
    2a90:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2a92:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2a94:	ed 91       	ld	r30, X+
    2a96:	fc 91       	ld	r31, X
    2a98:	11 97       	sbiw	r26, 0x01	; 1
    2a9a:	02 84       	ldd	r0, Z+10	; 0x0a
    2a9c:	f3 85       	ldd	r31, Z+11	; 0x0b
    2a9e:	e0 2d       	mov	r30, r0
    2aa0:	cd 01       	movw	r24, r26
    2aa2:	09 95       	icall
    2aa4:	b5 e0       	ldi	r27, 0x05	; 5
    2aa6:	db 9e       	mul	r13, r27
    2aa8:	c0 01       	movw	r24, r0
    2aaa:	11 24       	eor	r1, r1
    2aac:	f5 01       	movw	r30, r10
    2aae:	35 96       	adiw	r30, 0x05	; 5
    2ab0:	ff 87       	std	Y+15, r31	; 0x0f
    2ab2:	ee 87       	std	Y+14, r30	; 0x0e
    2ab4:	25 01       	movw	r4, r10
    2ab6:	bb 82       	std	Y+3, r11	; 0x03
    2ab8:	aa 82       	std	Y+2, r10	; 0x02
    2aba:	9c 01       	movw	r18, r24
    2abc:	2a 19       	sub	r18, r10
    2abe:	3b 09       	sbc	r19, r11
    2ac0:	39 8b       	std	Y+17, r19	; 0x11
    2ac2:	28 8b       	std	Y+16, r18	; 0x10
    2ac4:	a1 01       	movw	r20, r2
    2ac6:	48 5f       	subi	r20, 0xF8	; 248
    2ac8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aca:	5b 8b       	std	Y+19, r21	; 0x13
    2acc:	4a 8b       	std	Y+18, r20	; 0x12
    2ace:	e8 89       	ldd	r30, Y+16	; 0x10
    2ad0:	f9 89       	ldd	r31, Y+17	; 0x11
    2ad2:	e4 0d       	add	r30, r4
    2ad4:	f5 1d       	adc	r31, r5
    2ad6:	ec 5f       	subi	r30, 0xFC	; 252
    2ad8:	fe 4f       	sbci	r31, 0xFE	; 254
    2ada:	54 91       	lpm	r21, Z
    2adc:	58 87       	std	Y+8, r21	; 0x08
    2ade:	3d 82       	std	Y+5, r3	; 0x05
    2ae0:	2c 82       	std	Y+4, r2	; 0x04
    2ae2:	61 01       	movw	r12, r2
    2ae4:	88 85       	ldd	r24, Y+8	; 0x08
    2ae6:	80 ff       	sbrs	r24, 0
    2ae8:	13 c0       	rjmp	.+38     	; 0x2b10 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x142>
    2aea:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2aec:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2aee:	ed 91       	ld	r30, X+
    2af0:	fc 91       	ld	r31, X
    2af2:	b9 81       	ldd	r27, Y+1	; 0x01
    2af4:	b1 30       	cpi	r27, 0x01	; 1
    2af6:	31 f4       	brne	.+12     	; 0x2b04 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x136>
    2af8:	04 84       	ldd	r0, Z+12	; 0x0c
    2afa:	f5 85       	ldd	r31, Z+13	; 0x0d
    2afc:	e0 2d       	mov	r30, r0
    2afe:	2e 81       	ldd	r18, Y+6	; 0x06
    2b00:	3f 81       	ldd	r19, Y+7	; 0x07
    2b02:	16 c0       	rjmp	.+44     	; 0x2b30 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x162>
    2b04:	06 84       	ldd	r0, Z+14	; 0x0e
    2b06:	f7 85       	ldd	r31, Z+15	; 0x0f
    2b08:	e0 2d       	mov	r30, r0
    2b0a:	ee 80       	ldd	r14, Y+6	; 0x06
    2b0c:	ff 80       	ldd	r15, Y+7	; 0x07
    2b0e:	1a c0       	rjmp	.+52     	; 0x2b44 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x176>
    2b10:	ee 81       	ldd	r30, Y+6	; 0x06
    2b12:	ff 81       	ldd	r31, Y+7	; 0x07
    2b14:	e6 15       	cp	r30, r6
    2b16:	f7 05       	cpc	r31, r7
    2b18:	f1 f0       	breq	.+60     	; 0x2b56 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x188>
    2b1a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2b1c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2b1e:	ed 91       	ld	r30, X+
    2b20:	fc 91       	ld	r31, X
    2b22:	b9 81       	ldd	r27, Y+1	; 0x01
    2b24:	b1 30       	cpi	r27, 0x01	; 1
    2b26:	51 f4       	brne	.+20     	; 0x2b3c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x16e>
    2b28:	04 84       	ldd	r0, Z+12	; 0x0c
    2b2a:	f5 85       	ldd	r31, Z+13	; 0x0d
    2b2c:	e0 2d       	mov	r30, r0
    2b2e:	93 01       	movw	r18, r6
    2b30:	a6 01       	movw	r20, r12
    2b32:	b2 01       	movw	r22, r4
    2b34:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b36:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b38:	09 95       	icall
    2b3a:	0d c0       	rjmp	.+26     	; 0x2b56 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x188>
    2b3c:	06 84       	ldd	r0, Z+14	; 0x0e
    2b3e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2b40:	e0 2d       	mov	r30, r0
    2b42:	73 01       	movw	r14, r6
    2b44:	84 01       	movw	r16, r8
    2b46:	94 01       	movw	r18, r8
    2b48:	4c 81       	ldd	r20, Y+4	; 0x04
    2b4a:	5d 81       	ldd	r21, Y+5	; 0x05
    2b4c:	6a 81       	ldd	r22, Y+2	; 0x02
    2b4e:	7b 81       	ldd	r23, Y+3	; 0x03
    2b50:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b52:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b54:	09 95       	icall
    2b56:	e8 85       	ldd	r30, Y+8	; 0x08
    2b58:	e6 95       	lsr	r30
    2b5a:	e8 87       	std	Y+8, r30	; 0x08
    2b5c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b5e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b60:	28 0d       	add	r18, r8
    2b62:	39 1d       	adc	r19, r9
    2b64:	3d 83       	std	Y+5, r19	; 0x05
    2b66:	2c 83       	std	Y+4, r18	; 0x04
    2b68:	3f ef       	ldi	r19, 0xFF	; 255
    2b6a:	c3 1a       	sub	r12, r19
    2b6c:	d3 0a       	sbc	r13, r19
    2b6e:	4a 89       	ldd	r20, Y+18	; 0x12
    2b70:	5b 89       	ldd	r21, Y+19	; 0x13
    2b72:	c4 16       	cp	r12, r20
    2b74:	d5 06       	cpc	r13, r21
    2b76:	09 f0       	breq	.+2      	; 0x2b7a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1ac>
    2b78:	b5 cf       	rjmp	.-150    	; 0x2ae4 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x116>
    2b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7e:	88 0d       	add	r24, r8
    2b80:	99 1d       	adc	r25, r9
    2b82:	9b 83       	std	Y+3, r25	; 0x03
    2b84:	8a 83       	std	Y+2, r24	; 0x02
    2b86:	9f ef       	ldi	r25, 0xFF	; 255
    2b88:	49 1a       	sub	r4, r25
    2b8a:	59 0a       	sbc	r5, r25
    2b8c:	ae 85       	ldd	r26, Y+14	; 0x0e
    2b8e:	bf 85       	ldd	r27, Y+15	; 0x0f
    2b90:	4a 16       	cp	r4, r26
    2b92:	5b 06       	cpc	r5, r27
    2b94:	09 f0       	breq	.+2      	; 0x2b98 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1ca>
    2b96:	9b cf       	rjmp	.-202    	; 0x2ace <_ZN12Adafruit_GFX8drawCharEiihjjh+0x100>
    2b98:	ee 81       	ldd	r30, Y+6	; 0x06
    2b9a:	ff 81       	ldd	r31, Y+7	; 0x07
    2b9c:	e6 15       	cp	r30, r6
    2b9e:	f7 05       	cpc	r31, r7
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1d6>
    2ba2:	f4 c0       	rjmp	.+488    	; 0x2d8c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    2ba4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2ba6:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2ba8:	a0 81       	ld	r26, Z
    2baa:	b1 81       	ldd	r27, Z+1	; 0x01
    2bac:	f9 81       	ldd	r31, Y+1	; 0x01
    2bae:	f1 30       	cpi	r31, 0x01	; 1
    2bb0:	79 f4       	brne	.+30     	; 0x2bd0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x202>
    2bb2:	b5 01       	movw	r22, r10
    2bb4:	6b 5f       	subi	r22, 0xFB	; 251
    2bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb8:	50 96       	adiw	r26, 0x10	; 16
    2bba:	ed 91       	ld	r30, X+
    2bbc:	fc 91       	ld	r31, X
    2bbe:	51 97       	sbiw	r26, 0x11	; 17
    2bc0:	83 01       	movw	r16, r6
    2bc2:	28 e0       	ldi	r18, 0x08	; 8
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	a1 01       	movw	r20, r2
    2bc8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2bcc:	09 95       	icall
    2bce:	de c0       	rjmp	.+444    	; 0x2d8c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    2bd0:	6a 85       	ldd	r22, Y+10	; 0x0a
    2bd2:	7b 85       	ldd	r23, Y+11	; 0x0b
    2bd4:	68 19       	sub	r22, r8
    2bd6:	79 09       	sbc	r23, r9
    2bd8:	1e 96       	adiw	r26, 0x0e	; 14
    2bda:	ed 91       	ld	r30, X+
    2bdc:	fc 91       	ld	r31, X
    2bde:	1f 97       	sbiw	r26, 0x0f	; 15
    2be0:	73 01       	movw	r14, r6
    2be2:	0c 85       	ldd	r16, Y+12	; 0x0c
    2be4:	1d 85       	ldd	r17, Y+13	; 0x0d
    2be6:	94 01       	movw	r18, r8
    2be8:	a1 01       	movw	r20, r2
    2bea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bec:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2bee:	09 95       	icall
    2bf0:	cd c0       	rjmp	.+410    	; 0x2d8c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    2bf2:	f9 01       	movw	r30, r18
    2bf4:	34 96       	adiw	r30, 0x04	; 4
    2bf6:	e4 91       	lpm	r30, Z
    2bf8:	de 1a       	sub	r13, r30
    2bfa:	f9 01       	movw	r30, r18
    2bfc:	32 96       	adiw	r30, 0x02	; 2
    2bfe:	85 91       	lpm	r24, Z+
    2c00:	94 91       	lpm	r25, Z
    2c02:	b7 e0       	ldi	r27, 0x07	; 7
    2c04:	db 9e       	mul	r13, r27
    2c06:	80 0d       	add	r24, r0
    2c08:	91 1d       	adc	r25, r1
    2c0a:	11 24       	eor	r1, r1
    2c0c:	f9 01       	movw	r30, r18
    2c0e:	25 91       	lpm	r18, Z+
    2c10:	34 91       	lpm	r19, Z
    2c12:	3b 8b       	std	Y+19, r19	; 0x13
    2c14:	2a 8b       	std	Y+18, r18	; 0x12
    2c16:	fc 01       	movw	r30, r24
    2c18:	25 91       	lpm	r18, Z+
    2c1a:	34 91       	lpm	r19, Z
    2c1c:	29 01       	movw	r4, r18
    2c1e:	fc 01       	movw	r30, r24
    2c20:	32 96       	adiw	r30, 0x02	; 2
    2c22:	c4 90       	lpm	r12, Z
    2c24:	31 96       	adiw	r30, 0x01	; 1
    2c26:	34 91       	lpm	r19, Z
    2c28:	3c 87       	std	Y+12, r19	; 0x0c
    2c2a:	32 96       	adiw	r30, 0x02	; 2
    2c2c:	14 91       	lpm	r17, Z
    2c2e:	31 96       	adiw	r30, 0x01	; 1
    2c30:	d4 90       	lpm	r13, Z
    2c32:	49 81       	ldd	r20, Y+1	; 0x01
    2c34:	42 30       	cpi	r20, 0x02	; 2
    2c36:	58 f0       	brcs	.+22     	; 0x2c4e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x280>
    2c38:	61 2e       	mov	r6, r17
    2c3a:	01 2e       	mov	r0, r17
    2c3c:	00 0c       	add	r0, r0
    2c3e:	77 08       	sbc	r7, r7
    2c40:	8d 2d       	mov	r24, r13
    2c42:	0d 2c       	mov	r0, r13
    2c44:	00 0c       	add	r0, r0
    2c46:	99 0b       	sbc	r25, r25
    2c48:	99 87       	std	Y+9, r25	; 0x09
    2c4a:	88 87       	std	Y+8, r24	; 0x08
    2c4c:	04 c0       	rjmp	.+8      	; 0x2c56 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x288>
    2c4e:	19 86       	std	Y+9, r1	; 0x09
    2c50:	18 86       	std	Y+8, r1	; 0x08
    2c52:	61 2c       	mov	r6, r1
    2c54:	71 2c       	mov	r7, r1
    2c56:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2c58:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2c5a:	ed 91       	ld	r30, X+
    2c5c:	fc 91       	ld	r31, X
    2c5e:	11 97       	sbiw	r26, 0x01	; 1
    2c60:	02 84       	ldd	r0, Z+10	; 0x0a
    2c62:	f3 85       	ldd	r31, Z+11	; 0x0b
    2c64:	e0 2d       	mov	r30, r0
    2c66:	cd 01       	movw	r24, r26
    2c68:	09 95       	icall
    2c6a:	b9 81       	ldd	r27, Y+1	; 0x01
    2c6c:	8b 2e       	mov	r8, r27
    2c6e:	91 2c       	mov	r9, r1
    2c70:	68 9c       	mul	r6, r8
    2c72:	c0 01       	movw	r24, r0
    2c74:	69 9c       	mul	r6, r9
    2c76:	90 0d       	add	r25, r0
    2c78:	78 9c       	mul	r7, r8
    2c7a:	90 0d       	add	r25, r0
    2c7c:	11 24       	eor	r1, r1
    2c7e:	fc 01       	movw	r30, r24
    2c80:	ea 0d       	add	r30, r10
    2c82:	fb 1d       	adc	r31, r11
    2c84:	f9 8b       	std	Y+17, r31	; 0x11
    2c86:	e8 8b       	std	Y+16, r30	; 0x10
    2c88:	1a 82       	std	Y+2, r1	; 0x02
    2c8a:	71 2c       	mov	r7, r1
    2c8c:	61 2c       	mov	r6, r1
    2c8e:	e1 2f       	mov	r30, r17
    2c90:	11 0f       	add	r17, r17
    2c92:	ff 0b       	sbc	r31, r31
    2c94:	95 01       	movw	r18, r10
    2c96:	2e 0f       	add	r18, r30
    2c98:	3f 1f       	adc	r19, r31
    2c9a:	3b 87       	std	Y+11, r19	; 0x0b
    2c9c:	2a 87       	std	Y+10, r18	; 0x0a
    2c9e:	ac 0c       	add	r10, r12
    2ca0:	b1 1c       	adc	r11, r1
    2ca2:	a5 01       	movw	r20, r10
    2ca4:	4e 0f       	add	r20, r30
    2ca6:	5f 1f       	adc	r21, r31
    2ca8:	5f 8b       	std	Y+23, r21	; 0x17
    2caa:	4e 8b       	std	Y+22, r20	; 0x16
    2cac:	c1 01       	movw	r24, r2
    2cae:	8d 0d       	add	r24, r13
    2cb0:	91 1d       	adc	r25, r1
    2cb2:	d7 fc       	sbrc	r13, 7
    2cb4:	9a 95       	dec	r25
    2cb6:	99 8f       	std	Y+25, r25	; 0x19
    2cb8:	88 8f       	std	Y+24, r24	; 0x18
    2cba:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cbc:	69 16       	cp	r6, r25
    2cbe:	08 f0       	brcs	.+2      	; 0x2cc2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2f4>
    2cc0:	65 c0       	rjmp	.+202    	; 0x2d8c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    2cc2:	86 2d       	mov	r24, r6
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	48 85       	ldd	r20, Y+8	; 0x08
    2cc8:	59 85       	ldd	r21, Y+9	; 0x09
    2cca:	48 0f       	add	r20, r24
    2ccc:	59 1f       	adc	r21, r25
    2cce:	48 9d       	mul	r20, r8
    2cd0:	90 01       	movw	r18, r0
    2cd2:	49 9d       	mul	r20, r9
    2cd4:	30 0d       	add	r19, r0
    2cd6:	58 9d       	mul	r21, r8
    2cd8:	30 0d       	add	r19, r0
    2cda:	11 24       	eor	r1, r1
    2cdc:	d1 01       	movw	r26, r2
    2cde:	a2 0f       	add	r26, r18
    2ce0:	b3 1f       	adc	r27, r19
    2ce2:	bf 87       	std	Y+15, r27	; 0x0f
    2ce4:	ae 87       	std	Y+14, r26	; 0x0e
    2ce6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ce8:	bb 84       	ldd	r11, Y+11	; 0x0b
    2cea:	e8 89       	ldd	r30, Y+16	; 0x10
    2cec:	f9 89       	ldd	r31, Y+17	; 0x11
    2cee:	fd 83       	std	Y+5, r31	; 0x05
    2cf0:	ec 83       	std	Y+4, r30	; 0x04
    2cf2:	da 80       	ldd	r13, Y+2	; 0x02
    2cf4:	fa 85       	ldd	r31, Y+10	; 0x0a
    2cf6:	df 1a       	sub	r13, r31
    2cf8:	28 8d       	ldd	r18, Y+24	; 0x18
    2cfa:	39 8d       	ldd	r19, Y+25	; 0x19
    2cfc:	28 0f       	add	r18, r24
    2cfe:	39 1f       	adc	r19, r25
    2d00:	3d 8b       	std	Y+21, r19	; 0x15
    2d02:	2c 8b       	std	Y+20, r18	; 0x14
    2d04:	8d 2d       	mov	r24, r13
    2d06:	8a 0d       	add	r24, r10
    2d08:	4e 89       	ldd	r20, Y+22	; 0x16
    2d0a:	5f 89       	ldd	r21, Y+23	; 0x17
    2d0c:	a4 16       	cp	r10, r20
    2d0e:	b5 06       	cpc	r11, r21
    2d10:	c1 f1       	breq	.+112    	; 0x2d82 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3b4>
    2d12:	87 70       	andi	r24, 0x07	; 7
    2d14:	41 f4       	brne	.+16     	; 0x2d26 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x358>
    2d16:	c2 01       	movw	r24, r4
    2d18:	01 96       	adiw	r24, 0x01	; 1
    2d1a:	ea 89       	ldd	r30, Y+18	; 0x12
    2d1c:	fb 89       	ldd	r31, Y+19	; 0x13
    2d1e:	e4 0d       	add	r30, r4
    2d20:	f5 1d       	adc	r31, r5
    2d22:	74 90       	lpm	r7, Z
    2d24:	2c 01       	movw	r4, r24
    2d26:	77 fe       	sbrs	r7, 7
    2d28:	21 c0       	rjmp	.+66     	; 0x2d6c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x39e>
    2d2a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2d2c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2d2e:	ed 91       	ld	r30, X+
    2d30:	fc 91       	ld	r31, X
    2d32:	b9 81       	ldd	r27, Y+1	; 0x01
    2d34:	b1 30       	cpi	r27, 0x01	; 1
    2d36:	61 f4       	brne	.+24     	; 0x2d50 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x382>
    2d38:	04 84       	ldd	r0, Z+12	; 0x0c
    2d3a:	f5 85       	ldd	r31, Z+13	; 0x0d
    2d3c:	e0 2d       	mov	r30, r0
    2d3e:	2e 81       	ldd	r18, Y+6	; 0x06
    2d40:	3f 81       	ldd	r19, Y+7	; 0x07
    2d42:	4c 89       	ldd	r20, Y+20	; 0x14
    2d44:	5d 89       	ldd	r21, Y+21	; 0x15
    2d46:	b5 01       	movw	r22, r10
    2d48:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d4a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d4c:	09 95       	icall
    2d4e:	0e c0       	rjmp	.+28     	; 0x2d6c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x39e>
    2d50:	06 84       	ldd	r0, Z+14	; 0x0e
    2d52:	f7 85       	ldd	r31, Z+15	; 0x0f
    2d54:	e0 2d       	mov	r30, r0
    2d56:	ee 80       	ldd	r14, Y+6	; 0x06
    2d58:	ff 80       	ldd	r15, Y+7	; 0x07
    2d5a:	84 01       	movw	r16, r8
    2d5c:	94 01       	movw	r18, r8
    2d5e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2d60:	5f 85       	ldd	r21, Y+15	; 0x0f
    2d62:	6c 81       	ldd	r22, Y+4	; 0x04
    2d64:	7d 81       	ldd	r23, Y+5	; 0x05
    2d66:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d68:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d6a:	09 95       	icall
    2d6c:	77 0c       	add	r7, r7
    2d6e:	ec 81       	ldd	r30, Y+4	; 0x04
    2d70:	fd 81       	ldd	r31, Y+5	; 0x05
    2d72:	e8 0d       	add	r30, r8
    2d74:	f9 1d       	adc	r31, r9
    2d76:	fd 83       	std	Y+5, r31	; 0x05
    2d78:	ec 83       	std	Y+4, r30	; 0x04
    2d7a:	ff ef       	ldi	r31, 0xFF	; 255
    2d7c:	af 1a       	sub	r10, r31
    2d7e:	bf 0a       	sbc	r11, r31
    2d80:	c1 cf       	rjmp	.-126    	; 0x2d04 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x336>
    2d82:	2a 81       	ldd	r18, Y+2	; 0x02
    2d84:	2c 0d       	add	r18, r12
    2d86:	2a 83       	std	Y+2, r18	; 0x02
    2d88:	63 94       	inc	r6
    2d8a:	97 cf       	rjmp	.-210    	; 0x2cba <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2ec>
    2d8c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2d8e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2d90:	ed 91       	ld	r30, X+
    2d92:	fc 91       	ld	r31, X
    2d94:	11 97       	sbiw	r26, 0x01	; 1
    2d96:	06 88       	ldd	r0, Z+22	; 0x16
    2d98:	f7 89       	ldd	r31, Z+23	; 0x17
    2d9a:	e0 2d       	mov	r30, r0
    2d9c:	cd 01       	movw	r24, r26
    2d9e:	6b 96       	adiw	r28, 0x1b	; 27
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	de bf       	out	0x3e, r29	; 62
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	cd bf       	out	0x3d, r28	; 61
    2daa:	df 91       	pop	r29
    2dac:	cf 91       	pop	r28
    2dae:	1f 91       	pop	r17
    2db0:	0f 91       	pop	r16
    2db2:	ff 90       	pop	r15
    2db4:	ef 90       	pop	r14
    2db6:	df 90       	pop	r13
    2db8:	cf 90       	pop	r12
    2dba:	bf 90       	pop	r11
    2dbc:	af 90       	pop	r10
    2dbe:	9f 90       	pop	r9
    2dc0:	8f 90       	pop	r8
    2dc2:	7f 90       	pop	r7
    2dc4:	6f 90       	pop	r6
    2dc6:	5f 90       	pop	r5
    2dc8:	4f 90       	pop	r4
    2dca:	3f 90       	pop	r3
    2dcc:	2f 90       	pop	r2
    2dce:	09 94       	ijmp
    2dd0:	6b 96       	adiw	r28, 0x1b	; 27
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	f8 94       	cli
    2dd6:	de bf       	out	0x3e, r29	; 62
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	cd bf       	out	0x3d, r28	; 61
    2ddc:	df 91       	pop	r29
    2dde:	cf 91       	pop	r28
    2de0:	1f 91       	pop	r17
    2de2:	0f 91       	pop	r16
    2de4:	ff 90       	pop	r15
    2de6:	ef 90       	pop	r14
    2de8:	df 90       	pop	r13
    2dea:	cf 90       	pop	r12
    2dec:	bf 90       	pop	r11
    2dee:	af 90       	pop	r10
    2df0:	9f 90       	pop	r9
    2df2:	8f 90       	pop	r8
    2df4:	7f 90       	pop	r7
    2df6:	6f 90       	pop	r6
    2df8:	5f 90       	pop	r5
    2dfa:	4f 90       	pop	r4
    2dfc:	3f 90       	pop	r3
    2dfe:	2f 90       	pop	r2
    2e00:	08 95       	ret

00002e02 <_ZN12Adafruit_GFX5writeEh>:
    2e02:	af 92       	push	r10
    2e04:	bf 92       	push	r11
    2e06:	cf 92       	push	r12
    2e08:	ef 92       	push	r14
    2e0a:	ff 92       	push	r15
    2e0c:	0f 93       	push	r16
    2e0e:	1f 93       	push	r17
    2e10:	cf 93       	push	r28
    2e12:	df 93       	push	r29
    2e14:	ec 01       	movw	r28, r24
    2e16:	26 2f       	mov	r18, r22
    2e18:	88 8d       	ldd	r24, Y+24	; 0x18
    2e1a:	99 8d       	ldd	r25, Y+25	; 0x19
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	09 f0       	breq	.+2      	; 0x2e22 <_ZN12Adafruit_GFX5writeEh+0x20>
    2e20:	40 c0       	rjmp	.+128    	; 0x2ea2 <_ZN12Adafruit_GFX5writeEh+0xa0>
    2e22:	6a 30       	cpi	r22, 0x0A	; 10
    2e24:	59 f4       	brne	.+22     	; 0x2e3c <_ZN12Adafruit_GFX5writeEh+0x3a>
    2e26:	1d 86       	std	Y+13, r1	; 0x0d
    2e28:	1c 86       	std	Y+12, r1	; 0x0c
    2e2a:	2c 89       	ldd	r18, Y+20	; 0x14
    2e2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e30:	38 e0       	ldi	r19, 0x08	; 8
    2e32:	23 9f       	mul	r18, r19
    2e34:	80 0d       	add	r24, r0
    2e36:	91 1d       	adc	r25, r1
    2e38:	11 24       	eor	r1, r1
    2e3a:	41 c0       	rjmp	.+130    	; 0x2ebe <_ZN12Adafruit_GFX5writeEh+0xbc>
    2e3c:	6d 30       	cpi	r22, 0x0D	; 13
    2e3e:	09 f4       	brne	.+2      	; 0x2e42 <_ZN12Adafruit_GFX5writeEh+0x40>
    2e40:	aa c0       	rjmp	.+340    	; 0x2f96 <_ZN12Adafruit_GFX5writeEh+0x194>
    2e42:	8e 89       	ldd	r24, Y+22	; 0x16
    2e44:	88 23       	and	r24, r24
    2e46:	c1 f0       	breq	.+48     	; 0x2e78 <_ZN12Adafruit_GFX5writeEh+0x76>
    2e48:	3c 89       	ldd	r19, Y+20	; 0x14
    2e4a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e4c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e4e:	46 e0       	ldi	r20, 0x06	; 6
    2e50:	34 9f       	mul	r19, r20
    2e52:	80 0d       	add	r24, r0
    2e54:	91 1d       	adc	r25, r1
    2e56:	11 24       	eor	r1, r1
    2e58:	48 85       	ldd	r20, Y+8	; 0x08
    2e5a:	59 85       	ldd	r21, Y+9	; 0x09
    2e5c:	48 17       	cp	r20, r24
    2e5e:	59 07       	cpc	r21, r25
    2e60:	5c f4       	brge	.+22     	; 0x2e78 <_ZN12Adafruit_GFX5writeEh+0x76>
    2e62:	1d 86       	std	Y+13, r1	; 0x0d
    2e64:	1c 86       	std	Y+12, r1	; 0x0c
    2e66:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e68:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e6a:	48 e0       	ldi	r20, 0x08	; 8
    2e6c:	34 9f       	mul	r19, r20
    2e6e:	80 0d       	add	r24, r0
    2e70:	91 1d       	adc	r25, r1
    2e72:	11 24       	eor	r1, r1
    2e74:	9f 87       	std	Y+15, r25	; 0x0f
    2e76:	8e 87       	std	Y+14, r24	; 0x0e
    2e78:	ea 88       	ldd	r14, Y+18	; 0x12
    2e7a:	fb 88       	ldd	r15, Y+19	; 0x13
    2e7c:	08 89       	ldd	r16, Y+16	; 0x10
    2e7e:	19 89       	ldd	r17, Y+17	; 0x11
    2e80:	4e 85       	ldd	r20, Y+14	; 0x0e
    2e82:	5f 85       	ldd	r21, Y+15	; 0x0f
    2e84:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e86:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e88:	cc 88       	ldd	r12, Y+20	; 0x14
    2e8a:	ce 01       	movw	r24, r28
    2e8c:	0e 94 e7 14 	call	0x29ce	; 0x29ce <_ZN12Adafruit_GFX8drawCharEiihjjh>
    2e90:	2c 89       	ldd	r18, Y+20	; 0x14
    2e92:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e94:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e96:	36 e0       	ldi	r19, 0x06	; 6
    2e98:	23 9f       	mul	r18, r19
    2e9a:	80 0d       	add	r24, r0
    2e9c:	91 1d       	adc	r25, r1
    2e9e:	11 24       	eor	r1, r1
    2ea0:	42 c0       	rjmp	.+132    	; 0x2f26 <_ZN12Adafruit_GFX5writeEh+0x124>
    2ea2:	6a 30       	cpi	r22, 0x0A	; 10
    2ea4:	79 f4       	brne	.+30     	; 0x2ec4 <_ZN12Adafruit_GFX5writeEh+0xc2>
    2ea6:	1d 86       	std	Y+13, r1	; 0x0d
    2ea8:	1c 86       	std	Y+12, r1	; 0x0c
    2eaa:	2c 89       	ldd	r18, Y+20	; 0x14
    2eac:	fc 01       	movw	r30, r24
    2eae:	36 96       	adiw	r30, 0x06	; 6
    2eb0:	e4 91       	lpm	r30, Z
    2eb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eb4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2eb6:	2e 9f       	mul	r18, r30
    2eb8:	80 0d       	add	r24, r0
    2eba:	91 1d       	adc	r25, r1
    2ebc:	11 24       	eor	r1, r1
    2ebe:	9f 87       	std	Y+15, r25	; 0x0f
    2ec0:	8e 87       	std	Y+14, r24	; 0x0e
    2ec2:	69 c0       	rjmp	.+210    	; 0x2f96 <_ZN12Adafruit_GFX5writeEh+0x194>
    2ec4:	6d 30       	cpi	r22, 0x0D	; 13
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <_ZN12Adafruit_GFX5writeEh+0xc8>
    2ec8:	66 c0       	rjmp	.+204    	; 0x2f96 <_ZN12Adafruit_GFX5writeEh+0x194>
    2eca:	fc 01       	movw	r30, r24
    2ecc:	34 96       	adiw	r30, 0x04	; 4
    2ece:	34 91       	lpm	r19, Z
    2ed0:	63 17       	cp	r22, r19
    2ed2:	08 f4       	brcc	.+2      	; 0x2ed6 <_ZN12Adafruit_GFX5writeEh+0xd4>
    2ed4:	60 c0       	rjmp	.+192    	; 0x2f96 <_ZN12Adafruit_GFX5writeEh+0x194>
    2ed6:	31 96       	adiw	r30, 0x01	; 1
    2ed8:	e4 91       	lpm	r30, Z
    2eda:	e6 17       	cp	r30, r22
    2edc:	08 f4       	brcc	.+2      	; 0x2ee0 <_ZN12Adafruit_GFX5writeEh+0xde>
    2ede:	5b c0       	rjmp	.+182    	; 0x2f96 <_ZN12Adafruit_GFX5writeEh+0x194>
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	32 96       	adiw	r30, 0x02	; 2
    2ee4:	65 91       	lpm	r22, Z+
    2ee6:	74 91       	lpm	r23, Z
    2ee8:	42 2f       	mov	r20, r18
    2eea:	50 e0       	ldi	r21, 0x00	; 0
    2eec:	43 1b       	sub	r20, r19
    2eee:	51 09       	sbc	r21, r1
    2ef0:	37 e0       	ldi	r19, 0x07	; 7
    2ef2:	34 9f       	mul	r19, r20
    2ef4:	50 01       	movw	r10, r0
    2ef6:	35 9f       	mul	r19, r21
    2ef8:	b0 0c       	add	r11, r0
    2efa:	11 24       	eor	r1, r1
    2efc:	a6 0e       	add	r10, r22
    2efe:	b7 1e       	adc	r11, r23
    2f00:	f5 01       	movw	r30, r10
    2f02:	32 96       	adiw	r30, 0x02	; 2
    2f04:	34 91       	lpm	r19, Z
    2f06:	31 96       	adiw	r30, 0x01	; 1
    2f08:	e4 91       	lpm	r30, Z
    2f0a:	33 23       	and	r19, r19
    2f0c:	11 f0       	breq	.+4      	; 0x2f12 <_ZN12Adafruit_GFX5writeEh+0x110>
    2f0e:	e1 11       	cpse	r30, r1
    2f10:	0d c0       	rjmp	.+26     	; 0x2f2c <_ZN12Adafruit_GFX5writeEh+0x12a>
    2f12:	f5 01       	movw	r30, r10
    2f14:	34 96       	adiw	r30, 0x04	; 4
    2f16:	e4 91       	lpm	r30, Z
    2f18:	2c 89       	ldd	r18, Y+20	; 0x14
    2f1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f1e:	e2 9f       	mul	r30, r18
    2f20:	80 0d       	add	r24, r0
    2f22:	91 1d       	adc	r25, r1
    2f24:	11 24       	eor	r1, r1
    2f26:	9d 87       	std	Y+13, r25	; 0x0d
    2f28:	8c 87       	std	Y+12, r24	; 0x0c
    2f2a:	35 c0       	rjmp	.+106    	; 0x2f96 <_ZN12Adafruit_GFX5writeEh+0x194>
    2f2c:	f5 01       	movw	r30, r10
    2f2e:	35 96       	adiw	r30, 0x05	; 5
    2f30:	44 91       	lpm	r20, Z
    2f32:	5e 89       	ldd	r21, Y+22	; 0x16
    2f34:	55 23       	and	r21, r21
    2f36:	11 f1       	breq	.+68     	; 0x2f7c <_ZN12Adafruit_GFX5writeEh+0x17a>
    2f38:	6c 89       	ldd	r22, Y+20	; 0x14
    2f3a:	e3 2f       	mov	r30, r19
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	e4 0f       	add	r30, r20
    2f40:	f1 1d       	adc	r31, r1
    2f42:	47 fd       	sbrc	r20, 7
    2f44:	fa 95       	dec	r31
    2f46:	6e 9f       	mul	r22, r30
    2f48:	d0 01       	movw	r26, r0
    2f4a:	6f 9f       	mul	r22, r31
    2f4c:	b0 0d       	add	r27, r0
    2f4e:	11 24       	eor	r1, r1
    2f50:	4c 85       	ldd	r20, Y+12	; 0x0c
    2f52:	5d 85       	ldd	r21, Y+13	; 0x0d
    2f54:	4a 0f       	add	r20, r26
    2f56:	5b 1f       	adc	r21, r27
    2f58:	e8 85       	ldd	r30, Y+8	; 0x08
    2f5a:	f9 85       	ldd	r31, Y+9	; 0x09
    2f5c:	e4 17       	cp	r30, r20
    2f5e:	f5 07       	cpc	r31, r21
    2f60:	6c f4       	brge	.+26     	; 0x2f7c <_ZN12Adafruit_GFX5writeEh+0x17a>
    2f62:	1d 86       	std	Y+13, r1	; 0x0d
    2f64:	1c 86       	std	Y+12, r1	; 0x0c
    2f66:	fc 01       	movw	r30, r24
    2f68:	36 96       	adiw	r30, 0x06	; 6
    2f6a:	e4 91       	lpm	r30, Z
    2f6c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f6e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f70:	6e 9f       	mul	r22, r30
    2f72:	80 0d       	add	r24, r0
    2f74:	91 1d       	adc	r25, r1
    2f76:	11 24       	eor	r1, r1
    2f78:	9f 87       	std	Y+15, r25	; 0x0f
    2f7a:	8e 87       	std	Y+14, r24	; 0x0e
    2f7c:	ea 88       	ldd	r14, Y+18	; 0x12
    2f7e:	fb 88       	ldd	r15, Y+19	; 0x13
    2f80:	08 89       	ldd	r16, Y+16	; 0x10
    2f82:	19 89       	ldd	r17, Y+17	; 0x11
    2f84:	4e 85       	ldd	r20, Y+14	; 0x0e
    2f86:	5f 85       	ldd	r21, Y+15	; 0x0f
    2f88:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f8a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f8c:	cc 88       	ldd	r12, Y+20	; 0x14
    2f8e:	ce 01       	movw	r24, r28
    2f90:	0e 94 e7 14 	call	0x29ce	; 0x29ce <_ZN12Adafruit_GFX8drawCharEiihjjh>
    2f94:	be cf       	rjmp	.-132    	; 0x2f12 <_ZN12Adafruit_GFX5writeEh+0x110>
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	df 91       	pop	r29
    2f9c:	cf 91       	pop	r28
    2f9e:	1f 91       	pop	r17
    2fa0:	0f 91       	pop	r16
    2fa2:	ff 90       	pop	r15
    2fa4:	ef 90       	pop	r14
    2fa6:	cf 90       	pop	r12
    2fa8:	bf 90       	pop	r11
    2faa:	af 90       	pop	r10
    2fac:	08 95       	ret

00002fae <_ZN12Adafruit_GFX9setCursorEii>:
    2fae:	fc 01       	movw	r30, r24
    2fb0:	75 87       	std	Z+13, r23	; 0x0d
    2fb2:	64 87       	std	Z+12, r22	; 0x0c
    2fb4:	57 87       	std	Z+15, r21	; 0x0f
    2fb6:	46 87       	std	Z+14, r20	; 0x0e
    2fb8:	08 95       	ret

00002fba <_ZN12Adafruit_GFX12setTextColorEj>:
    2fba:	fc 01       	movw	r30, r24
    2fbc:	73 8b       	std	Z+19, r23	; 0x13
    2fbe:	62 8b       	std	Z+18, r22	; 0x12
    2fc0:	71 8b       	std	Z+17, r23	; 0x11
    2fc2:	60 8b       	std	Z+16, r22	; 0x10
    2fc4:	08 95       	ret

00002fc6 <_ZNK12Adafruit_GFX5widthEv>:

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) const {
    return _width;
}
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	80 85       	ldd	r24, Z+8	; 0x08
    2fca:	91 85       	ldd	r25, Z+9	; 0x09
    2fcc:	08 95       	ret

00002fce <_ZNK12Adafruit_GFX6heightEv>:

int16_t Adafruit_GFX::height(void) const {
    return _height;
}
    2fce:	fc 01       	movw	r30, r24
    2fd0:	82 85       	ldd	r24, Z+10	; 0x0a
    2fd2:	93 85       	ldd	r25, Z+11	; 0x0b
    2fd4:	08 95       	ret

00002fd6 <_ZN15Adafruit_ST773510fillScreenEj>:
  CS_HIGH();

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)    SPI.endTransaction();
#endif
}
    2fd6:	ef 92       	push	r14
    2fd8:	ff 92       	push	r15
    2fda:	0f 93       	push	r16
    2fdc:	1f 93       	push	r17
    2fde:	dc 01       	movw	r26, r24
    2fe0:	1a 96       	adiw	r26, 0x0a	; 10
    2fe2:	0d 91       	ld	r16, X+
    2fe4:	1c 91       	ld	r17, X
    2fe6:	1b 97       	sbiw	r26, 0x0b	; 11
    2fe8:	18 96       	adiw	r26, 0x08	; 8
    2fea:	2d 91       	ld	r18, X+
    2fec:	3c 91       	ld	r19, X
    2fee:	19 97       	sbiw	r26, 0x09	; 9
    2ff0:	ed 91       	ld	r30, X+
    2ff2:	fc 91       	ld	r31, X
    2ff4:	00 a0       	ldd	r0, Z+32	; 0x20
    2ff6:	f1 a1       	ldd	r31, Z+33	; 0x21
    2ff8:	e0 2d       	mov	r30, r0
    2ffa:	7b 01       	movw	r14, r22
    2ffc:	40 e0       	ldi	r20, 0x00	; 0
    2ffe:	50 e0       	ldi	r21, 0x00	; 0
    3000:	60 e0       	ldi	r22, 0x00	; 0
    3002:	70 e0       	ldi	r23, 0x00	; 0
    3004:	09 95       	icall
    3006:	1f 91       	pop	r17
    3008:	0f 91       	pop	r16
    300a:	ff 90       	pop	r15
    300c:	ef 90       	pop	r14
    300e:	08 95       	ret

00003010 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    3010:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <_ZN8SPIClass13interruptModeE>
    3014:	22 23       	and	r18, r18
    3016:	99 f0       	breq	.+38     	; 0x303e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    3018:	4f b7       	in	r20, 0x3f	; 63
    301a:	f8 94       	cli
    301c:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <_ZN8SPIClass13interruptModeE>
    3020:	21 30       	cpi	r18, 0x01	; 1
    3022:	59 f4       	brne	.+22     	; 0x303a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    3024:	2d b3       	in	r18, 0x1d	; 29
    3026:	20 93 87 03 	sts	0x0387, r18	; 0x800387 <_ZN8SPIClass13interruptSaveE>
    302a:	3d b3       	in	r19, 0x1d	; 29
    302c:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <_ZN8SPIClass13interruptMaskE>
    3030:	20 95       	com	r18
    3032:	23 23       	and	r18, r19
    3034:	2d bb       	out	0x1d, r18	; 29
    3036:	4f bf       	out	0x3f, r20	; 63
    3038:	02 c0       	rjmp	.+4      	; 0x303e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    303a:	40 93 87 03 	sts	0x0387, r20	; 0x800387 <_ZN8SPIClass13interruptSaveE>
    303e:	8c bd       	out	0x2c, r24	; 44
    3040:	9d bd       	out	0x2d, r25	; 45
    3042:	08 95       	ret

00003044 <_ZN8SPIClass14endTransactionEv>:
    3044:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <_ZN8SPIClass13interruptModeE>
    3048:	88 23       	and	r24, r24
    304a:	61 f0       	breq	.+24     	; 0x3064 <_ZN8SPIClass14endTransactionEv+0x20>
    304c:	9f b7       	in	r25, 0x3f	; 63
    304e:	f8 94       	cli
    3050:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <_ZN8SPIClass13interruptModeE>
    3054:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <_ZN8SPIClass13interruptSaveE>
    3058:	21 30       	cpi	r18, 0x01	; 1
    305a:	19 f4       	brne	.+6      	; 0x3062 <_ZN8SPIClass14endTransactionEv+0x1e>
    305c:	8d bb       	out	0x1d, r24	; 29
    305e:	9f bf       	out	0x3f, r25	; 63
    3060:	08 95       	ret
    3062:	8f bf       	out	0x3f, r24	; 63
    3064:	08 95       	ret

00003066 <_ZN15Adafruit_ST7735C1Eaaa>:
    3066:	ff 92       	push	r15
    3068:	0f 93       	push	r16
    306a:	1f 93       	push	r17
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
    3070:	ec 01       	movw	r28, r24
    3072:	f6 2e       	mov	r15, r22
    3074:	04 2f       	mov	r16, r20
    3076:	12 2f       	mov	r17, r18
    3078:	40 ea       	ldi	r20, 0xA0	; 160
    307a:	50 e0       	ldi	r21, 0x00	; 0
    307c:	60 e8       	ldi	r22, 0x80	; 128
    307e:	70 e0       	ldi	r23, 0x00	; 0
    3080:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN12Adafruit_GFXC1Eii>
    3084:	81 e7       	ldi	r24, 0x71	; 113
    3086:	91 e0       	ldi	r25, 0x01	; 1
    3088:	99 83       	std	Y+1, r25	; 0x01
    308a:	88 83       	st	Y, r24
    308c:	fc 8e       	std	Y+28, r15	; 0x1c
    308e:	0d 8f       	std	Y+29, r16	; 0x1d
    3090:	1e 8f       	std	Y+30, r17	; 0x1e
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	8b 8f       	std	Y+27, r24	; 0x1b
    3096:	8f ef       	ldi	r24, 0xFF	; 255
    3098:	88 a3       	std	Y+32, r24	; 0x20
    309a:	8f 8f       	std	Y+31, r24	; 0x1f
    309c:	df 91       	pop	r29
    309e:	cf 91       	pop	r28
    30a0:	1f 91       	pop	r17
    30a2:	0f 91       	pop	r16
    30a4:	ff 90       	pop	r15
    30a6:	08 95       	ret

000030a8 <_ZN15Adafruit_ST77358spiwriteEh>:
    30a8:	fc 01       	movw	r30, r24
    30aa:	83 8d       	ldd	r24, Z+27	; 0x1b
    30ac:	88 23       	and	r24, r24
    30ae:	39 f0       	breq	.+14     	; 0x30be <_ZN15Adafruit_ST77358spiwriteEh+0x16>
    30b0:	6e bd       	out	0x2e, r22	; 46
    30b2:	00 00       	nop
    30b4:	0d b4       	in	r0, 0x2d	; 45
    30b6:	07 fe       	sbrs	r0, 7
    30b8:	fd cf       	rjmp	.-6      	; 0x30b4 <_ZN15Adafruit_ST77358spiwriteEh+0xc>
    30ba:	8e b5       	in	r24, 0x2e	; 46
    30bc:	08 95       	ret
    30be:	28 e0       	ldi	r18, 0x08	; 8
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	90 e8       	ldi	r25, 0x80	; 128
    30c4:	a5 a1       	ldd	r26, Z+37	; 0x25
    30c6:	b6 a1       	ldd	r27, Z+38	; 0x26
    30c8:	85 a5       	ldd	r24, Z+45	; 0x2d
    30ca:	46 2f       	mov	r20, r22
    30cc:	49 23       	and	r20, r25
    30ce:	19 f0       	breq	.+6      	; 0x30d6 <_ZN15Adafruit_ST77358spiwriteEh+0x2e>
    30d0:	4c 91       	ld	r20, X
    30d2:	84 2b       	or	r24, r20
    30d4:	03 c0       	rjmp	.+6      	; 0x30dc <_ZN15Adafruit_ST77358spiwriteEh+0x34>
    30d6:	4c 91       	ld	r20, X
    30d8:	80 95       	com	r24
    30da:	84 23       	and	r24, r20
    30dc:	8c 93       	st	X, r24
    30de:	a7 a1       	ldd	r26, Z+39	; 0x27
    30e0:	b0 a5       	ldd	r27, Z+40	; 0x28
    30e2:	4c 91       	ld	r20, X
    30e4:	86 a5       	ldd	r24, Z+46	; 0x2e
    30e6:	84 2b       	or	r24, r20
    30e8:	8c 93       	st	X, r24
    30ea:	a7 a1       	ldd	r26, Z+39	; 0x27
    30ec:	b0 a5       	ldd	r27, Z+40	; 0x28
    30ee:	4c 91       	ld	r20, X
    30f0:	86 a5       	ldd	r24, Z+46	; 0x2e
    30f2:	80 95       	com	r24
    30f4:	84 23       	and	r24, r20
    30f6:	8c 93       	st	X, r24
    30f8:	96 95       	lsr	r25
    30fa:	21 50       	subi	r18, 0x01	; 1
    30fc:	31 09       	sbc	r19, r1
    30fe:	11 f7       	brne	.-60     	; 0x30c4 <_ZN15Adafruit_ST77358spiwriteEh+0x1c>
    3100:	08 95       	ret

00003102 <_ZN15Adafruit_ST77357CS_HIGHEv>:
    3102:	dc 01       	movw	r26, r24
    3104:	99 96       	adiw	r26, 0x29	; 41
    3106:	ed 91       	ld	r30, X+
    3108:	fc 91       	ld	r31, X
    310a:	9a 97       	sbiw	r26, 0x2a	; 42
    310c:	90 81       	ld	r25, Z
    310e:	9f 96       	adiw	r26, 0x2f	; 47
    3110:	8c 91       	ld	r24, X
    3112:	89 2b       	or	r24, r25
    3114:	80 83       	st	Z, r24
    3116:	08 95       	ret

00003118 <_ZN15Adafruit_ST77356CS_LOWEv>:
    3118:	dc 01       	movw	r26, r24
    311a:	99 96       	adiw	r26, 0x29	; 41
    311c:	ed 91       	ld	r30, X+
    311e:	fc 91       	ld	r31, X
    3120:	9a 97       	sbiw	r26, 0x2a	; 42
    3122:	90 81       	ld	r25, Z
    3124:	9f 96       	adiw	r26, 0x2f	; 47
    3126:	8c 91       	ld	r24, X
    3128:	80 95       	com	r24
    312a:	89 23       	and	r24, r25
    312c:	80 83       	st	Z, r24
    312e:	08 95       	ret

00003130 <_ZN15Adafruit_ST773512writecommandEh>:
    3130:	1f 93       	push	r17
    3132:	cf 93       	push	r28
    3134:	df 93       	push	r29
    3136:	ec 01       	movw	r28, r24
    3138:	16 2f       	mov	r17, r22
    313a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    313c:	88 23       	and	r24, r24
    313e:	31 f0       	breq	.+12     	; 0x314c <_ZN15Adafruit_ST773512writecommandEh+0x1c>
    3140:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZL13mySPISettings>
    3144:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <_ZL13mySPISettings+0x1>
    3148:	0e 94 08 18 	call	0x3010	; 0x3010 <_ZN8SPIClass16beginTransactionE11SPISettings>
    314c:	eb a5       	ldd	r30, Y+43	; 0x2b
    314e:	fc a5       	ldd	r31, Y+44	; 0x2c
    3150:	90 81       	ld	r25, Z
    3152:	88 a9       	ldd	r24, Y+48	; 0x30
    3154:	80 95       	com	r24
    3156:	89 23       	and	r24, r25
    3158:	80 83       	st	Z, r24
    315a:	ce 01       	movw	r24, r28
    315c:	0e 94 8c 18 	call	0x3118	; 0x3118 <_ZN15Adafruit_ST77356CS_LOWEv>
    3160:	61 2f       	mov	r22, r17
    3162:	ce 01       	movw	r24, r28
    3164:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN15Adafruit_ST77358spiwriteEh>
    3168:	ce 01       	movw	r24, r28
    316a:	0e 94 81 18 	call	0x3102	; 0x3102 <_ZN15Adafruit_ST77357CS_HIGHEv>
    316e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3170:	88 23       	and	r24, r24
    3172:	29 f0       	breq	.+10     	; 0x317e <_ZN15Adafruit_ST773512writecommandEh+0x4e>
    3174:	df 91       	pop	r29
    3176:	cf 91       	pop	r28
    3178:	1f 91       	pop	r17
    317a:	0c 94 22 18 	jmp	0x3044	; 0x3044 <_ZN8SPIClass14endTransactionEv>
    317e:	df 91       	pop	r29
    3180:	cf 91       	pop	r28
    3182:	1f 91       	pop	r17
    3184:	08 95       	ret

00003186 <_ZN15Adafruit_ST773513invertDisplayEb>:
    3186:	61 11       	cpse	r22, r1
    3188:	02 c0       	rjmp	.+4      	; 0x318e <_ZN15Adafruit_ST773513invertDisplayEb+0x8>
    318a:	60 e2       	ldi	r22, 0x20	; 32
    318c:	01 c0       	rjmp	.+2      	; 0x3190 <_ZN15Adafruit_ST773513invertDisplayEb+0xa>
    318e:	61 e2       	ldi	r22, 0x21	; 33
    3190:	0c 94 98 18 	jmp	0x3130	; 0x3130 <_ZN15Adafruit_ST773512writecommandEh>

00003194 <_ZN15Adafruit_ST77357DC_HIGHEv>:
    3194:	dc 01       	movw	r26, r24
    3196:	9b 96       	adiw	r26, 0x2b	; 43
    3198:	ed 91       	ld	r30, X+
    319a:	fc 91       	ld	r31, X
    319c:	9c 97       	sbiw	r26, 0x2c	; 44
    319e:	90 81       	ld	r25, Z
    31a0:	d0 96       	adiw	r26, 0x30	; 48
    31a2:	8c 91       	ld	r24, X
    31a4:	89 2b       	or	r24, r25
    31a6:	80 83       	st	Z, r24
    31a8:	08 95       	ret

000031aa <_ZN15Adafruit_ST77359writedataEh>:
    31aa:	1f 93       	push	r17
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	ec 01       	movw	r28, r24
    31b2:	16 2f       	mov	r17, r22
    31b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31b6:	88 23       	and	r24, r24
    31b8:	31 f0       	breq	.+12     	; 0x31c6 <_ZN15Adafruit_ST77359writedataEh+0x1c>
    31ba:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZL13mySPISettings>
    31be:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <_ZL13mySPISettings+0x1>
    31c2:	0e 94 08 18 	call	0x3010	; 0x3010 <_ZN8SPIClass16beginTransactionE11SPISettings>
    31c6:	ce 01       	movw	r24, r28
    31c8:	0e 94 ca 18 	call	0x3194	; 0x3194 <_ZN15Adafruit_ST77357DC_HIGHEv>
    31cc:	ce 01       	movw	r24, r28
    31ce:	0e 94 8c 18 	call	0x3118	; 0x3118 <_ZN15Adafruit_ST77356CS_LOWEv>
    31d2:	61 2f       	mov	r22, r17
    31d4:	ce 01       	movw	r24, r28
    31d6:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN15Adafruit_ST77358spiwriteEh>
    31da:	ce 01       	movw	r24, r28
    31dc:	0e 94 81 18 	call	0x3102	; 0x3102 <_ZN15Adafruit_ST77357CS_HIGHEv>
    31e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31e2:	88 23       	and	r24, r24
    31e4:	29 f0       	breq	.+10     	; 0x31f0 <_ZN15Adafruit_ST77359writedataEh+0x46>
    31e6:	df 91       	pop	r29
    31e8:	cf 91       	pop	r28
    31ea:	1f 91       	pop	r17
    31ec:	0c 94 22 18 	jmp	0x3044	; 0x3044 <_ZN8SPIClass14endTransactionEv>
    31f0:	df 91       	pop	r29
    31f2:	cf 91       	pop	r28
    31f4:	1f 91       	pop	r17
    31f6:	08 95       	ret

000031f8 <_ZN15Adafruit_ST773511commandListEPKh>:
    31f8:	af 92       	push	r10
    31fa:	bf 92       	push	r11
    31fc:	cf 92       	push	r12
    31fe:	df 92       	push	r13
    3200:	ef 92       	push	r14
    3202:	ff 92       	push	r15
    3204:	0f 93       	push	r16
    3206:	1f 93       	push	r17
    3208:	cf 93       	push	r28
    320a:	df 93       	push	r29
    320c:	8c 01       	movw	r16, r24
    320e:	eb 01       	movw	r28, r22
    3210:	21 96       	adiw	r28, 0x01	; 1
    3212:	fb 01       	movw	r30, r22
    3214:	d4 90       	lpm	r13, Z
    3216:	dd 20       	and	r13, r13
    3218:	09 f4       	brne	.+2      	; 0x321c <_ZN15Adafruit_ST773511commandListEPKh+0x24>
    321a:	37 c0       	rjmp	.+110    	; 0x328a <_ZN15Adafruit_ST773511commandListEPKh+0x92>
    321c:	fe 01       	movw	r30, r28
    321e:	64 91       	lpm	r22, Z
    3220:	c8 01       	movw	r24, r16
    3222:	0e 94 98 18 	call	0x3130	; 0x3130 <_ZN15Adafruit_ST773512writecommandEh>
    3226:	7e 01       	movw	r14, r28
    3228:	f2 e0       	ldi	r31, 0x02	; 2
    322a:	ef 0e       	add	r14, r31
    322c:	f1 1c       	adc	r15, r1
    322e:	fe 01       	movw	r30, r28
    3230:	31 96       	adiw	r30, 0x01	; 1
    3232:	c4 91       	lpm	r28, Z
    3234:	8c 2f       	mov	r24, r28
    3236:	80 78       	andi	r24, 0x80	; 128
    3238:	c8 2e       	mov	r12, r24
    323a:	cf 77       	andi	r28, 0x7F	; 127
    323c:	57 01       	movw	r10, r14
    323e:	dc 2f       	mov	r29, r28
    3240:	d1 50       	subi	r29, 0x01	; 1
    3242:	48 f0       	brcs	.+18     	; 0x3256 <_ZN15Adafruit_ST773511commandListEPKh+0x5e>
    3244:	f5 01       	movw	r30, r10
    3246:	64 91       	lpm	r22, Z
    3248:	c8 01       	movw	r24, r16
    324a:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN15Adafruit_ST77359writedataEh>
    324e:	ff ef       	ldi	r31, 0xFF	; 255
    3250:	af 1a       	sub	r10, r31
    3252:	bf 0a       	sbc	r11, r31
    3254:	f5 cf       	rjmp	.-22     	; 0x3240 <_ZN15Adafruit_ST773511commandListEPKh+0x48>
    3256:	c7 01       	movw	r24, r14
    3258:	8c 0f       	add	r24, r28
    325a:	91 1d       	adc	r25, r1
    325c:	ec 01       	movw	r28, r24
    325e:	c1 10       	cpse	r12, r1
    3260:	02 c0       	rjmp	.+4      	; 0x3266 <_ZN15Adafruit_ST773511commandListEPKh+0x6e>
    3262:	da 94       	dec	r13
    3264:	d8 cf       	rjmp	.-80     	; 0x3216 <_ZN15Adafruit_ST773511commandListEPKh+0x1e>
    3266:	7c 01       	movw	r14, r24
    3268:	9f ef       	ldi	r25, 0xFF	; 255
    326a:	e9 1a       	sub	r14, r25
    326c:	f9 0a       	sbc	r15, r25
    326e:	fe 01       	movw	r30, r28
    3270:	64 91       	lpm	r22, Z
    3272:	70 e0       	ldi	r23, 0x00	; 0
    3274:	6f 3f       	cpi	r22, 0xFF	; 255
    3276:	71 05       	cpc	r23, r1
    3278:	11 f4       	brne	.+4      	; 0x327e <_ZN15Adafruit_ST773511commandListEPKh+0x86>
    327a:	64 ef       	ldi	r22, 0xF4	; 244
    327c:	71 e0       	ldi	r23, 0x01	; 1
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	0e 94 72 10 	call	0x20e4	; 0x20e4 <delay>
    3286:	e7 01       	movw	r28, r14
    3288:	ec cf       	rjmp	.-40     	; 0x3262 <_ZN15Adafruit_ST773511commandListEPKh+0x6a>
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	1f 91       	pop	r17
    3290:	0f 91       	pop	r16
    3292:	ff 90       	pop	r15
    3294:	ef 90       	pop	r14
    3296:	df 90       	pop	r13
    3298:	cf 90       	pop	r12
    329a:	bf 90       	pop	r11
    329c:	af 90       	pop	r10
    329e:	08 95       	ret

000032a0 <_ZN15Adafruit_ST773510commonInitEPKh>:
    32a0:	0f 93       	push	r16
    32a2:	1f 93       	push	r17
    32a4:	cf 93       	push	r28
    32a6:	df 93       	push	r29
    32a8:	ec 01       	movw	r28, r24
    32aa:	8b 01       	movw	r16, r22
    32ac:	1a a2       	std	Y+34, r1	; 0x22
    32ae:	19 a2       	std	Y+33, r1	; 0x21
    32b0:	1b a2       	std	Y+35, r1	; 0x23
    32b2:	1c a2       	std	Y+36, r1	; 0x24
    32b4:	61 e0       	ldi	r22, 0x01	; 1
    32b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32b8:	0e 94 12 11 	call	0x2224	; 0x2224 <pinMode>
    32bc:	61 e0       	ldi	r22, 0x01	; 1
    32be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32c0:	0e 94 12 11 	call	0x2224	; 0x2224 <pinMode>
    32c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32c6:	08 2e       	mov	r0, r24
    32c8:	00 0c       	add	r0, r0
    32ca:	99 0b       	sbc	r25, r25
    32cc:	fc 01       	movw	r30, r24
    32ce:	e4 52       	subi	r30, 0x24	; 36
    32d0:	ff 4f       	sbci	r31, 0xFF	; 255
    32d2:	e4 91       	lpm	r30, Z
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	ee 0f       	add	r30, r30
    32d8:	ff 1f       	adc	r31, r31
    32da:	e0 51       	subi	r30, 0x10	; 16
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	25 91       	lpm	r18, Z+
    32e0:	34 91       	lpm	r19, Z
    32e2:	3a a7       	std	Y+42, r19	; 0x2a
    32e4:	29 a7       	std	Y+41, r18	; 0x29
    32e6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    32e8:	02 2e       	mov	r0, r18
    32ea:	00 0c       	add	r0, r0
    32ec:	33 0b       	sbc	r19, r19
    32ee:	f9 01       	movw	r30, r18
    32f0:	e4 52       	subi	r30, 0x24	; 36
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	e4 91       	lpm	r30, Z
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	ee 0f       	add	r30, r30
    32fa:	ff 1f       	adc	r31, r31
    32fc:	e0 51       	subi	r30, 0x10	; 16
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	45 91       	lpm	r20, Z+
    3302:	54 91       	lpm	r21, Z
    3304:	5c a7       	std	Y+44, r21	; 0x2c
    3306:	4b a7       	std	Y+43, r20	; 0x2b
    3308:	fc 01       	movw	r30, r24
    330a:	e8 53       	subi	r30, 0x38	; 56
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	e4 91       	lpm	r30, Z
    3310:	ef a7       	std	Y+47, r30	; 0x2f
    3312:	f9 01       	movw	r30, r18
    3314:	e8 53       	subi	r30, 0x38	; 56
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	e4 91       	lpm	r30, Z
    331a:	e8 ab       	std	Y+48, r30	; 0x30
    331c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    331e:	88 23       	and	r24, r24
    3320:	49 f0       	breq	.+18     	; 0x3334 <_ZN15Adafruit_ST773510commonInitEPKh+0x94>
    3322:	0e 94 93 1c 	call	0x3926	; 0x3926 <_ZN8SPIClass5beginEv>
    3326:	80 e5       	ldi	r24, 0x50	; 80
    3328:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <_ZL13mySPISettings>
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <_ZL13mySPISettings+0x1>
    3332:	3c c0       	rjmp	.+120    	; 0x33ac <_ZN15Adafruit_ST773510commonInitEPKh+0x10c>
    3334:	61 e0       	ldi	r22, 0x01	; 1
    3336:	88 a1       	ldd	r24, Y+32	; 0x20
    3338:	0e 94 12 11 	call	0x2224	; 0x2224 <pinMode>
    333c:	61 e0       	ldi	r22, 0x01	; 1
    333e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3340:	0e 94 12 11 	call	0x2224	; 0x2224 <pinMode>
    3344:	60 e0       	ldi	r22, 0x00	; 0
    3346:	88 a1       	ldd	r24, Y+32	; 0x20
    3348:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
    334c:	60 e0       	ldi	r22, 0x00	; 0
    334e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3350:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
    3354:	88 a1       	ldd	r24, Y+32	; 0x20
    3356:	08 2e       	mov	r0, r24
    3358:	00 0c       	add	r0, r0
    335a:	99 0b       	sbc	r25, r25
    335c:	fc 01       	movw	r30, r24
    335e:	e4 52       	subi	r30, 0x24	; 36
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	e4 91       	lpm	r30, Z
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	ee 0f       	add	r30, r30
    3368:	ff 1f       	adc	r31, r31
    336a:	e0 51       	subi	r30, 0x10	; 16
    336c:	ff 4f       	sbci	r31, 0xFF	; 255
    336e:	25 91       	lpm	r18, Z+
    3370:	34 91       	lpm	r19, Z
    3372:	38 a7       	std	Y+40, r19	; 0x28
    3374:	2f a3       	std	Y+39, r18	; 0x27
    3376:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3378:	02 2e       	mov	r0, r18
    337a:	00 0c       	add	r0, r0
    337c:	33 0b       	sbc	r19, r19
    337e:	f9 01       	movw	r30, r18
    3380:	e4 52       	subi	r30, 0x24	; 36
    3382:	ff 4f       	sbci	r31, 0xFF	; 255
    3384:	e4 91       	lpm	r30, Z
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	ee 0f       	add	r30, r30
    338a:	ff 1f       	adc	r31, r31
    338c:	e0 51       	subi	r30, 0x10	; 16
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
    3390:	45 91       	lpm	r20, Z+
    3392:	54 91       	lpm	r21, Z
    3394:	5e a3       	std	Y+38, r21	; 0x26
    3396:	4d a3       	std	Y+37, r20	; 0x25
    3398:	fc 01       	movw	r30, r24
    339a:	e8 53       	subi	r30, 0x38	; 56
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	e4 91       	lpm	r30, Z
    33a0:	ee a7       	std	Y+46, r30	; 0x2e
    33a2:	f9 01       	movw	r30, r18
    33a4:	e8 53       	subi	r30, 0x38	; 56
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	e4 91       	lpm	r30, Z
    33aa:	ed a7       	std	Y+45, r30	; 0x2d
    33ac:	ce 01       	movw	r24, r28
    33ae:	0e 94 8c 18 	call	0x3118	; 0x3118 <_ZN15Adafruit_ST77356CS_LOWEv>
    33b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33b4:	8f 3f       	cpi	r24, 0xFF	; 255
    33b6:	09 f1       	breq	.+66     	; 0x33fa <_ZN15Adafruit_ST773510commonInitEPKh+0x15a>
    33b8:	61 e0       	ldi	r22, 0x01	; 1
    33ba:	0e 94 12 11 	call	0x2224	; 0x2224 <pinMode>
    33be:	61 e0       	ldi	r22, 0x01	; 1
    33c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33c2:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
    33c6:	64 ef       	ldi	r22, 0xF4	; 244
    33c8:	71 e0       	ldi	r23, 0x01	; 1
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	0e 94 72 10 	call	0x20e4	; 0x20e4 <delay>
    33d2:	60 e0       	ldi	r22, 0x00	; 0
    33d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33d6:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
    33da:	64 ef       	ldi	r22, 0xF4	; 244
    33dc:	71 e0       	ldi	r23, 0x01	; 1
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	0e 94 72 10 	call	0x20e4	; 0x20e4 <delay>
    33e6:	61 e0       	ldi	r22, 0x01	; 1
    33e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33ea:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
    33ee:	64 ef       	ldi	r22, 0xF4	; 244
    33f0:	71 e0       	ldi	r23, 0x01	; 1
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	0e 94 72 10 	call	0x20e4	; 0x20e4 <delay>
    33fa:	01 15       	cp	r16, r1
    33fc:	11 05       	cpc	r17, r1
    33fe:	41 f0       	breq	.+16     	; 0x3410 <_ZN15Adafruit_ST773510commonInitEPKh+0x170>
    3400:	b8 01       	movw	r22, r16
    3402:	ce 01       	movw	r24, r28
    3404:	df 91       	pop	r29
    3406:	cf 91       	pop	r28
    3408:	1f 91       	pop	r17
    340a:	0f 91       	pop	r16
    340c:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <_ZN15Adafruit_ST773511commandListEPKh>
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	1f 91       	pop	r17
    3416:	0f 91       	pop	r16
    3418:	08 95       	ret

0000341a <_ZN15Adafruit_ST77355initREh>:
    341a:	1f 93       	push	r17
    341c:	cf 93       	push	r28
    341e:	df 93       	push	r29
    3420:	ec 01       	movw	r28, r24
    3422:	16 2f       	mov	r17, r22
    3424:	63 e6       	ldi	r22, 0x63	; 99
    3426:	76 e0       	ldi	r23, 0x06	; 6
    3428:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN15Adafruit_ST773510commonInitEPKh>
    342c:	11 11       	cpse	r17, r1
    342e:	09 c0       	rjmp	.+18     	; 0x3442 <_ZN15Adafruit_ST77355initREh+0x28>
    3430:	66 e5       	ldi	r22, 0x56	; 86
    3432:	76 e0       	ldi	r23, 0x06	; 6
    3434:	ce 01       	movw	r24, r28
    3436:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <_ZN15Adafruit_ST773511commandListEPKh>
    343a:	82 e0       	ldi	r24, 0x02	; 2
    343c:	89 a3       	std	Y+33, r24	; 0x21
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	10 c0       	rjmp	.+32     	; 0x3462 <_ZN15Adafruit_ST77355initREh+0x48>
    3442:	11 30       	cpi	r17, 0x01	; 1
    3444:	81 f4       	brne	.+32     	; 0x3466 <_ZN15Adafruit_ST77355initREh+0x4c>
    3446:	80 e8       	ldi	r24, 0x80	; 128
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	9b 87       	std	Y+11, r25	; 0x0b
    344c:	8a 87       	std	Y+10, r24	; 0x0a
    344e:	99 87       	std	Y+9, r25	; 0x09
    3450:	88 87       	std	Y+8, r24	; 0x08
    3452:	6c e3       	ldi	r22, 0x3C	; 60
    3454:	76 e0       	ldi	r23, 0x06	; 6
    3456:	ce 01       	movw	r24, r28
    3458:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <_ZN15Adafruit_ST773511commandListEPKh>
    345c:	82 e0       	ldi	r24, 0x02	; 2
    345e:	89 a3       	std	Y+33, r24	; 0x21
    3460:	83 e0       	ldi	r24, 0x03	; 3
    3462:	8a a3       	std	Y+34, r24	; 0x22
    3464:	18 c0       	rjmp	.+48     	; 0x3496 <_ZN15Adafruit_ST77355initREh+0x7c>
    3466:	14 30       	cpi	r17, 0x04	; 4
    3468:	89 f4       	brne	.+34     	; 0x348c <_ZN15Adafruit_ST77355initREh+0x72>
    346a:	80 ea       	ldi	r24, 0xA0	; 160
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	9b 87       	std	Y+11, r25	; 0x0b
    3470:	8a 87       	std	Y+10, r24	; 0x0a
    3472:	80 e5       	ldi	r24, 0x50	; 80
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	99 87       	std	Y+9, r25	; 0x09
    3478:	88 87       	std	Y+8, r24	; 0x08
    347a:	6f e2       	ldi	r22, 0x2F	; 47
    347c:	76 e0       	ldi	r23, 0x06	; 6
    347e:	ce 01       	movw	r24, r28
    3480:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <_ZN15Adafruit_ST773511commandListEPKh>
    3484:	88 e1       	ldi	r24, 0x18	; 24
    3486:	89 a3       	std	Y+33, r24	; 0x21
    3488:	1a a2       	std	Y+34, r1	; 0x22
    348a:	05 c0       	rjmp	.+10     	; 0x3496 <_ZN15Adafruit_ST77355initREh+0x7c>
    348c:	69 e4       	ldi	r22, 0x49	; 73
    348e:	76 e0       	ldi	r23, 0x06	; 6
    3490:	ce 01       	movw	r24, r28
    3492:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <_ZN15Adafruit_ST773511commandListEPKh>
    3496:	64 e0       	ldi	r22, 0x04	; 4
    3498:	76 e0       	ldi	r23, 0x06	; 6
    349a:	ce 01       	movw	r24, r28
    349c:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <_ZN15Adafruit_ST773511commandListEPKh>
    34a0:	12 30       	cpi	r17, 0x02	; 2
    34a2:	11 f0       	breq	.+4      	; 0x34a8 <_ZN15Adafruit_ST77355initREh+0x8e>
    34a4:	14 30       	cpi	r17, 0x04	; 4
    34a6:	41 f4       	brne	.+16     	; 0x34b8 <_ZN15Adafruit_ST77355initREh+0x9e>
    34a8:	66 e3       	ldi	r22, 0x36	; 54
    34aa:	ce 01       	movw	r24, r28
    34ac:	0e 94 98 18 	call	0x3130	; 0x3130 <_ZN15Adafruit_ST773512writecommandEh>
    34b0:	60 ec       	ldi	r22, 0xC0	; 192
    34b2:	ce 01       	movw	r24, r28
    34b4:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN15Adafruit_ST77359writedataEh>
    34b8:	1a 8f       	std	Y+26, r17	; 0x1a
    34ba:	e8 81       	ld	r30, Y
    34bc:	f9 81       	ldd	r31, Y+1	; 0x01
    34be:	00 8c       	ldd	r0, Z+24	; 0x18
    34c0:	f1 8d       	ldd	r31, Z+25	; 0x19
    34c2:	e0 2d       	mov	r30, r0
    34c4:	60 e0       	ldi	r22, 0x00	; 0
    34c6:	ce 01       	movw	r24, r28
    34c8:	df 91       	pop	r29
    34ca:	cf 91       	pop	r28
    34cc:	1f 91       	pop	r17
    34ce:	09 94       	ijmp

000034d0 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>:
    34d0:	ef 92       	push	r14
    34d2:	ff 92       	push	r15
    34d4:	0f 93       	push	r16
    34d6:	1f 93       	push	r17
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
    34dc:	ec 01       	movw	r28, r24
    34de:	e6 2e       	mov	r14, r22
    34e0:	14 2f       	mov	r17, r20
    34e2:	f2 2e       	mov	r15, r18
    34e4:	6a e2       	ldi	r22, 0x2A	; 42
    34e6:	0e 94 98 18 	call	0x3130	; 0x3130 <_ZN15Adafruit_ST773512writecommandEh>
    34ea:	60 e0       	ldi	r22, 0x00	; 0
    34ec:	ce 01       	movw	r24, r28
    34ee:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN15Adafruit_ST77359writedataEh>
    34f2:	6b a1       	ldd	r22, Y+35	; 0x23
    34f4:	6e 0d       	add	r22, r14
    34f6:	ce 01       	movw	r24, r28
    34f8:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN15Adafruit_ST77359writedataEh>
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	ce 01       	movw	r24, r28
    3500:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN15Adafruit_ST77359writedataEh>
    3504:	6b a1       	ldd	r22, Y+35	; 0x23
    3506:	6f 0d       	add	r22, r15
    3508:	ce 01       	movw	r24, r28
    350a:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN15Adafruit_ST77359writedataEh>
    350e:	6b e2       	ldi	r22, 0x2B	; 43
    3510:	ce 01       	movw	r24, r28
    3512:	0e 94 98 18 	call	0x3130	; 0x3130 <_ZN15Adafruit_ST773512writecommandEh>
    3516:	60 e0       	ldi	r22, 0x00	; 0
    3518:	ce 01       	movw	r24, r28
    351a:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN15Adafruit_ST77359writedataEh>
    351e:	6c a1       	ldd	r22, Y+36	; 0x24
    3520:	61 0f       	add	r22, r17
    3522:	ce 01       	movw	r24, r28
    3524:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN15Adafruit_ST77359writedataEh>
    3528:	60 e0       	ldi	r22, 0x00	; 0
    352a:	ce 01       	movw	r24, r28
    352c:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN15Adafruit_ST77359writedataEh>
    3530:	6c a1       	ldd	r22, Y+36	; 0x24
    3532:	60 0f       	add	r22, r16
    3534:	ce 01       	movw	r24, r28
    3536:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN15Adafruit_ST77359writedataEh>
    353a:	6c e2       	ldi	r22, 0x2C	; 44
    353c:	ce 01       	movw	r24, r28
    353e:	df 91       	pop	r29
    3540:	cf 91       	pop	r28
    3542:	1f 91       	pop	r17
    3544:	0f 91       	pop	r16
    3546:	ff 90       	pop	r15
    3548:	ef 90       	pop	r14
    354a:	0c 94 98 18 	jmp	0x3130	; 0x3130 <_ZN15Adafruit_ST773512writecommandEh>

0000354e <_ZN15Adafruit_ST773511setRotationEh>:
    354e:	1f 93       	push	r17
    3550:	cf 93       	push	r28
    3552:	df 93       	push	r29
    3554:	ec 01       	movw	r28, r24
    3556:	16 2f       	mov	r17, r22
    3558:	66 e3       	ldi	r22, 0x36	; 54
    355a:	0e 94 98 18 	call	0x3130	; 0x3130 <_ZN15Adafruit_ST773512writecommandEh>
    355e:	61 2f       	mov	r22, r17
    3560:	63 70       	andi	r22, 0x03	; 3
    3562:	6d 8b       	std	Y+21, r22	; 0x15
    3564:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3566:	62 30       	cpi	r22, 0x02	; 2
    3568:	a1 f0       	breq	.+40     	; 0x3592 <_ZN15Adafruit_ST773511setRotationEh+0x44>
    356a:	63 30       	cpi	r22, 0x03	; 3
    356c:	d1 f1       	breq	.+116    	; 0x35e2 <_ZN15Adafruit_ST773511setRotationEh+0x94>
    356e:	61 30       	cpi	r22, 0x01	; 1
    3570:	41 f0       	breq	.+16     	; 0x3582 <_ZN15Adafruit_ST773511setRotationEh+0x34>
    3572:	82 30       	cpi	r24, 0x02	; 2
    3574:	11 f0       	breq	.+4      	; 0x357a <_ZN15Adafruit_ST773511setRotationEh+0x2c>
    3576:	84 30       	cpi	r24, 0x04	; 4
    3578:	11 f4       	brne	.+4      	; 0x357e <_ZN15Adafruit_ST773511setRotationEh+0x30>
    357a:	60 ec       	ldi	r22, 0xC0	; 192
    357c:	11 c0       	rjmp	.+34     	; 0x35a0 <_ZN15Adafruit_ST773511setRotationEh+0x52>
    357e:	68 ec       	ldi	r22, 0xC8	; 200
    3580:	0f c0       	rjmp	.+30     	; 0x35a0 <_ZN15Adafruit_ST773511setRotationEh+0x52>
    3582:	82 30       	cpi	r24, 0x02	; 2
    3584:	11 f0       	breq	.+4      	; 0x358a <_ZN15Adafruit_ST773511setRotationEh+0x3c>
    3586:	84 30       	cpi	r24, 0x04	; 4
    3588:	11 f4       	brne	.+4      	; 0x358e <_ZN15Adafruit_ST773511setRotationEh+0x40>
    358a:	60 ea       	ldi	r22, 0xA0	; 160
    358c:	31 c0       	rjmp	.+98     	; 0x35f0 <_ZN15Adafruit_ST773511setRotationEh+0xa2>
    358e:	68 ea       	ldi	r22, 0xA8	; 168
    3590:	2f c0       	rjmp	.+94     	; 0x35f0 <_ZN15Adafruit_ST773511setRotationEh+0xa2>
    3592:	82 30       	cpi	r24, 0x02	; 2
    3594:	11 f0       	breq	.+4      	; 0x359a <_ZN15Adafruit_ST773511setRotationEh+0x4c>
    3596:	84 30       	cpi	r24, 0x04	; 4
    3598:	11 f4       	brne	.+4      	; 0x359e <_ZN15Adafruit_ST773511setRotationEh+0x50>
    359a:	60 e0       	ldi	r22, 0x00	; 0
    359c:	01 c0       	rjmp	.+2      	; 0x35a0 <_ZN15Adafruit_ST773511setRotationEh+0x52>
    359e:	68 e0       	ldi	r22, 0x08	; 8
    35a0:	ce 01       	movw	r24, r28
    35a2:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN15Adafruit_ST77359writedataEh>
    35a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35a8:	81 30       	cpi	r24, 0x01	; 1
    35aa:	29 f4       	brne	.+10     	; 0x35b6 <_ZN15Adafruit_ST773511setRotationEh+0x68>
    35ac:	80 e8       	ldi	r24, 0x80	; 128
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	9b 87       	std	Y+11, r25	; 0x0b
    35b2:	8a 87       	std	Y+10, r24	; 0x0a
    35b4:	0f c0       	rjmp	.+30     	; 0x35d4 <_ZN15Adafruit_ST773511setRotationEh+0x86>
    35b6:	84 30       	cpi	r24, 0x04	; 4
    35b8:	39 f4       	brne	.+14     	; 0x35c8 <_ZN15Adafruit_ST773511setRotationEh+0x7a>
    35ba:	80 ea       	ldi	r24, 0xA0	; 160
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	9b 87       	std	Y+11, r25	; 0x0b
    35c0:	8a 87       	std	Y+10, r24	; 0x0a
    35c2:	80 e5       	ldi	r24, 0x50	; 80
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	06 c0       	rjmp	.+12     	; 0x35d4 <_ZN15Adafruit_ST773511setRotationEh+0x86>
    35c8:	80 ea       	ldi	r24, 0xA0	; 160
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	9b 87       	std	Y+11, r25	; 0x0b
    35ce:	8a 87       	std	Y+10, r24	; 0x0a
    35d0:	80 e8       	ldi	r24, 0x80	; 128
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	99 87       	std	Y+9, r25	; 0x09
    35d6:	88 87       	std	Y+8, r24	; 0x08
    35d8:	89 a1       	ldd	r24, Y+33	; 0x21
    35da:	8b a3       	std	Y+35, r24	; 0x23
    35dc:	8a a1       	ldd	r24, Y+34	; 0x22
    35de:	8c a3       	std	Y+36, r24	; 0x24
    35e0:	27 c0       	rjmp	.+78     	; 0x3630 <_ZN15Adafruit_ST773511setRotationEh+0xe2>
    35e2:	82 30       	cpi	r24, 0x02	; 2
    35e4:	11 f0       	breq	.+4      	; 0x35ea <_ZN15Adafruit_ST773511setRotationEh+0x9c>
    35e6:	84 30       	cpi	r24, 0x04	; 4
    35e8:	11 f4       	brne	.+4      	; 0x35ee <_ZN15Adafruit_ST773511setRotationEh+0xa0>
    35ea:	60 e6       	ldi	r22, 0x60	; 96
    35ec:	01 c0       	rjmp	.+2      	; 0x35f0 <_ZN15Adafruit_ST773511setRotationEh+0xa2>
    35ee:	68 e6       	ldi	r22, 0x68	; 104
    35f0:	ce 01       	movw	r24, r28
    35f2:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN15Adafruit_ST77359writedataEh>
    35f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35f8:	81 30       	cpi	r24, 0x01	; 1
    35fa:	29 f4       	brne	.+10     	; 0x3606 <_ZN15Adafruit_ST773511setRotationEh+0xb8>
    35fc:	80 e8       	ldi	r24, 0x80	; 128
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	99 87       	std	Y+9, r25	; 0x09
    3602:	88 87       	std	Y+8, r24	; 0x08
    3604:	0f c0       	rjmp	.+30     	; 0x3624 <_ZN15Adafruit_ST773511setRotationEh+0xd6>
    3606:	84 30       	cpi	r24, 0x04	; 4
    3608:	39 f4       	brne	.+14     	; 0x3618 <_ZN15Adafruit_ST773511setRotationEh+0xca>
    360a:	80 ea       	ldi	r24, 0xA0	; 160
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	99 87       	std	Y+9, r25	; 0x09
    3610:	88 87       	std	Y+8, r24	; 0x08
    3612:	80 e5       	ldi	r24, 0x50	; 80
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	06 c0       	rjmp	.+12     	; 0x3624 <_ZN15Adafruit_ST773511setRotationEh+0xd6>
    3618:	80 ea       	ldi	r24, 0xA0	; 160
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	99 87       	std	Y+9, r25	; 0x09
    361e:	88 87       	std	Y+8, r24	; 0x08
    3620:	80 e8       	ldi	r24, 0x80	; 128
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	9b 87       	std	Y+11, r25	; 0x0b
    3626:	8a 87       	std	Y+10, r24	; 0x0a
    3628:	89 a1       	ldd	r24, Y+33	; 0x21
    362a:	8c a3       	std	Y+36, r24	; 0x24
    362c:	8a a1       	ldd	r24, Y+34	; 0x22
    362e:	8b a3       	std	Y+35, r24	; 0x23
    3630:	df 91       	pop	r29
    3632:	cf 91       	pop	r28
    3634:	1f 91       	pop	r17
    3636:	08 95       	ret

00003638 <_ZN15Adafruit_ST773513drawFastHLineEiiij>:
#endif
}


void Adafruit_ST7735::drawFastHLine(int16_t x, int16_t y, int16_t w,
  uint16_t color) {
    3638:	df 92       	push	r13
    363a:	ef 92       	push	r14
    363c:	ff 92       	push	r15
    363e:	0f 93       	push	r16
    3640:	1f 93       	push	r17
    3642:	cf 93       	push	r28
    3644:	df 93       	push	r29
    3646:	ec 01       	movw	r28, r24
    3648:	79 01       	movw	r14, r18
    364a:	d0 2e       	mov	r13, r16

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
    364c:	88 85       	ldd	r24, Y+8	; 0x08
    364e:	99 85       	ldd	r25, Y+9	; 0x09
    3650:	68 17       	cp	r22, r24
    3652:	79 07       	cpc	r23, r25
    3654:	0c f0       	brlt	.+2      	; 0x3658 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x20>
    3656:	42 c0       	rjmp	.+132    	; 0x36dc <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xa4>
    3658:	2a 85       	ldd	r18, Y+10	; 0x0a
    365a:	3b 85       	ldd	r19, Y+11	; 0x0b
    365c:	42 17       	cp	r20, r18
    365e:	53 07       	cpc	r21, r19
    3660:	ec f5       	brge	.+122    	; 0x36dc <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xa4>
  if((x+w-1) >= _width)  w = _width-x;
    3662:	9b 01       	movw	r18, r22
    3664:	2e 0d       	add	r18, r14
    3666:	3f 1d       	adc	r19, r15
    3668:	82 17       	cp	r24, r18
    366a:	93 07       	cpc	r25, r19
    366c:	1c f4       	brge	.+6      	; 0x3674 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x3c>
    366e:	7c 01       	movw	r14, r24
    3670:	e6 1a       	sub	r14, r22
    3672:	f7 0a       	sbc	r15, r23
  setAddrWindow(x, y, x+w-1, y);
    3674:	2f ef       	ldi	r18, 0xFF	; 255
    3676:	26 0f       	add	r18, r22
    3678:	2e 0d       	add	r18, r14
    367a:	04 2f       	mov	r16, r20
    367c:	ce 01       	movw	r24, r28
    367e:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.beginTransaction(mySPISettings);
    3682:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3684:	88 23       	and	r24, r24
    3686:	31 f0       	breq	.+12     	; 0x3694 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x5c>
    3688:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZL13mySPISettings>
    368c:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <_ZL13mySPISettings+0x1>
    3690:	0e 94 08 18 	call	0x3010	; 0x3010 <_ZN8SPIClass16beginTransactionE11SPISettings>
#endif

  DC_HIGH();
    3694:	ce 01       	movw	r24, r28
    3696:	0e 94 ca 18 	call	0x3194	; 0x3194 <_ZN15Adafruit_ST77357DC_HIGHEv>
  CS_LOW();
    369a:	ce 01       	movw	r24, r28
    369c:	0e 94 8c 18 	call	0x3118	; 0x3118 <_ZN15Adafruit_ST77356CS_LOWEv>
  while (w--) {
    36a0:	e1 14       	cp	r14, r1
    36a2:	f1 04       	cpc	r15, r1
    36a4:	61 f0       	breq	.+24     	; 0x36be <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x86>
    spiwrite(hi);
    36a6:	61 2f       	mov	r22, r17
    36a8:	ce 01       	movw	r24, r28
    36aa:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN15Adafruit_ST77358spiwriteEh>
    spiwrite(lo);
    36ae:	6d 2d       	mov	r22, r13
    36b0:	ce 01       	movw	r24, r28
    36b2:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN15Adafruit_ST77358spiwriteEh>
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	e8 1a       	sub	r14, r24
    36ba:	f1 08       	sbc	r15, r1
  if (hwSPI)      SPI.beginTransaction(mySPISettings);
#endif

  DC_HIGH();
  CS_LOW();
  while (w--) {
    36bc:	f1 cf       	rjmp	.-30     	; 0x36a0 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x68>
    spiwrite(hi);
    spiwrite(lo);
  }
  CS_HIGH();
    36be:	ce 01       	movw	r24, r28
    36c0:	0e 94 81 18 	call	0x3102	; 0x3102 <_ZN15Adafruit_ST77357CS_HIGHEv>

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    36c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36c6:	88 23       	and	r24, r24
    36c8:	49 f0       	breq	.+18     	; 0x36dc <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xa4>
#endif
}
    36ca:	df 91       	pop	r29
    36cc:	cf 91       	pop	r28
    36ce:	1f 91       	pop	r17
    36d0:	0f 91       	pop	r16
    36d2:	ff 90       	pop	r15
    36d4:	ef 90       	pop	r14
    36d6:	df 90       	pop	r13
    spiwrite(lo);
  }
  CS_HIGH();

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    36d8:	0c 94 22 18 	jmp	0x3044	; 0x3044 <_ZN8SPIClass14endTransactionEv>
#endif
}
    36dc:	df 91       	pop	r29
    36de:	cf 91       	pop	r28
    36e0:	1f 91       	pop	r17
    36e2:	0f 91       	pop	r16
    36e4:	ff 90       	pop	r15
    36e6:	ef 90       	pop	r14
    36e8:	df 90       	pop	r13
    36ea:	08 95       	ret

000036ec <_ZN15Adafruit_ST77358fillRectEiiiij>:



// fill a rectangle
void Adafruit_ST7735::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
  uint16_t color) {
    36ec:	af 92       	push	r10
    36ee:	bf 92       	push	r11
    36f0:	cf 92       	push	r12
    36f2:	df 92       	push	r13
    36f4:	ef 92       	push	r14
    36f6:	ff 92       	push	r15
    36f8:	0f 93       	push	r16
    36fa:	1f 93       	push	r17
    36fc:	cf 93       	push	r28
    36fe:	df 93       	push	r29
    3700:	ec 01       	movw	r28, r24
    3702:	59 01       	movw	r10, r18
    3704:	68 01       	movw	r12, r16

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
    3706:	28 85       	ldd	r18, Y+8	; 0x08
    3708:	39 85       	ldd	r19, Y+9	; 0x09
    370a:	62 17       	cp	r22, r18
    370c:	73 07       	cpc	r23, r19
    370e:	0c f0       	brlt	.+2      	; 0x3712 <_ZN15Adafruit_ST77358fillRectEiiiij+0x26>
    3710:	58 c0       	rjmp	.+176    	; 0x37c2 <_ZN15Adafruit_ST77358fillRectEiiiij+0xd6>
    3712:	8a 85       	ldd	r24, Y+10	; 0x0a
    3714:	9b 85       	ldd	r25, Y+11	; 0x0b
    3716:	48 17       	cp	r20, r24
    3718:	59 07       	cpc	r21, r25
    371a:	0c f0       	brlt	.+2      	; 0x371e <_ZN15Adafruit_ST77358fillRectEiiiij+0x32>
    371c:	52 c0       	rjmp	.+164    	; 0x37c2 <_ZN15Adafruit_ST77358fillRectEiiiij+0xd6>
  if((x + w - 1) >= _width)  w = _width  - x;
    371e:	fb 01       	movw	r30, r22
    3720:	ea 0d       	add	r30, r10
    3722:	fb 1d       	adc	r31, r11
    3724:	2e 17       	cp	r18, r30
    3726:	3f 07       	cpc	r19, r31
    3728:	1c f4       	brge	.+6      	; 0x3730 <_ZN15Adafruit_ST77358fillRectEiiiij+0x44>
    372a:	59 01       	movw	r10, r18
    372c:	a6 1a       	sub	r10, r22
    372e:	b7 0a       	sbc	r11, r23
  if((y + h - 1) >= _height) h = _height - y;
    3730:	9a 01       	movw	r18, r20
    3732:	2c 0d       	add	r18, r12
    3734:	3d 1d       	adc	r19, r13
    3736:	82 17       	cp	r24, r18
    3738:	93 07       	cpc	r25, r19
    373a:	1c f4       	brge	.+6      	; 0x3742 <_ZN15Adafruit_ST77358fillRectEiiiij+0x56>
    373c:	6c 01       	movw	r12, r24
    373e:	c4 1a       	sub	r12, r20
    3740:	d5 0a       	sbc	r13, r21

  setAddrWindow(x, y, x+w-1, y+h-1);
    3742:	0f ef       	ldi	r16, 0xFF	; 255
    3744:	04 0f       	add	r16, r20
    3746:	0c 0d       	add	r16, r12
    3748:	2f ef       	ldi	r18, 0xFF	; 255
    374a:	26 0f       	add	r18, r22
    374c:	2a 0d       	add	r18, r10
    374e:	ce 01       	movw	r24, r28
    3750:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;
    
#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.beginTransaction(mySPISettings);
    3754:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3756:	88 23       	and	r24, r24
    3758:	31 f0       	breq	.+12     	; 0x3766 <_ZN15Adafruit_ST77358fillRectEiiiij+0x7a>
    375a:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZL13mySPISettings>
    375e:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <_ZL13mySPISettings+0x1>
    3762:	0e 94 08 18 	call	0x3010	; 0x3010 <_ZN8SPIClass16beginTransactionE11SPISettings>
#endif

  DC_HIGH();
    3766:	ce 01       	movw	r24, r28
    3768:	0e 94 ca 18 	call	0x3194	; 0x3194 <_ZN15Adafruit_ST77357DC_HIGHEv>
  CS_LOW();
    376c:	ce 01       	movw	r24, r28
    376e:	0e 94 8c 18 	call	0x3118	; 0x3118 <_ZN15Adafruit_ST77356CS_LOWEv>
  for(y=h; y>0; y--) {
    3772:	1c 14       	cp	r1, r12
    3774:	1d 04       	cpc	r1, r13
    3776:	9c f4       	brge	.+38     	; 0x379e <_ZN15Adafruit_ST77358fillRectEiiiij+0xb2>
    3778:	85 01       	movw	r16, r10
    for(x=w; x>0; x--) {
    377a:	10 16       	cp	r1, r16
    377c:	11 06       	cpc	r1, r17
    377e:	5c f4       	brge	.+22     	; 0x3796 <_ZN15Adafruit_ST77358fillRectEiiiij+0xaa>
      spiwrite(hi);
    3780:	6f 2d       	mov	r22, r15
    3782:	ce 01       	movw	r24, r28
    3784:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN15Adafruit_ST77358spiwriteEh>
      spiwrite(lo);
    3788:	6e 2d       	mov	r22, r14
    378a:	ce 01       	movw	r24, r28
    378c:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN15Adafruit_ST77358spiwriteEh>
#endif

  DC_HIGH();
  CS_LOW();
  for(y=h; y>0; y--) {
    for(x=w; x>0; x--) {
    3790:	01 50       	subi	r16, 0x01	; 1
    3792:	11 09       	sbc	r17, r1
    3794:	f2 cf       	rjmp	.-28     	; 0x377a <_ZN15Adafruit_ST77358fillRectEiiiij+0x8e>
  if (hwSPI)      SPI.beginTransaction(mySPISettings);
#endif

  DC_HIGH();
  CS_LOW();
  for(y=h; y>0; y--) {
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	c8 1a       	sub	r12, r24
    379a:	d1 08       	sbc	r13, r1
    379c:	ea cf       	rjmp	.-44     	; 0x3772 <_ZN15Adafruit_ST77358fillRectEiiiij+0x86>
    for(x=w; x>0; x--) {
      spiwrite(hi);
      spiwrite(lo);
    }
  }
  CS_HIGH();
    379e:	ce 01       	movw	r24, r28
    37a0:	0e 94 81 18 	call	0x3102	; 0x3102 <_ZN15Adafruit_ST77357CS_HIGHEv>

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    37a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37a6:	88 23       	and	r24, r24
    37a8:	61 f0       	breq	.+24     	; 0x37c2 <_ZN15Adafruit_ST77358fillRectEiiiij+0xd6>
#endif
}
    37aa:	df 91       	pop	r29
    37ac:	cf 91       	pop	r28
    37ae:	1f 91       	pop	r17
    37b0:	0f 91       	pop	r16
    37b2:	ff 90       	pop	r15
    37b4:	ef 90       	pop	r14
    37b6:	df 90       	pop	r13
    37b8:	cf 90       	pop	r12
    37ba:	bf 90       	pop	r11
    37bc:	af 90       	pop	r10
    }
  }
  CS_HIGH();

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    37be:	0c 94 22 18 	jmp	0x3044	; 0x3044 <_ZN8SPIClass14endTransactionEv>
#endif
}
    37c2:	df 91       	pop	r29
    37c4:	cf 91       	pop	r28
    37c6:	1f 91       	pop	r17
    37c8:	0f 91       	pop	r16
    37ca:	ff 90       	pop	r15
    37cc:	ef 90       	pop	r14
    37ce:	df 90       	pop	r13
    37d0:	cf 90       	pop	r12
    37d2:	bf 90       	pop	r11
    37d4:	af 90       	pop	r10
    37d6:	08 95       	ret

000037d8 <_ZN15Adafruit_ST773513drawFastVLineEiiij>:
#endif
}


void Adafruit_ST7735::drawFastVLine(int16_t x, int16_t y, int16_t h,
 uint16_t color) {
    37d8:	df 92       	push	r13
    37da:	ef 92       	push	r14
    37dc:	ff 92       	push	r15
    37de:	0f 93       	push	r16
    37e0:	1f 93       	push	r17
    37e2:	cf 93       	push	r28
    37e4:	df 93       	push	r29
    37e6:	ec 01       	movw	r28, r24
    37e8:	79 01       	movw	r14, r18
    37ea:	d0 2e       	mov	r13, r16

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
    37ec:	88 85       	ldd	r24, Y+8	; 0x08
    37ee:	99 85       	ldd	r25, Y+9	; 0x09
    37f0:	68 17       	cp	r22, r24
    37f2:	79 07       	cpc	r23, r25
    37f4:	0c f0       	brlt	.+2      	; 0x37f8 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x20>
    37f6:	42 c0       	rjmp	.+132    	; 0x387c <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xa4>
    37f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    37fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    37fc:	48 17       	cp	r20, r24
    37fe:	59 07       	cpc	r21, r25
    3800:	ec f5       	brge	.+122    	; 0x387c <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xa4>
  if((y+h-1) >= _height) h = _height-y;
    3802:	9a 01       	movw	r18, r20
    3804:	2e 0d       	add	r18, r14
    3806:	3f 1d       	adc	r19, r15
    3808:	82 17       	cp	r24, r18
    380a:	93 07       	cpc	r25, r19
    380c:	1c f4       	brge	.+6      	; 0x3814 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x3c>
    380e:	7c 01       	movw	r14, r24
    3810:	e4 1a       	sub	r14, r20
    3812:	f5 0a       	sbc	r15, r21
  setAddrWindow(x, y, x, y+h-1);
    3814:	0f ef       	ldi	r16, 0xFF	; 255
    3816:	04 0f       	add	r16, r20
    3818:	0e 0d       	add	r16, r14
    381a:	26 2f       	mov	r18, r22
    381c:	ce 01       	movw	r24, r28
    381e:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;
    
#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.beginTransaction(mySPISettings);
    3822:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3824:	88 23       	and	r24, r24
    3826:	31 f0       	breq	.+12     	; 0x3834 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x5c>
    3828:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZL13mySPISettings>
    382c:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <_ZL13mySPISettings+0x1>
    3830:	0e 94 08 18 	call	0x3010	; 0x3010 <_ZN8SPIClass16beginTransactionE11SPISettings>
#endif

  DC_HIGH();
    3834:	ce 01       	movw	r24, r28
    3836:	0e 94 ca 18 	call	0x3194	; 0x3194 <_ZN15Adafruit_ST77357DC_HIGHEv>
  CS_LOW();
    383a:	ce 01       	movw	r24, r28
    383c:	0e 94 8c 18 	call	0x3118	; 0x3118 <_ZN15Adafruit_ST77356CS_LOWEv>
  while (h--) {
    3840:	e1 14       	cp	r14, r1
    3842:	f1 04       	cpc	r15, r1
    3844:	61 f0       	breq	.+24     	; 0x385e <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x86>
    spiwrite(hi);
    3846:	61 2f       	mov	r22, r17
    3848:	ce 01       	movw	r24, r28
    384a:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN15Adafruit_ST77358spiwriteEh>
    spiwrite(lo);
    384e:	6d 2d       	mov	r22, r13
    3850:	ce 01       	movw	r24, r28
    3852:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN15Adafruit_ST77358spiwriteEh>
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	e8 1a       	sub	r14, r24
    385a:	f1 08       	sbc	r15, r1
    385c:	f1 cf       	rjmp	.-30     	; 0x3840 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x68>
  }
  CS_HIGH();
    385e:	ce 01       	movw	r24, r28
    3860:	0e 94 81 18 	call	0x3102	; 0x3102 <_ZN15Adafruit_ST77357CS_HIGHEv>

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    3864:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3866:	88 23       	and	r24, r24
    3868:	49 f0       	breq	.+18     	; 0x387c <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xa4>
#endif
}
    386a:	df 91       	pop	r29
    386c:	cf 91       	pop	r28
    386e:	1f 91       	pop	r17
    3870:	0f 91       	pop	r16
    3872:	ff 90       	pop	r15
    3874:	ef 90       	pop	r14
    3876:	df 90       	pop	r13
    spiwrite(lo);
  }
  CS_HIGH();

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    3878:	0c 94 22 18 	jmp	0x3044	; 0x3044 <_ZN8SPIClass14endTransactionEv>
#endif
}
    387c:	df 91       	pop	r29
    387e:	cf 91       	pop	r28
    3880:	1f 91       	pop	r17
    3882:	0f 91       	pop	r16
    3884:	ff 90       	pop	r15
    3886:	ef 90       	pop	r14
    3888:	df 90       	pop	r13
    388a:	08 95       	ret

0000388c <_ZN15Adafruit_ST77359drawPixelEiij>:
#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)    SPI.endTransaction();
#endif
}

void Adafruit_ST7735::drawPixel(int16_t x, int16_t y, uint16_t color) {
    388c:	ff 92       	push	r15
    388e:	0f 93       	push	r16
    3890:	1f 93       	push	r17
    3892:	cf 93       	push	r28
    3894:	df 93       	push	r29
    3896:	ec 01       	movw	r28, r24

  if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
    3898:	77 fd       	sbrc	r23, 7
    389a:	39 c0       	rjmp	.+114    	; 0x390e <_ZN15Adafruit_ST77359drawPixelEiij+0x82>
    389c:	88 85       	ldd	r24, Y+8	; 0x08
    389e:	99 85       	ldd	r25, Y+9	; 0x09
    38a0:	68 17       	cp	r22, r24
    38a2:	79 07       	cpc	r23, r25
    38a4:	a4 f5       	brge	.+104    	; 0x390e <_ZN15Adafruit_ST77359drawPixelEiij+0x82>
    38a6:	57 fd       	sbrc	r21, 7
    38a8:	32 c0       	rjmp	.+100    	; 0x390e <_ZN15Adafruit_ST77359drawPixelEiij+0x82>
    38aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    38ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    38ae:	48 17       	cp	r20, r24
    38b0:	59 07       	cpc	r21, r25
    38b2:	6c f5       	brge	.+90     	; 0x390e <_ZN15Adafruit_ST77359drawPixelEiij+0x82>
    38b4:	f3 2e       	mov	r15, r19
    38b6:	12 2f       	mov	r17, r18

  setAddrWindow(x,y,x+1,y+1);
    38b8:	01 e0       	ldi	r16, 0x01	; 1
    38ba:	04 0f       	add	r16, r20
    38bc:	21 e0       	ldi	r18, 0x01	; 1
    38be:	26 0f       	add	r18, r22
    38c0:	ce 01       	movw	r24, r28
    38c2:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)     SPI.beginTransaction(mySPISettings);
    38c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38c8:	88 23       	and	r24, r24
    38ca:	31 f0       	breq	.+12     	; 0x38d8 <_ZN15Adafruit_ST77359drawPixelEiij+0x4c>
    38cc:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZL13mySPISettings>
    38d0:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <_ZL13mySPISettings+0x1>
    38d4:	0e 94 08 18 	call	0x3010	; 0x3010 <_ZN8SPIClass16beginTransactionE11SPISettings>
#endif

  DC_HIGH();
    38d8:	ce 01       	movw	r24, r28
    38da:	0e 94 ca 18 	call	0x3194	; 0x3194 <_ZN15Adafruit_ST77357DC_HIGHEv>
  CS_LOW();
    38de:	ce 01       	movw	r24, r28
    38e0:	0e 94 8c 18 	call	0x3118	; 0x3118 <_ZN15Adafruit_ST77356CS_LOWEv>
  spiwrite(color >> 8);
    38e4:	6f 2d       	mov	r22, r15
    38e6:	ce 01       	movw	r24, r28
    38e8:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN15Adafruit_ST77358spiwriteEh>
  spiwrite(color);
    38ec:	61 2f       	mov	r22, r17
    38ee:	ce 01       	movw	r24, r28
    38f0:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN15Adafruit_ST77358spiwriteEh>
  CS_HIGH();
    38f4:	ce 01       	movw	r24, r28
    38f6:	0e 94 81 18 	call	0x3102	; 0x3102 <_ZN15Adafruit_ST77357CS_HIGHEv>

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)     SPI.endTransaction();
    38fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38fc:	88 23       	and	r24, r24
    38fe:	39 f0       	breq	.+14     	; 0x390e <_ZN15Adafruit_ST77359drawPixelEiij+0x82>
#endif
}
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	1f 91       	pop	r17
    3906:	0f 91       	pop	r16
    3908:	ff 90       	pop	r15
  spiwrite(color >> 8);
  spiwrite(color);
  CS_HIGH();

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)     SPI.endTransaction();
    390a:	0c 94 22 18 	jmp	0x3044	; 0x3044 <_ZN8SPIClass14endTransactionEv>
#endif
}
    390e:	df 91       	pop	r29
    3910:	cf 91       	pop	r28
    3912:	1f 91       	pop	r17
    3914:	0f 91       	pop	r16
    3916:	ff 90       	pop	r15
    3918:	08 95       	ret

0000391a <_GLOBAL__sub_I__ZN15Adafruit_ST7735C2Eaaaaa>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    391a:	e5 e8       	ldi	r30, 0x85	; 133
    391c:	f3 e0       	ldi	r31, 0x03	; 3
    391e:	80 e5       	ldi	r24, 0x50	; 80
    3920:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    3922:	11 82       	std	Z+1, r1	; 0x01
    3924:	08 95       	ret

00003926 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    3926:	cf 93       	push	r28
  uint8_t sreg = SREG;
    3928:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    392a:	f8 94       	cli
  if (!initialized) {
    392c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <_ZN8SPIClass11initializedE>
    3930:	81 11       	cpse	r24, r1
    3932:	27 c0       	rjmp	.+78     	; 0x3982 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    3934:	e6 ee       	ldi	r30, 0xE6	; 230
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    393a:	e2 ed       	ldi	r30, 0xD2	; 210
    393c:	f0 e0       	ldi	r31, 0x00	; 0
    393e:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    3940:	e8 2f       	mov	r30, r24
    3942:	f0 e0       	ldi	r31, 0x00	; 0
    3944:	ee 0f       	add	r30, r30
    3946:	ff 1f       	adc	r31, r31
    3948:	e6 50       	subi	r30, 0x06	; 6
    394a:	ff 4f       	sbci	r31, 0xFF	; 255
    394c:	a5 91       	lpm	r26, Z+
    394e:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    3950:	ec 91       	ld	r30, X
    3952:	e9 23       	and	r30, r25
    3954:	21 f4       	brne	.+8      	; 0x395e <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    3956:	61 e0       	ldi	r22, 0x01	; 1
    3958:	8a e0       	ldi	r24, 0x0A	; 10
    395a:	0e 94 4e 11 	call	0x229c	; 0x229c <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    395e:	61 e0       	ldi	r22, 0x01	; 1
    3960:	8a e0       	ldi	r24, 0x0A	; 10
    3962:	0e 94 12 11 	call	0x2224	; 0x2224 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    3966:	8c b5       	in	r24, 0x2c	; 44
    3968:	80 61       	ori	r24, 0x10	; 16
    396a:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    396c:	8c b5       	in	r24, 0x2c	; 44
    396e:	80 64       	ori	r24, 0x40	; 64
    3970:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    3972:	61 e0       	ldi	r22, 0x01	; 1
    3974:	8d e0       	ldi	r24, 0x0D	; 13
    3976:	0e 94 12 11 	call	0x2224	; 0x2224 <pinMode>
    pinMode(MOSI, OUTPUT);
    397a:	61 e0       	ldi	r22, 0x01	; 1
    397c:	8b e0       	ldi	r24, 0x0B	; 11
    397e:	0e 94 12 11 	call	0x2224	; 0x2224 <pinMode>
  }
  initialized++; // reference count
    3982:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <_ZN8SPIClass11initializedE>
    3986:	8f 5f       	subi	r24, 0xFF	; 255
    3988:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <_ZN8SPIClass11initializedE>
  SREG = sreg;
    398c:	cf bf       	out	0x3f, r28	; 63
}
    398e:	cf 91       	pop	r28
    3990:	08 95       	ret

00003992 <__cxa_pure_virtual>:
    3992:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <abort>

00003996 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3996:	08 95       	ret

00003998 <__unordsf2>:
    3998:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__fp_cmp>
    399c:	88 0b       	sbc	r24, r24
    399e:	99 0b       	sbc	r25, r25
    39a0:	08 95       	ret

000039a2 <__udivmodsi4>:
    39a2:	a1 e2       	ldi	r26, 0x21	; 33
    39a4:	1a 2e       	mov	r1, r26
    39a6:	aa 1b       	sub	r26, r26
    39a8:	bb 1b       	sub	r27, r27
    39aa:	fd 01       	movw	r30, r26
    39ac:	0d c0       	rjmp	.+26     	; 0x39c8 <__udivmodsi4_ep>

000039ae <__udivmodsi4_loop>:
    39ae:	aa 1f       	adc	r26, r26
    39b0:	bb 1f       	adc	r27, r27
    39b2:	ee 1f       	adc	r30, r30
    39b4:	ff 1f       	adc	r31, r31
    39b6:	a2 17       	cp	r26, r18
    39b8:	b3 07       	cpc	r27, r19
    39ba:	e4 07       	cpc	r30, r20
    39bc:	f5 07       	cpc	r31, r21
    39be:	20 f0       	brcs	.+8      	; 0x39c8 <__udivmodsi4_ep>
    39c0:	a2 1b       	sub	r26, r18
    39c2:	b3 0b       	sbc	r27, r19
    39c4:	e4 0b       	sbc	r30, r20
    39c6:	f5 0b       	sbc	r31, r21

000039c8 <__udivmodsi4_ep>:
    39c8:	66 1f       	adc	r22, r22
    39ca:	77 1f       	adc	r23, r23
    39cc:	88 1f       	adc	r24, r24
    39ce:	99 1f       	adc	r25, r25
    39d0:	1a 94       	dec	r1
    39d2:	69 f7       	brne	.-38     	; 0x39ae <__udivmodsi4_loop>
    39d4:	60 95       	com	r22
    39d6:	70 95       	com	r23
    39d8:	80 95       	com	r24
    39da:	90 95       	com	r25
    39dc:	9b 01       	movw	r18, r22
    39de:	ac 01       	movw	r20, r24
    39e0:	bd 01       	movw	r22, r26
    39e2:	cf 01       	movw	r24, r30
    39e4:	08 95       	ret

000039e6 <__tablejump2__>:
    39e6:	ee 0f       	add	r30, r30
    39e8:	ff 1f       	adc	r31, r31
    39ea:	05 90       	lpm	r0, Z+
    39ec:	f4 91       	lpm	r31, Z
    39ee:	e0 2d       	mov	r30, r0
    39f0:	09 94       	ijmp

000039f2 <malloc>:
    39f2:	0f 93       	push	r16
    39f4:	1f 93       	push	r17
    39f6:	cf 93       	push	r28
    39f8:	df 93       	push	r29
    39fa:	82 30       	cpi	r24, 0x02	; 2
    39fc:	91 05       	cpc	r25, r1
    39fe:	10 f4       	brcc	.+4      	; 0x3a04 <malloc+0x12>
    3a00:	82 e0       	ldi	r24, 0x02	; 2
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <__flp>
    3a08:	f0 91 8e 03 	lds	r31, 0x038E	; 0x80038e <__flp+0x1>
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	a0 e0       	ldi	r26, 0x00	; 0
    3a12:	b0 e0       	ldi	r27, 0x00	; 0
    3a14:	30 97       	sbiw	r30, 0x00	; 0
    3a16:	19 f1       	breq	.+70     	; 0x3a5e <malloc+0x6c>
    3a18:	40 81       	ld	r20, Z
    3a1a:	51 81       	ldd	r21, Z+1	; 0x01
    3a1c:	02 81       	ldd	r16, Z+2	; 0x02
    3a1e:	13 81       	ldd	r17, Z+3	; 0x03
    3a20:	48 17       	cp	r20, r24
    3a22:	59 07       	cpc	r21, r25
    3a24:	c8 f0       	brcs	.+50     	; 0x3a58 <malloc+0x66>
    3a26:	84 17       	cp	r24, r20
    3a28:	95 07       	cpc	r25, r21
    3a2a:	69 f4       	brne	.+26     	; 0x3a46 <malloc+0x54>
    3a2c:	10 97       	sbiw	r26, 0x00	; 0
    3a2e:	31 f0       	breq	.+12     	; 0x3a3c <malloc+0x4a>
    3a30:	12 96       	adiw	r26, 0x02	; 2
    3a32:	0c 93       	st	X, r16
    3a34:	12 97       	sbiw	r26, 0x02	; 2
    3a36:	13 96       	adiw	r26, 0x03	; 3
    3a38:	1c 93       	st	X, r17
    3a3a:	27 c0       	rjmp	.+78     	; 0x3a8a <malloc+0x98>
    3a3c:	00 93 8d 03 	sts	0x038D, r16	; 0x80038d <__flp>
    3a40:	10 93 8e 03 	sts	0x038E, r17	; 0x80038e <__flp+0x1>
    3a44:	22 c0       	rjmp	.+68     	; 0x3a8a <malloc+0x98>
    3a46:	21 15       	cp	r18, r1
    3a48:	31 05       	cpc	r19, r1
    3a4a:	19 f0       	breq	.+6      	; 0x3a52 <malloc+0x60>
    3a4c:	42 17       	cp	r20, r18
    3a4e:	53 07       	cpc	r21, r19
    3a50:	18 f4       	brcc	.+6      	; 0x3a58 <malloc+0x66>
    3a52:	9a 01       	movw	r18, r20
    3a54:	bd 01       	movw	r22, r26
    3a56:	ef 01       	movw	r28, r30
    3a58:	df 01       	movw	r26, r30
    3a5a:	f8 01       	movw	r30, r16
    3a5c:	db cf       	rjmp	.-74     	; 0x3a14 <malloc+0x22>
    3a5e:	21 15       	cp	r18, r1
    3a60:	31 05       	cpc	r19, r1
    3a62:	f9 f0       	breq	.+62     	; 0x3aa2 <malloc+0xb0>
    3a64:	28 1b       	sub	r18, r24
    3a66:	39 0b       	sbc	r19, r25
    3a68:	24 30       	cpi	r18, 0x04	; 4
    3a6a:	31 05       	cpc	r19, r1
    3a6c:	80 f4       	brcc	.+32     	; 0x3a8e <malloc+0x9c>
    3a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a70:	9b 81       	ldd	r25, Y+3	; 0x03
    3a72:	61 15       	cp	r22, r1
    3a74:	71 05       	cpc	r23, r1
    3a76:	21 f0       	breq	.+8      	; 0x3a80 <malloc+0x8e>
    3a78:	fb 01       	movw	r30, r22
    3a7a:	93 83       	std	Z+3, r25	; 0x03
    3a7c:	82 83       	std	Z+2, r24	; 0x02
    3a7e:	04 c0       	rjmp	.+8      	; 0x3a88 <malloc+0x96>
    3a80:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <__flp+0x1>
    3a84:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <__flp>
    3a88:	fe 01       	movw	r30, r28
    3a8a:	32 96       	adiw	r30, 0x02	; 2
    3a8c:	44 c0       	rjmp	.+136    	; 0x3b16 <malloc+0x124>
    3a8e:	fe 01       	movw	r30, r28
    3a90:	e2 0f       	add	r30, r18
    3a92:	f3 1f       	adc	r31, r19
    3a94:	81 93       	st	Z+, r24
    3a96:	91 93       	st	Z+, r25
    3a98:	22 50       	subi	r18, 0x02	; 2
    3a9a:	31 09       	sbc	r19, r1
    3a9c:	39 83       	std	Y+1, r19	; 0x01
    3a9e:	28 83       	st	Y, r18
    3aa0:	3a c0       	rjmp	.+116    	; 0x3b16 <malloc+0x124>
    3aa2:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <__brkval>
    3aa6:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <__brkval+0x1>
    3aaa:	23 2b       	or	r18, r19
    3aac:	41 f4       	brne	.+16     	; 0x3abe <malloc+0xcc>
    3aae:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3ab2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3ab6:	30 93 8c 03 	sts	0x038C, r19	; 0x80038c <__brkval+0x1>
    3aba:	20 93 8b 03 	sts	0x038B, r18	; 0x80038b <__brkval>
    3abe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3ac2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3ac6:	21 15       	cp	r18, r1
    3ac8:	31 05       	cpc	r19, r1
    3aca:	41 f4       	brne	.+16     	; 0x3adc <malloc+0xea>
    3acc:	2d b7       	in	r18, 0x3d	; 61
    3ace:	3e b7       	in	r19, 0x3e	; 62
    3ad0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3ad4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3ad8:	24 1b       	sub	r18, r20
    3ada:	35 0b       	sbc	r19, r21
    3adc:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <__brkval>
    3ae0:	f0 91 8c 03 	lds	r31, 0x038C	; 0x80038c <__brkval+0x1>
    3ae4:	e2 17       	cp	r30, r18
    3ae6:	f3 07       	cpc	r31, r19
    3ae8:	a0 f4       	brcc	.+40     	; 0x3b12 <malloc+0x120>
    3aea:	2e 1b       	sub	r18, r30
    3aec:	3f 0b       	sbc	r19, r31
    3aee:	28 17       	cp	r18, r24
    3af0:	39 07       	cpc	r19, r25
    3af2:	78 f0       	brcs	.+30     	; 0x3b12 <malloc+0x120>
    3af4:	ac 01       	movw	r20, r24
    3af6:	4e 5f       	subi	r20, 0xFE	; 254
    3af8:	5f 4f       	sbci	r21, 0xFF	; 255
    3afa:	24 17       	cp	r18, r20
    3afc:	35 07       	cpc	r19, r21
    3afe:	48 f0       	brcs	.+18     	; 0x3b12 <malloc+0x120>
    3b00:	4e 0f       	add	r20, r30
    3b02:	5f 1f       	adc	r21, r31
    3b04:	50 93 8c 03 	sts	0x038C, r21	; 0x80038c <__brkval+0x1>
    3b08:	40 93 8b 03 	sts	0x038B, r20	; 0x80038b <__brkval>
    3b0c:	81 93       	st	Z+, r24
    3b0e:	91 93       	st	Z+, r25
    3b10:	02 c0       	rjmp	.+4      	; 0x3b16 <malloc+0x124>
    3b12:	e0 e0       	ldi	r30, 0x00	; 0
    3b14:	f0 e0       	ldi	r31, 0x00	; 0
    3b16:	cf 01       	movw	r24, r30
    3b18:	df 91       	pop	r29
    3b1a:	cf 91       	pop	r28
    3b1c:	1f 91       	pop	r17
    3b1e:	0f 91       	pop	r16
    3b20:	08 95       	ret

00003b22 <free>:
    3b22:	cf 93       	push	r28
    3b24:	df 93       	push	r29
    3b26:	00 97       	sbiw	r24, 0x00	; 0
    3b28:	09 f4       	brne	.+2      	; 0x3b2c <free+0xa>
    3b2a:	81 c0       	rjmp	.+258    	; 0x3c2e <free+0x10c>
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	32 97       	sbiw	r30, 0x02	; 2
    3b30:	13 82       	std	Z+3, r1	; 0x03
    3b32:	12 82       	std	Z+2, r1	; 0x02
    3b34:	a0 91 8d 03 	lds	r26, 0x038D	; 0x80038d <__flp>
    3b38:	b0 91 8e 03 	lds	r27, 0x038E	; 0x80038e <__flp+0x1>
    3b3c:	10 97       	sbiw	r26, 0x00	; 0
    3b3e:	81 f4       	brne	.+32     	; 0x3b60 <free+0x3e>
    3b40:	20 81       	ld	r18, Z
    3b42:	31 81       	ldd	r19, Z+1	; 0x01
    3b44:	82 0f       	add	r24, r18
    3b46:	93 1f       	adc	r25, r19
    3b48:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <__brkval>
    3b4c:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <__brkval+0x1>
    3b50:	28 17       	cp	r18, r24
    3b52:	39 07       	cpc	r19, r25
    3b54:	51 f5       	brne	.+84     	; 0x3baa <free+0x88>
    3b56:	f0 93 8c 03 	sts	0x038C, r31	; 0x80038c <__brkval+0x1>
    3b5a:	e0 93 8b 03 	sts	0x038B, r30	; 0x80038b <__brkval>
    3b5e:	67 c0       	rjmp	.+206    	; 0x3c2e <free+0x10c>
    3b60:	ed 01       	movw	r28, r26
    3b62:	20 e0       	ldi	r18, 0x00	; 0
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	ce 17       	cp	r28, r30
    3b68:	df 07       	cpc	r29, r31
    3b6a:	40 f4       	brcc	.+16     	; 0x3b7c <free+0x5a>
    3b6c:	4a 81       	ldd	r20, Y+2	; 0x02
    3b6e:	5b 81       	ldd	r21, Y+3	; 0x03
    3b70:	9e 01       	movw	r18, r28
    3b72:	41 15       	cp	r20, r1
    3b74:	51 05       	cpc	r21, r1
    3b76:	f1 f0       	breq	.+60     	; 0x3bb4 <free+0x92>
    3b78:	ea 01       	movw	r28, r20
    3b7a:	f5 cf       	rjmp	.-22     	; 0x3b66 <free+0x44>
    3b7c:	d3 83       	std	Z+3, r29	; 0x03
    3b7e:	c2 83       	std	Z+2, r28	; 0x02
    3b80:	40 81       	ld	r20, Z
    3b82:	51 81       	ldd	r21, Z+1	; 0x01
    3b84:	84 0f       	add	r24, r20
    3b86:	95 1f       	adc	r25, r21
    3b88:	c8 17       	cp	r28, r24
    3b8a:	d9 07       	cpc	r29, r25
    3b8c:	59 f4       	brne	.+22     	; 0x3ba4 <free+0x82>
    3b8e:	88 81       	ld	r24, Y
    3b90:	99 81       	ldd	r25, Y+1	; 0x01
    3b92:	84 0f       	add	r24, r20
    3b94:	95 1f       	adc	r25, r21
    3b96:	02 96       	adiw	r24, 0x02	; 2
    3b98:	91 83       	std	Z+1, r25	; 0x01
    3b9a:	80 83       	st	Z, r24
    3b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba0:	93 83       	std	Z+3, r25	; 0x03
    3ba2:	82 83       	std	Z+2, r24	; 0x02
    3ba4:	21 15       	cp	r18, r1
    3ba6:	31 05       	cpc	r19, r1
    3ba8:	29 f4       	brne	.+10     	; 0x3bb4 <free+0x92>
    3baa:	f0 93 8e 03 	sts	0x038E, r31	; 0x80038e <__flp+0x1>
    3bae:	e0 93 8d 03 	sts	0x038D, r30	; 0x80038d <__flp>
    3bb2:	3d c0       	rjmp	.+122    	; 0x3c2e <free+0x10c>
    3bb4:	e9 01       	movw	r28, r18
    3bb6:	fb 83       	std	Y+3, r31	; 0x03
    3bb8:	ea 83       	std	Y+2, r30	; 0x02
    3bba:	49 91       	ld	r20, Y+
    3bbc:	59 91       	ld	r21, Y+
    3bbe:	c4 0f       	add	r28, r20
    3bc0:	d5 1f       	adc	r29, r21
    3bc2:	ec 17       	cp	r30, r28
    3bc4:	fd 07       	cpc	r31, r29
    3bc6:	61 f4       	brne	.+24     	; 0x3be0 <free+0xbe>
    3bc8:	80 81       	ld	r24, Z
    3bca:	91 81       	ldd	r25, Z+1	; 0x01
    3bcc:	84 0f       	add	r24, r20
    3bce:	95 1f       	adc	r25, r21
    3bd0:	02 96       	adiw	r24, 0x02	; 2
    3bd2:	e9 01       	movw	r28, r18
    3bd4:	99 83       	std	Y+1, r25	; 0x01
    3bd6:	88 83       	st	Y, r24
    3bd8:	82 81       	ldd	r24, Z+2	; 0x02
    3bda:	93 81       	ldd	r25, Z+3	; 0x03
    3bdc:	9b 83       	std	Y+3, r25	; 0x03
    3bde:	8a 83       	std	Y+2, r24	; 0x02
    3be0:	e0 e0       	ldi	r30, 0x00	; 0
    3be2:	f0 e0       	ldi	r31, 0x00	; 0
    3be4:	12 96       	adiw	r26, 0x02	; 2
    3be6:	8d 91       	ld	r24, X+
    3be8:	9c 91       	ld	r25, X
    3bea:	13 97       	sbiw	r26, 0x03	; 3
    3bec:	00 97       	sbiw	r24, 0x00	; 0
    3bee:	19 f0       	breq	.+6      	; 0x3bf6 <free+0xd4>
    3bf0:	fd 01       	movw	r30, r26
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	f7 cf       	rjmp	.-18     	; 0x3be4 <free+0xc2>
    3bf6:	8d 91       	ld	r24, X+
    3bf8:	9c 91       	ld	r25, X
    3bfa:	11 97       	sbiw	r26, 0x01	; 1
    3bfc:	9d 01       	movw	r18, r26
    3bfe:	2e 5f       	subi	r18, 0xFE	; 254
    3c00:	3f 4f       	sbci	r19, 0xFF	; 255
    3c02:	82 0f       	add	r24, r18
    3c04:	93 1f       	adc	r25, r19
    3c06:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <__brkval>
    3c0a:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <__brkval+0x1>
    3c0e:	28 17       	cp	r18, r24
    3c10:	39 07       	cpc	r19, r25
    3c12:	69 f4       	brne	.+26     	; 0x3c2e <free+0x10c>
    3c14:	30 97       	sbiw	r30, 0x00	; 0
    3c16:	29 f4       	brne	.+10     	; 0x3c22 <free+0x100>
    3c18:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <__flp+0x1>
    3c1c:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <__flp>
    3c20:	02 c0       	rjmp	.+4      	; 0x3c26 <free+0x104>
    3c22:	13 82       	std	Z+3, r1	; 0x03
    3c24:	12 82       	std	Z+2, r1	; 0x02
    3c26:	b0 93 8c 03 	sts	0x038C, r27	; 0x80038c <__brkval+0x1>
    3c2a:	a0 93 8b 03 	sts	0x038B, r26	; 0x80038b <__brkval>
    3c2e:	df 91       	pop	r29
    3c30:	cf 91       	pop	r28
    3c32:	08 95       	ret

00003c34 <realloc>:
    3c34:	a0 e0       	ldi	r26, 0x00	; 0
    3c36:	b0 e0       	ldi	r27, 0x00	; 0
    3c38:	e0 e2       	ldi	r30, 0x20	; 32
    3c3a:	fe e1       	ldi	r31, 0x1E	; 30
    3c3c:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__prologue_saves__+0x8>
    3c40:	ec 01       	movw	r28, r24
    3c42:	00 97       	sbiw	r24, 0x00	; 0
    3c44:	21 f4       	brne	.+8      	; 0x3c4e <realloc+0x1a>
    3c46:	cb 01       	movw	r24, r22
    3c48:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <malloc>
    3c4c:	b4 c0       	rjmp	.+360    	; 0x3db6 <realloc+0x182>
    3c4e:	fc 01       	movw	r30, r24
    3c50:	e6 0f       	add	r30, r22
    3c52:	f7 1f       	adc	r31, r23
    3c54:	9c 01       	movw	r18, r24
    3c56:	22 50       	subi	r18, 0x02	; 2
    3c58:	31 09       	sbc	r19, r1
    3c5a:	e2 17       	cp	r30, r18
    3c5c:	f3 07       	cpc	r31, r19
    3c5e:	08 f4       	brcc	.+2      	; 0x3c62 <realloc+0x2e>
    3c60:	a8 c0       	rjmp	.+336    	; 0x3db2 <realloc+0x17e>
    3c62:	d9 01       	movw	r26, r18
    3c64:	0d 91       	ld	r16, X+
    3c66:	1c 91       	ld	r17, X
    3c68:	11 97       	sbiw	r26, 0x01	; 1
    3c6a:	06 17       	cp	r16, r22
    3c6c:	17 07       	cpc	r17, r23
    3c6e:	b0 f0       	brcs	.+44     	; 0x3c9c <realloc+0x68>
    3c70:	05 30       	cpi	r16, 0x05	; 5
    3c72:	11 05       	cpc	r17, r1
    3c74:	08 f4       	brcc	.+2      	; 0x3c78 <realloc+0x44>
    3c76:	9b c0       	rjmp	.+310    	; 0x3dae <realloc+0x17a>
    3c78:	c8 01       	movw	r24, r16
    3c7a:	04 97       	sbiw	r24, 0x04	; 4
    3c7c:	86 17       	cp	r24, r22
    3c7e:	97 07       	cpc	r25, r23
    3c80:	08 f4       	brcc	.+2      	; 0x3c84 <realloc+0x50>
    3c82:	95 c0       	rjmp	.+298    	; 0x3dae <realloc+0x17a>
    3c84:	02 50       	subi	r16, 0x02	; 2
    3c86:	11 09       	sbc	r17, r1
    3c88:	06 1b       	sub	r16, r22
    3c8a:	17 0b       	sbc	r17, r23
    3c8c:	01 93       	st	Z+, r16
    3c8e:	11 93       	st	Z+, r17
    3c90:	6d 93       	st	X+, r22
    3c92:	7c 93       	st	X, r23
    3c94:	cf 01       	movw	r24, r30
    3c96:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <free>
    3c9a:	89 c0       	rjmp	.+274    	; 0x3dae <realloc+0x17a>
    3c9c:	5b 01       	movw	r10, r22
    3c9e:	a0 1a       	sub	r10, r16
    3ca0:	b1 0a       	sbc	r11, r17
    3ca2:	4c 01       	movw	r8, r24
    3ca4:	80 0e       	add	r8, r16
    3ca6:	91 1e       	adc	r9, r17
    3ca8:	a0 91 8d 03 	lds	r26, 0x038D	; 0x80038d <__flp>
    3cac:	b0 91 8e 03 	lds	r27, 0x038E	; 0x80038e <__flp+0x1>
    3cb0:	61 2c       	mov	r6, r1
    3cb2:	71 2c       	mov	r7, r1
    3cb4:	e1 2c       	mov	r14, r1
    3cb6:	f1 2c       	mov	r15, r1
    3cb8:	10 97       	sbiw	r26, 0x00	; 0
    3cba:	09 f4       	brne	.+2      	; 0x3cbe <realloc+0x8a>
    3cbc:	46 c0       	rjmp	.+140    	; 0x3d4a <realloc+0x116>
    3cbe:	8d 91       	ld	r24, X+
    3cc0:	9c 91       	ld	r25, X
    3cc2:	11 97       	sbiw	r26, 0x01	; 1
    3cc4:	a8 15       	cp	r26, r8
    3cc6:	b9 05       	cpc	r27, r9
    3cc8:	b1 f5       	brne	.+108    	; 0x3d36 <realloc+0x102>
    3cca:	6c 01       	movw	r12, r24
    3ccc:	42 e0       	ldi	r20, 0x02	; 2
    3cce:	c4 0e       	add	r12, r20
    3cd0:	d1 1c       	adc	r13, r1
    3cd2:	ca 14       	cp	r12, r10
    3cd4:	db 04       	cpc	r13, r11
    3cd6:	78 f1       	brcs	.+94     	; 0x3d36 <realloc+0x102>
    3cd8:	4c 01       	movw	r8, r24
    3cda:	8a 18       	sub	r8, r10
    3cdc:	9b 08       	sbc	r9, r11
    3cde:	64 01       	movw	r12, r8
    3ce0:	42 e0       	ldi	r20, 0x02	; 2
    3ce2:	c4 0e       	add	r12, r20
    3ce4:	d1 1c       	adc	r13, r1
    3ce6:	12 96       	adiw	r26, 0x02	; 2
    3ce8:	bc 90       	ld	r11, X
    3cea:	12 97       	sbiw	r26, 0x02	; 2
    3cec:	13 96       	adiw	r26, 0x03	; 3
    3cee:	ac 91       	ld	r26, X
    3cf0:	b5 e0       	ldi	r27, 0x05	; 5
    3cf2:	cb 16       	cp	r12, r27
    3cf4:	d1 04       	cpc	r13, r1
    3cf6:	40 f0       	brcs	.+16     	; 0x3d08 <realloc+0xd4>
    3cf8:	b2 82       	std	Z+2, r11	; 0x02
    3cfa:	a3 83       	std	Z+3, r26	; 0x03
    3cfc:	91 82       	std	Z+1, r9	; 0x01
    3cfe:	80 82       	st	Z, r8
    3d00:	d9 01       	movw	r26, r18
    3d02:	6d 93       	st	X+, r22
    3d04:	7c 93       	st	X, r23
    3d06:	09 c0       	rjmp	.+18     	; 0x3d1a <realloc+0xe6>
    3d08:	0e 5f       	subi	r16, 0xFE	; 254
    3d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d0c:	80 0f       	add	r24, r16
    3d0e:	91 1f       	adc	r25, r17
    3d10:	f9 01       	movw	r30, r18
    3d12:	91 83       	std	Z+1, r25	; 0x01
    3d14:	80 83       	st	Z, r24
    3d16:	eb 2d       	mov	r30, r11
    3d18:	fa 2f       	mov	r31, r26
    3d1a:	e1 14       	cp	r14, r1
    3d1c:	f1 04       	cpc	r15, r1
    3d1e:	31 f0       	breq	.+12     	; 0x3d2c <realloc+0xf8>
    3d20:	d7 01       	movw	r26, r14
    3d22:	13 96       	adiw	r26, 0x03	; 3
    3d24:	fc 93       	st	X, r31
    3d26:	ee 93       	st	-X, r30
    3d28:	12 97       	sbiw	r26, 0x02	; 2
    3d2a:	41 c0       	rjmp	.+130    	; 0x3dae <realloc+0x17a>
    3d2c:	f0 93 8e 03 	sts	0x038E, r31	; 0x80038e <__flp+0x1>
    3d30:	e0 93 8d 03 	sts	0x038D, r30	; 0x80038d <__flp>
    3d34:	3c c0       	rjmp	.+120    	; 0x3dae <realloc+0x17a>
    3d36:	68 16       	cp	r6, r24
    3d38:	79 06       	cpc	r7, r25
    3d3a:	08 f4       	brcc	.+2      	; 0x3d3e <realloc+0x10a>
    3d3c:	3c 01       	movw	r6, r24
    3d3e:	7d 01       	movw	r14, r26
    3d40:	12 96       	adiw	r26, 0x02	; 2
    3d42:	0d 90       	ld	r0, X+
    3d44:	bc 91       	ld	r27, X
    3d46:	a0 2d       	mov	r26, r0
    3d48:	b7 cf       	rjmp	.-146    	; 0x3cb8 <realloc+0x84>
    3d4a:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <__brkval>
    3d4e:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <__brkval+0x1>
    3d52:	88 16       	cp	r8, r24
    3d54:	99 06       	cpc	r9, r25
    3d56:	e1 f4       	brne	.+56     	; 0x3d90 <realloc+0x15c>
    3d58:	66 16       	cp	r6, r22
    3d5a:	77 06       	cpc	r7, r23
    3d5c:	c8 f4       	brcc	.+50     	; 0x3d90 <realloc+0x15c>
    3d5e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3d62:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3d66:	00 97       	sbiw	r24, 0x00	; 0
    3d68:	41 f4       	brne	.+16     	; 0x3d7a <realloc+0x146>
    3d6a:	8d b7       	in	r24, 0x3d	; 61
    3d6c:	9e b7       	in	r25, 0x3e	; 62
    3d6e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3d72:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3d76:	84 1b       	sub	r24, r20
    3d78:	95 0b       	sbc	r25, r21
    3d7a:	e8 17       	cp	r30, r24
    3d7c:	f9 07       	cpc	r31, r25
    3d7e:	c8 f4       	brcc	.+50     	; 0x3db2 <realloc+0x17e>
    3d80:	f0 93 8c 03 	sts	0x038C, r31	; 0x80038c <__brkval+0x1>
    3d84:	e0 93 8b 03 	sts	0x038B, r30	; 0x80038b <__brkval>
    3d88:	f9 01       	movw	r30, r18
    3d8a:	71 83       	std	Z+1, r23	; 0x01
    3d8c:	60 83       	st	Z, r22
    3d8e:	0f c0       	rjmp	.+30     	; 0x3dae <realloc+0x17a>
    3d90:	cb 01       	movw	r24, r22
    3d92:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <malloc>
    3d96:	7c 01       	movw	r14, r24
    3d98:	00 97       	sbiw	r24, 0x00	; 0
    3d9a:	59 f0       	breq	.+22     	; 0x3db2 <realloc+0x17e>
    3d9c:	a8 01       	movw	r20, r16
    3d9e:	be 01       	movw	r22, r28
    3da0:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <memcpy>
    3da4:	ce 01       	movw	r24, r28
    3da6:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <free>
    3daa:	c7 01       	movw	r24, r14
    3dac:	04 c0       	rjmp	.+8      	; 0x3db6 <realloc+0x182>
    3dae:	ce 01       	movw	r24, r28
    3db0:	02 c0       	rjmp	.+4      	; 0x3db6 <realloc+0x182>
    3db2:	80 e0       	ldi	r24, 0x00	; 0
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	cd b7       	in	r28, 0x3d	; 61
    3db8:	de b7       	in	r29, 0x3e	; 62
    3dba:	ee e0       	ldi	r30, 0x0E	; 14
    3dbc:	0c 94 55 1f 	jmp	0x3eaa	; 0x3eaa <__epilogue_restores__+0x8>

00003dc0 <abort>:
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	f8 94       	cli
    3dc6:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <_exit>

00003dca <memcpy>:
    3dca:	fb 01       	movw	r30, r22
    3dcc:	dc 01       	movw	r26, r24
    3dce:	02 c0       	rjmp	.+4      	; 0x3dd4 <memcpy+0xa>
    3dd0:	01 90       	ld	r0, Z+
    3dd2:	0d 92       	st	X+, r0
    3dd4:	41 50       	subi	r20, 0x01	; 1
    3dd6:	50 40       	sbci	r21, 0x00	; 0
    3dd8:	d8 f7       	brcc	.-10     	; 0x3dd0 <memcpy+0x6>
    3dda:	08 95       	ret

00003ddc <strcpy>:
    3ddc:	fb 01       	movw	r30, r22
    3dde:	dc 01       	movw	r26, r24
    3de0:	01 90       	ld	r0, Z+
    3de2:	0d 92       	st	X+, r0
    3de4:	00 20       	and	r0, r0
    3de6:	e1 f7       	brne	.-8      	; 0x3de0 <strcpy+0x4>
    3de8:	08 95       	ret

00003dea <itoa>:
    3dea:	45 32       	cpi	r20, 0x25	; 37
    3dec:	51 05       	cpc	r21, r1
    3dee:	20 f4       	brcc	.+8      	; 0x3df8 <itoa+0xe>
    3df0:	42 30       	cpi	r20, 0x02	; 2
    3df2:	10 f0       	brcs	.+4      	; 0x3df8 <itoa+0xe>
    3df4:	0c 94 00 1f 	jmp	0x3e00	; 0x3e00 <__itoa_ncheck>
    3df8:	fb 01       	movw	r30, r22
    3dfa:	10 82       	st	Z, r1
    3dfc:	cb 01       	movw	r24, r22
    3dfe:	08 95       	ret

00003e00 <__itoa_ncheck>:
    3e00:	bb 27       	eor	r27, r27
    3e02:	4a 30       	cpi	r20, 0x0A	; 10
    3e04:	31 f4       	brne	.+12     	; 0x3e12 <__itoa_ncheck+0x12>
    3e06:	99 23       	and	r25, r25
    3e08:	22 f4       	brpl	.+8      	; 0x3e12 <__itoa_ncheck+0x12>
    3e0a:	bd e2       	ldi	r27, 0x2D	; 45
    3e0c:	90 95       	com	r25
    3e0e:	81 95       	neg	r24
    3e10:	9f 4f       	sbci	r25, 0xFF	; 255
    3e12:	0c 94 0c 1f 	jmp	0x3e18	; 0x3e18 <__utoa_common>

00003e16 <__utoa_ncheck>:
    3e16:	bb 27       	eor	r27, r27

00003e18 <__utoa_common>:
    3e18:	fb 01       	movw	r30, r22
    3e1a:	55 27       	eor	r21, r21
    3e1c:	aa 27       	eor	r26, r26
    3e1e:	88 0f       	add	r24, r24
    3e20:	99 1f       	adc	r25, r25
    3e22:	aa 1f       	adc	r26, r26
    3e24:	a4 17       	cp	r26, r20
    3e26:	10 f0       	brcs	.+4      	; 0x3e2c <__utoa_common+0x14>
    3e28:	a4 1b       	sub	r26, r20
    3e2a:	83 95       	inc	r24
    3e2c:	50 51       	subi	r21, 0x10	; 16
    3e2e:	b9 f7       	brne	.-18     	; 0x3e1e <__utoa_common+0x6>
    3e30:	a0 5d       	subi	r26, 0xD0	; 208
    3e32:	aa 33       	cpi	r26, 0x3A	; 58
    3e34:	08 f0       	brcs	.+2      	; 0x3e38 <__utoa_common+0x20>
    3e36:	a9 5d       	subi	r26, 0xD9	; 217
    3e38:	a1 93       	st	Z+, r26
    3e3a:	00 97       	sbiw	r24, 0x00	; 0
    3e3c:	79 f7       	brne	.-34     	; 0x3e1c <__utoa_common+0x4>
    3e3e:	b1 11       	cpse	r27, r1
    3e40:	b1 93       	st	Z+, r27
    3e42:	11 92       	st	Z+, r1
    3e44:	cb 01       	movw	r24, r22
    3e46:	0c 94 25 1f 	jmp	0x3e4a	; 0x3e4a <strrev>

00003e4a <strrev>:
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	fc 01       	movw	r30, r24
    3e4e:	67 2f       	mov	r22, r23
    3e50:	71 91       	ld	r23, Z+
    3e52:	77 23       	and	r23, r23
    3e54:	e1 f7       	brne	.-8      	; 0x3e4e <strrev+0x4>
    3e56:	32 97       	sbiw	r30, 0x02	; 2
    3e58:	04 c0       	rjmp	.+8      	; 0x3e62 <strrev+0x18>
    3e5a:	7c 91       	ld	r23, X
    3e5c:	6d 93       	st	X+, r22
    3e5e:	70 83       	st	Z, r23
    3e60:	62 91       	ld	r22, -Z
    3e62:	ae 17       	cp	r26, r30
    3e64:	bf 07       	cpc	r27, r31
    3e66:	c8 f3       	brcs	.-14     	; 0x3e5a <strrev+0x10>
    3e68:	08 95       	ret

00003e6a <__prologue_saves__>:
    3e6a:	2f 92       	push	r2
    3e6c:	3f 92       	push	r3
    3e6e:	4f 92       	push	r4
    3e70:	5f 92       	push	r5
    3e72:	6f 92       	push	r6
    3e74:	7f 92       	push	r7
    3e76:	8f 92       	push	r8
    3e78:	9f 92       	push	r9
    3e7a:	af 92       	push	r10
    3e7c:	bf 92       	push	r11
    3e7e:	cf 92       	push	r12
    3e80:	df 92       	push	r13
    3e82:	ef 92       	push	r14
    3e84:	ff 92       	push	r15
    3e86:	0f 93       	push	r16
    3e88:	1f 93       	push	r17
    3e8a:	cf 93       	push	r28
    3e8c:	df 93       	push	r29
    3e8e:	cd b7       	in	r28, 0x3d	; 61
    3e90:	de b7       	in	r29, 0x3e	; 62
    3e92:	ca 1b       	sub	r28, r26
    3e94:	db 0b       	sbc	r29, r27
    3e96:	0f b6       	in	r0, 0x3f	; 63
    3e98:	f8 94       	cli
    3e9a:	de bf       	out	0x3e, r29	; 62
    3e9c:	0f be       	out	0x3f, r0	; 63
    3e9e:	cd bf       	out	0x3d, r28	; 61
    3ea0:	09 94       	ijmp

00003ea2 <__epilogue_restores__>:
    3ea2:	2a 88       	ldd	r2, Y+18	; 0x12
    3ea4:	39 88       	ldd	r3, Y+17	; 0x11
    3ea6:	48 88       	ldd	r4, Y+16	; 0x10
    3ea8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3eaa:	6e 84       	ldd	r6, Y+14	; 0x0e
    3eac:	7d 84       	ldd	r7, Y+13	; 0x0d
    3eae:	8c 84       	ldd	r8, Y+12	; 0x0c
    3eb0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3eb2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3eb4:	b9 84       	ldd	r11, Y+9	; 0x09
    3eb6:	c8 84       	ldd	r12, Y+8	; 0x08
    3eb8:	df 80       	ldd	r13, Y+7	; 0x07
    3eba:	ee 80       	ldd	r14, Y+6	; 0x06
    3ebc:	fd 80       	ldd	r15, Y+5	; 0x05
    3ebe:	0c 81       	ldd	r16, Y+4	; 0x04
    3ec0:	1b 81       	ldd	r17, Y+3	; 0x03
    3ec2:	aa 81       	ldd	r26, Y+2	; 0x02
    3ec4:	b9 81       	ldd	r27, Y+1	; 0x01
    3ec6:	ce 0f       	add	r28, r30
    3ec8:	d1 1d       	adc	r29, r1
    3eca:	0f b6       	in	r0, 0x3f	; 63
    3ecc:	f8 94       	cli
    3ece:	de bf       	out	0x3e, r29	; 62
    3ed0:	0f be       	out	0x3f, r0	; 63
    3ed2:	cd bf       	out	0x3d, r28	; 61
    3ed4:	ed 01       	movw	r28, r26
    3ed6:	08 95       	ret

00003ed8 <_exit>:
    3ed8:	f8 94       	cli

00003eda <__stop_program>:
    3eda:	ff cf       	rjmp	.-2      	; 0x3eda <__stop_program>
