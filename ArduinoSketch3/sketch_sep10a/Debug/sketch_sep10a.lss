
sketch_sep10a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00003ee4  00003f78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ee4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f5  0080019a  0080019a  00004012  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004012  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004044  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000978  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015ec2  00000000  00000000  000049fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d5e  00000000  00000000  0001a8be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005c02  00000000  00000000  0001d61c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002980  00000000  00000000  00023220  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e9b  00000000  00000000  00025ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001266f  00000000  00000000  00029a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b38  00000000  00000000  0003c0aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__ctors_end>
       4:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
       8:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
       c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      10:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      14:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      18:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      1c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      20:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      24:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      28:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      2c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      30:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      34:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      38:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      3c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      40:	0c 94 07 10 	jmp	0x200e	; 0x200e <__vector_16>
      44:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      48:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__vector_18>
      4c:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__vector_19>
      50:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      54:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      58:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      5c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      60:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      64:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 05       	cpc	r19, r15
      96:	a8 4c       	sbci	r26, 0xC8	; 200
      98:	cd b2       	in	r12, 0x1d	; 29
      9a:	d4 4e       	sbci	r29, 0xE4	; 228
      9c:	b9 38       	cpi	r27, 0x89	; 137
      9e:	36 a9       	ldd	r19, Z+54	; 0x36
      a0:	02 0c       	add	r0, r2
      a2:	50 b9       	out	0x00, r21	; 0
      a4:	91 86       	std	Z+9, r9	; 0x09
      a6:	88 08       	sbc	r8, r8
      a8:	3c a6       	std	Y+44, r3	; 0x2c
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	2a be       	out	0x3a, r2	; 58
      ae:	00 00       	nop
      b0:	00 80       	ld	r0, Z
      b2:	3f 00       	.word	0x003f	; ????

000000b4 <__trampolines_end>:
      b4:	00 00       	nop
      b6:	00 08       	sbc	r0, r0
      b8:	00 02       	muls	r16, r16
      ba:	01 00       	.word	0x0001	; ????
      bc:	00 03       	mulsu	r16, r16
      be:	04 07       	cpc	r16, r20
	...

000000c8 <digital_pin_to_bit_mask_PGM>:
      c8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d8:	04 08 10 20                                         ... 

000000dc <digital_pin_to_port_PGM>:
      dc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ec:	03 03 03 03                                         ....

000000f0 <port_to_output_PGM>:
      f0:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000fa <port_to_mode_PGM>:
      fa:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000104 <_ZL4font>:
     104:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     114:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     124:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     134:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     144:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     154:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     164:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     174:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     184:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     194:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     1a4:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1b4:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     1c4:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     1d4:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     1e4:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     1f4:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     204:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     214:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     224:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     234:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     244:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     254:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     264:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     274:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     284:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     294:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     2a4:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     2b4:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     2c4:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     2d4:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     2e4:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     2f4:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     304:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     314:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     324:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     334:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     344:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     354:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     364:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     374:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     384:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     394:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     3a4:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     3b4:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     3c4:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     3d4:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     3e4:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     3f4:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     404:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     414:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     424:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     434:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     444:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     454:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     464:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     474:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     484:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     494:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     4a4:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     4b4:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     4c4:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     4d4:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     4e4:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     4f4:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     504:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     514:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     524:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     534:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     544:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     554:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     564:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     574:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     584:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     594:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     5a4:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     5b4:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     5c4:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     5d4:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     5e4:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     5f4:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000604 <_ZL5Rcmd3>:
     604:	04 e0 10 02 1c 07 12 37 32 29 2d 29 25 2b 39 00     .......72)-)%+9.
     614:	01 03 10 e1 10 03 1d 07 06 2e 2c 29 2d 2e 2e 37     ..........,)-..7
     624:	3f 00 00 02 10 13 80 0a 29 80 64                    ?.......).d

0000062f <_ZL16Rcmd2green160x80>:
     62f:	02 2a 04 00 00 00 7f 2b 04 00 00 00 9f              .*.....+.....

0000063c <_ZL13Rcmd2green144>:
     63c:	02 2a 04 00 00 00 7f 2b 04 00 00 00 7f              .*.....+.....

00000649 <_ZL8Rcmd2red>:
     649:	02 2a 04 00 00 00 7f 2b 04 00 00 00 9f              .*.....+.....

00000656 <_ZL10Rcmd2green>:
     656:	02 2a 04 00 02 00 81 2b 04 00 01 00 a0              .*.....+.....

00000663 <_ZL5Rcmd1>:
     663:	0f 01 80 96 11 80 ff b1 03 01 2c 2d b2 03 01 2c     ..........,-...,
     673:	2d b3 06 01 2c 2d 01 2c 2d b4 01 07 c0 03 a2 02     -...,-.,-.......
     683:	84 c1 01 c5 c2 02 0a 00 c3 02 8a 2a c4 02 8a ee     ...........*....
     693:	c5 01 0e 20 00 36 01 c8 3a 01 05                    ... .6..:..

0000069e <__ctors_start>:
     69e:	aa 06       	cpc	r10, r26
     6a0:	15 0e       	add	r1, r21
     6a2:	91 1c       	adc	r9, r1

000006a4 <__ctors_end>:
     6a4:	11 24       	eor	r1, r1
     6a6:	1f be       	out	0x3f, r1	; 63
     6a8:	cf ef       	ldi	r28, 0xFF	; 255
     6aa:	d8 e0       	ldi	r29, 0x08	; 8
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	cd bf       	out	0x3d, r28	; 61

000006b0 <__do_copy_data>:
     6b0:	11 e0       	ldi	r17, 0x01	; 1
     6b2:	a0 e0       	ldi	r26, 0x00	; 0
     6b4:	b1 e0       	ldi	r27, 0x01	; 1
     6b6:	e4 ee       	ldi	r30, 0xE4	; 228
     6b8:	fe e3       	ldi	r31, 0x3E	; 62
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <__do_copy_data+0x10>
     6bc:	05 90       	lpm	r0, Z+
     6be:	0d 92       	st	X+, r0
     6c0:	aa 39       	cpi	r26, 0x9A	; 154
     6c2:	b1 07       	cpc	r27, r17
     6c4:	d9 f7       	brne	.-10     	; 0x6bc <__do_copy_data+0xc>

000006c6 <__do_clear_bss>:
     6c6:	23 e0       	ldi	r18, 0x03	; 3
     6c8:	aa e9       	ldi	r26, 0x9A	; 154
     6ca:	b1 e0       	ldi	r27, 0x01	; 1
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <.do_clear_bss_start>

000006ce <.do_clear_bss_loop>:
     6ce:	1d 92       	st	X+, r1

000006d0 <.do_clear_bss_start>:
     6d0:	af 38       	cpi	r26, 0x8F	; 143
     6d2:	b2 07       	cpc	r27, r18
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <.do_clear_bss_loop>

000006d6 <__do_global_ctors>:
     6d6:	13 e0       	ldi	r17, 0x03	; 3
     6d8:	c2 e5       	ldi	r28, 0x52	; 82
     6da:	d3 e0       	ldi	r29, 0x03	; 3
     6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <__do_global_ctors+0x10>
     6de:	21 97       	sbiw	r28, 0x01	; 1
     6e0:	fe 01       	movw	r30, r28
     6e2:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <__tablejump2__>
     6e6:	cf 34       	cpi	r28, 0x4F	; 79
     6e8:	d1 07       	cpc	r29, r17
     6ea:	c9 f7       	brne	.-14     	; 0x6de <__do_global_ctors+0x8>
     6ec:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <main>
     6f0:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <_exit>

000006f4 <__bad_interrupt>:
     6f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006f8 <_Z4set2v>:
	return sqrt(sq(WSx) + sq(WSy));
}

float getWindAngle(float WSy, float WSx) {

	return atan(WSy / WSx);
     6f8:	e7 e6       	ldi	r30, 0x67	; 103
     6fa:	f2 e0       	ldi	r31, 0x02	; 2
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	a0 e7       	ldi	r26, 0x70	; 112
     702:	b1 ec       	ldi	r27, 0xC1	; 193
     704:	80 83       	st	Z, r24
     706:	91 83       	std	Z+1, r25	; 0x01
     708:	a2 83       	std	Z+2, r26	; 0x02
     70a:	b3 83       	std	Z+3, r27	; 0x03
     70c:	82 eb       	ldi	r24, 0xB2	; 178
     70e:	9d e9       	ldi	r25, 0x9D	; 157
     710:	af e0       	ldi	r26, 0x0F	; 15
     712:	bf e3       	ldi	r27, 0x3F	; 63
     714:	84 83       	std	Z+4, r24	; 0x04
     716:	95 83       	std	Z+5, r25	; 0x05
     718:	a6 83       	std	Z+6, r26	; 0x06
     71a:	b7 83       	std	Z+7, r27	; 0x07
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	a8 e4       	ldi	r26, 0x48	; 72
     722:	b1 ec       	ldi	r27, 0xC1	; 193
     724:	80 87       	std	Z+8, r24	; 0x08
     726:	91 87       	std	Z+9, r25	; 0x09
     728:	a2 87       	std	Z+10, r26	; 0x0a
     72a:	b3 87       	std	Z+11, r27	; 0x0b
     72c:	82 e5       	ldi	r24, 0x52	; 82
     72e:	98 eb       	ldi	r25, 0xB8	; 184
     730:	ae e1       	ldi	r26, 0x1E	; 30
     732:	bf e3       	ldi	r27, 0x3F	; 63
     734:	84 87       	std	Z+12, r24	; 0x0c
     736:	95 87       	std	Z+13, r25	; 0x0d
     738:	a6 87       	std	Z+14, r26	; 0x0e
     73a:	b7 87       	std	Z+15, r27	; 0x0f
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	a0 e2       	ldi	r26, 0x20	; 32
     742:	b1 ec       	ldi	r27, 0xC1	; 193
     744:	80 8b       	std	Z+16, r24	; 0x10
     746:	91 8b       	std	Z+17, r25	; 0x11
     748:	a2 8b       	std	Z+18, r26	; 0x12
     74a:	b3 8b       	std	Z+19, r27	; 0x13
     74c:	80 e6       	ldi	r24, 0x60	; 96
     74e:	95 ee       	ldi	r25, 0xE5	; 229
     750:	a0 e3       	ldi	r26, 0x30	; 48
     752:	bf e3       	ldi	r27, 0x3F	; 63
     754:	84 8b       	std	Z+20, r24	; 0x14
     756:	95 8b       	std	Z+21, r25	; 0x15
     758:	a6 8b       	std	Z+22, r26	; 0x16
     75a:	b7 8b       	std	Z+23, r27	; 0x17
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	a0 ef       	ldi	r26, 0xF0	; 240
     762:	b0 ec       	ldi	r27, 0xC0	; 192
     764:	80 8f       	std	Z+24, r24	; 0x18
     766:	91 8f       	std	Z+25, r25	; 0x19
     768:	a2 8f       	std	Z+26, r26	; 0x1a
     76a:	b3 8f       	std	Z+27, r27	; 0x1b
     76c:	85 ed       	ldi	r24, 0xD5	; 213
     76e:	98 e7       	ldi	r25, 0x78	; 120
     770:	a9 e4       	ldi	r26, 0x49	; 73
     772:	bf e3       	ldi	r27, 0x3F	; 63
     774:	84 8f       	std	Z+28, r24	; 0x1c
     776:	95 8f       	std	Z+29, r25	; 0x1d
     778:	a6 8f       	std	Z+30, r26	; 0x1e
     77a:	b7 8f       	std	Z+31, r27	; 0x1f
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	a0 ea       	ldi	r26, 0xA0	; 160
     782:	b0 ec       	ldi	r27, 0xC0	; 192
     784:	80 a3       	std	Z+32, r24	; 0x20
     786:	91 a3       	std	Z+33, r25	; 0x21
     788:	a2 a3       	std	Z+34, r26	; 0x22
     78a:	b3 a3       	std	Z+35, r27	; 0x23
     78c:	86 e9       	ldi	r24, 0x96	; 150
     78e:	93 e4       	ldi	r25, 0x43	; 67
     790:	ab e6       	ldi	r26, 0x6B	; 107
     792:	bf e3       	ldi	r27, 0x3F	; 63
     794:	84 a3       	std	Z+36, r24	; 0x24
     796:	95 a3       	std	Z+37, r25	; 0x25
     798:	a6 a3       	std	Z+38, r26	; 0x26
     79a:	b7 a3       	std	Z+39, r27	; 0x27
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	a0 e2       	ldi	r26, 0x20	; 32
     7a2:	b0 ec       	ldi	r27, 0xC0	; 192
     7a4:	80 a7       	std	Z+40, r24	; 0x28
     7a6:	91 a7       	std	Z+41, r25	; 0x29
     7a8:	a2 a7       	std	Z+42, r26	; 0x2a
     7aa:	b3 a7       	std	Z+43, r27	; 0x2b
     7ac:	80 e6       	ldi	r24, 0x60	; 96
     7ae:	95 ee       	ldi	r25, 0xE5	; 229
     7b0:	a0 e9       	ldi	r26, 0x90	; 144
     7b2:	bf e3       	ldi	r27, 0x3F	; 63
     7b4:	84 a7       	std	Z+44, r24	; 0x2c
     7b6:	95 a7       	std	Z+45, r25	; 0x2d
     7b8:	a6 a7       	std	Z+46, r26	; 0x2e
     7ba:	b7 a7       	std	Z+47, r27	; 0x2f
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	a0 ea       	ldi	r26, 0xA0	; 160
     7c2:	bf eb       	ldi	r27, 0xBF	; 191
     7c4:	80 ab       	std	Z+48, r24	; 0x30
     7c6:	91 ab       	std	Z+49, r25	; 0x31
     7c8:	a2 ab       	std	Z+50, r26	; 0x32
     7ca:	b3 ab       	std	Z+51, r27	; 0x33
     7cc:	8b e8       	ldi	r24, 0x8B	; 139
     7ce:	9c e6       	ldi	r25, 0x6C	; 108
     7d0:	a7 ea       	ldi	r26, 0xA7	; 167
     7d2:	bf e3       	ldi	r27, 0x3F	; 63
     7d4:	84 ab       	std	Z+52, r24	; 0x34
     7d6:	95 ab       	std	Z+53, r25	; 0x35
     7d8:	a6 ab       	std	Z+54, r26	; 0x36
     7da:	b7 ab       	std	Z+55, r27	; 0x37
     7dc:	10 ae       	std	Z+56, r1	; 0x38
     7de:	11 ae       	std	Z+57, r1	; 0x39
     7e0:	12 ae       	std	Z+58, r1	; 0x3a
     7e2:	13 ae       	std	Z+59, r1	; 0x3b
     7e4:	8c eb       	ldi	r24, 0xBC	; 188
     7e6:	94 e7       	ldi	r25, 0x74	; 116
     7e8:	a3 ed       	ldi	r26, 0xD3	; 211
     7ea:	bf e3       	ldi	r27, 0x3F	; 63
     7ec:	84 af       	std	Z+60, r24	; 0x3c
     7ee:	95 af       	std	Z+61, r25	; 0x3d
     7f0:	a6 af       	std	Z+62, r26	; 0x3e
     7f2:	b7 af       	std	Z+63, r27	; 0x3f
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	a0 ea       	ldi	r26, 0xA0	; 160
     7fa:	bf e3       	ldi	r27, 0x3F	; 63
     7fc:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <flows94+0x40>
     800:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <flows94+0x41>
     804:	a0 93 a9 02 	sts	0x02A9, r26	; 0x8002a9 <flows94+0x42>
     808:	b0 93 aa 02 	sts	0x02AA, r27	; 0x8002aa <flows94+0x43>
     80c:	82 e6       	ldi	r24, 0x62	; 98
     80e:	90 e1       	ldi	r25, 0x10	; 16
     810:	a0 e0       	ldi	r26, 0x00	; 0
     812:	b0 e4       	ldi	r27, 0x40	; 64
     814:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <flows94+0x44>
     818:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <flows94+0x45>
     81c:	a0 93 ad 02 	sts	0x02AD, r26	; 0x8002ad <flows94+0x46>
     820:	b0 93 ae 02 	sts	0x02AE, r27	; 0x8002ae <flows94+0x47>
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	a0 e2       	ldi	r26, 0x20	; 32
     82a:	b0 e4       	ldi	r27, 0x40	; 64
     82c:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <flows94+0x48>
     830:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <flows94+0x49>
     834:	a0 93 b1 02 	sts	0x02B1, r26	; 0x8002b1 <flows94+0x4a>
     838:	b0 93 b2 02 	sts	0x02B2, r27	; 0x8002b2 <flows94+0x4b>
     83c:	8d e6       	ldi	r24, 0x6D	; 109
     83e:	97 ee       	ldi	r25, 0xE7	; 231
     840:	ab e0       	ldi	r26, 0x0B	; 11
     842:	b0 e4       	ldi	r27, 0x40	; 64
     844:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <flows94+0x4c>
     848:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <flows94+0x4d>
     84c:	a0 93 b5 02 	sts	0x02B5, r26	; 0x8002b5 <flows94+0x4e>
     850:	b0 93 b6 02 	sts	0x02B6, r27	; 0x8002b6 <flows94+0x4f>
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 ea       	ldi	r26, 0xA0	; 160
     85a:	b0 e4       	ldi	r27, 0x40	; 64
     85c:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <flows94+0x50>
     860:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <flows94+0x51>
     864:	a0 93 b9 02 	sts	0x02B9, r26	; 0x8002b9 <flows94+0x52>
     868:	b0 93 ba 02 	sts	0x02BA, r27	; 0x8002ba <flows94+0x53>
     86c:	83 ed       	ldi	r24, 0xD3	; 211
     86e:	9d e4       	ldi	r25, 0x4D	; 77
     870:	aa e1       	ldi	r26, 0x1A	; 26
     872:	b0 e4       	ldi	r27, 0x40	; 64
     874:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <flows94+0x54>
     878:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <flows94+0x55>
     87c:	a0 93 bd 02 	sts	0x02BD, r26	; 0x8002bd <flows94+0x56>
     880:	b0 93 be 02 	sts	0x02BE, r27	; 0x8002be <flows94+0x57>
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 ef       	ldi	r26, 0xF0	; 240
     88a:	b0 e4       	ldi	r27, 0x40	; 64
     88c:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <flows94+0x58>
     890:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <flows94+0x59>
     894:	a0 93 c1 02 	sts	0x02C1, r26	; 0x8002c1 <flows94+0x5a>
     898:	b0 93 c2 02 	sts	0x02C2, r27	; 0x8002c2 <flows94+0x5b>
     89c:	8a e5       	ldi	r24, 0x5A	; 90
     89e:	94 e6       	ldi	r25, 0x64	; 100
     8a0:	a3 e2       	ldi	r26, 0x23	; 35
     8a2:	b0 e4       	ldi	r27, 0x40	; 64
     8a4:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <flows94+0x5c>
     8a8:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <flows94+0x5d>
     8ac:	a0 93 c5 02 	sts	0x02C5, r26	; 0x8002c5 <flows94+0x5e>
     8b0:	b0 93 c6 02 	sts	0x02C6, r27	; 0x8002c6 <flows94+0x5f>
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a0 e2       	ldi	r26, 0x20	; 32
     8ba:	b1 e4       	ldi	r27, 0x41	; 65
     8bc:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <flows94+0x60>
     8c0:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <flows94+0x61>
     8c4:	a0 93 c9 02 	sts	0x02C9, r26	; 0x8002c9 <flows94+0x62>
     8c8:	b0 93 ca 02 	sts	0x02CA, r27	; 0x8002ca <flows94+0x63>
     8cc:	81 e7       	ldi	r24, 0x71	; 113
     8ce:	9d e3       	ldi	r25, 0x3D	; 61
     8d0:	aa e2       	ldi	r26, 0x2A	; 42
     8d2:	b0 e4       	ldi	r27, 0x40	; 64
     8d4:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <flows94+0x64>
     8d8:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <flows94+0x65>
     8dc:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <flows94+0x66>
     8e0:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <flows94+0x67>
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	a8 e4       	ldi	r26, 0x48	; 72
     8ea:	b1 e4       	ldi	r27, 0x41	; 65
     8ec:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <flows94+0x68>
     8f0:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <flows94+0x69>
     8f4:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <flows94+0x6a>
     8f8:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <flows94+0x6b>
     8fc:	89 e2       	ldi	r24, 0x29	; 41
     8fe:	9c e5       	ldi	r25, 0x5C	; 92
     900:	af e2       	ldi	r26, 0x2F	; 47
     902:	b0 e4       	ldi	r27, 0x40	; 64
     904:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <flows94+0x6c>
     908:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <flows94+0x6d>
     90c:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <flows94+0x6e>
     910:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <flows94+0x6f>
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	a0 e7       	ldi	r26, 0x70	; 112
     91a:	b1 e4       	ldi	r27, 0x41	; 65
     91c:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <flows94+0x70>
     920:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <flows94+0x71>
     924:	a0 93 d9 02 	sts	0x02D9, r26	; 0x8002d9 <flows94+0x72>
     928:	b0 93 da 02 	sts	0x02DA, r27	; 0x8002da <flows94+0x73>
     92c:	81 e3       	ldi	r24, 0x31	; 49
     92e:	98 e0       	ldi	r25, 0x08	; 8
     930:	a4 e3       	ldi	r26, 0x34	; 52
     932:	b0 e4       	ldi	r27, 0x40	; 64
     934:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <flows94+0x74>
     938:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <flows94+0x75>
     93c:	a0 93 dd 02 	sts	0x02DD, r26	; 0x8002dd <flows94+0x76>
     940:	b0 93 de 02 	sts	0x02DE, r27	; 0x8002de <flows94+0x77>
     944:	08 95       	ret

00000946 <_Z3setv>:
     946:	ef ee       	ldi	r30, 0xEF	; 239
     948:	f1 e0       	ldi	r31, 0x01	; 1
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	a0 e7       	ldi	r26, 0x70	; 112
     950:	b1 ec       	ldi	r27, 0xC1	; 193
     952:	80 83       	st	Z, r24
     954:	91 83       	std	Z+1, r25	; 0x01
     956:	a2 83       	std	Z+2, r26	; 0x02
     958:	b3 83       	std	Z+3, r27	; 0x03
     95a:	89 ee       	ldi	r24, 0xE9	; 233
     95c:	96 e2       	ldi	r25, 0x26	; 38
     95e:	a1 ef       	ldi	r26, 0xF1	; 241
     960:	be e3       	ldi	r27, 0x3E	; 62
     962:	84 83       	std	Z+4, r24	; 0x04
     964:	95 83       	std	Z+5, r25	; 0x05
     966:	a6 83       	std	Z+6, r26	; 0x06
     968:	b7 83       	std	Z+7, r27	; 0x07
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	a8 e4       	ldi	r26, 0x48	; 72
     970:	b1 ec       	ldi	r27, 0xC1	; 193
     972:	80 87       	std	Z+8, r24	; 0x08
     974:	91 87       	std	Z+9, r25	; 0x09
     976:	a2 87       	std	Z+10, r26	; 0x0a
     978:	b3 87       	std	Z+11, r27	; 0x0b
     97a:	8e e5       	ldi	r24, 0x5E	; 94
     97c:	9a eb       	ldi	r25, 0xBA	; 186
     97e:	a9 e0       	ldi	r26, 0x09	; 9
     980:	bf e3       	ldi	r27, 0x3F	; 63
     982:	84 87       	std	Z+12, r24	; 0x0c
     984:	95 87       	std	Z+13, r25	; 0x0d
     986:	a6 87       	std	Z+14, r26	; 0x0e
     988:	b7 87       	std	Z+15, r27	; 0x0f
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	a0 e2       	ldi	r26, 0x20	; 32
     990:	b1 ec       	ldi	r27, 0xC1	; 193
     992:	80 8b       	std	Z+16, r24	; 0x10
     994:	91 8b       	std	Z+17, r25	; 0x11
     996:	a2 8b       	std	Z+18, r26	; 0x12
     998:	b3 8b       	std	Z+19, r27	; 0x13
     99a:	8b ed       	ldi	r24, 0xDB	; 219
     99c:	99 ef       	ldi	r25, 0xF9	; 249
     99e:	ae e1       	ldi	r26, 0x1E	; 30
     9a0:	bf e3       	ldi	r27, 0x3F	; 63
     9a2:	84 8b       	std	Z+20, r24	; 0x14
     9a4:	95 8b       	std	Z+21, r25	; 0x15
     9a6:	a6 8b       	std	Z+22, r26	; 0x16
     9a8:	b7 8b       	std	Z+23, r27	; 0x17
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 ef       	ldi	r26, 0xF0	; 240
     9b0:	b0 ec       	ldi	r27, 0xC0	; 192
     9b2:	80 8f       	std	Z+24, r24	; 0x18
     9b4:	91 8f       	std	Z+25, r25	; 0x19
     9b6:	a2 8f       	std	Z+26, r26	; 0x1a
     9b8:	b3 8f       	std	Z+27, r27	; 0x1b
     9ba:	86 ef       	ldi	r24, 0xF6	; 246
     9bc:	98 e2       	ldi	r25, 0x28	; 40
     9be:	ac e3       	ldi	r26, 0x3C	; 60
     9c0:	bf e3       	ldi	r27, 0x3F	; 63
     9c2:	84 8f       	std	Z+28, r24	; 0x1c
     9c4:	95 8f       	std	Z+29, r25	; 0x1d
     9c6:	a6 8f       	std	Z+30, r26	; 0x1e
     9c8:	b7 8f       	std	Z+31, r27	; 0x1f
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	a0 ea       	ldi	r26, 0xA0	; 160
     9d0:	b0 ec       	ldi	r27, 0xC0	; 192
     9d2:	80 a3       	std	Z+32, r24	; 0x20
     9d4:	91 a3       	std	Z+33, r25	; 0x21
     9d6:	a2 a3       	std	Z+34, r26	; 0x22
     9d8:	b3 a3       	std	Z+35, r27	; 0x23
     9da:	83 e9       	ldi	r24, 0x93	; 147
     9dc:	98 e1       	ldi	r25, 0x18	; 24
     9de:	a4 e6       	ldi	r26, 0x64	; 100
     9e0:	bf e3       	ldi	r27, 0x3F	; 63
     9e2:	84 a3       	std	Z+36, r24	; 0x24
     9e4:	95 a3       	std	Z+37, r25	; 0x25
     9e6:	a6 a3       	std	Z+38, r26	; 0x26
     9e8:	b7 a3       	std	Z+39, r27	; 0x27
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	a0 e2       	ldi	r26, 0x20	; 32
     9f0:	b0 ec       	ldi	r27, 0xC0	; 192
     9f2:	80 a7       	std	Z+40, r24	; 0x28
     9f4:	91 a7       	std	Z+41, r25	; 0x29
     9f6:	a2 a7       	std	Z+42, r26	; 0x2a
     9f8:	b3 a7       	std	Z+43, r27	; 0x2b
     9fa:	8e e0       	ldi	r24, 0x0E	; 14
     9fc:	9d e2       	ldi	r25, 0x2D	; 45
     9fe:	a2 e9       	ldi	r26, 0x92	; 146
     a00:	bf e3       	ldi	r27, 0x3F	; 63
     a02:	84 a7       	std	Z+44, r24	; 0x2c
     a04:	95 a7       	std	Z+45, r25	; 0x2d
     a06:	a6 a7       	std	Z+46, r26	; 0x2e
     a08:	b7 a7       	std	Z+47, r27	; 0x2f
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 ea       	ldi	r26, 0xA0	; 160
     a10:	bf eb       	ldi	r27, 0xBF	; 191
     a12:	80 ab       	std	Z+48, r24	; 0x30
     a14:	91 ab       	std	Z+49, r25	; 0x31
     a16:	a2 ab       	std	Z+50, r26	; 0x32
     a18:	b3 ab       	std	Z+51, r27	; 0x33
     a1a:	81 e9       	ldi	r24, 0x91	; 145
     a1c:	9d ee       	ldi	r25, 0xED	; 237
     a1e:	ac ea       	ldi	r26, 0xAC	; 172
     a20:	bf e3       	ldi	r27, 0x3F	; 63
     a22:	84 ab       	std	Z+52, r24	; 0x34
     a24:	95 ab       	std	Z+53, r25	; 0x35
     a26:	a6 ab       	std	Z+54, r26	; 0x36
     a28:	b7 ab       	std	Z+55, r27	; 0x37
     a2a:	10 ae       	std	Z+56, r1	; 0x38
     a2c:	11 ae       	std	Z+57, r1	; 0x39
     a2e:	12 ae       	std	Z+58, r1	; 0x3a
     a30:	13 ae       	std	Z+59, r1	; 0x3b
     a32:	85 ec       	ldi	r24, 0xC5	; 197
     a34:	90 e2       	ldi	r25, 0x20	; 32
     a36:	a0 ee       	ldi	r26, 0xE0	; 224
     a38:	bf e3       	ldi	r27, 0x3F	; 63
     a3a:	84 af       	std	Z+60, r24	; 0x3c
     a3c:	95 af       	std	Z+61, r25	; 0x3d
     a3e:	a6 af       	std	Z+62, r26	; 0x3e
     a40:	b7 af       	std	Z+63, r27	; 0x3f
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	a0 ea       	ldi	r26, 0xA0	; 160
     a48:	bf e3       	ldi	r27, 0x3F	; 63
     a4a:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <flows95+0x40>
     a4e:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <flows95+0x41>
     a52:	a0 93 31 02 	sts	0x0231, r26	; 0x800231 <flows95+0x42>
     a56:	b0 93 32 02 	sts	0x0232, r27	; 0x800232 <flows95+0x43>
     a5a:	89 ee       	ldi	r24, 0xE9	; 233
     a5c:	96 e2       	ldi	r25, 0x26	; 38
     a5e:	a9 e0       	ldi	r26, 0x09	; 9
     a60:	b0 e4       	ldi	r27, 0x40	; 64
     a62:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <flows95+0x44>
     a66:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <flows95+0x45>
     a6a:	a0 93 35 02 	sts	0x0235, r26	; 0x800235 <flows95+0x46>
     a6e:	b0 93 36 02 	sts	0x0236, r27	; 0x800236 <flows95+0x47>
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	a0 e2       	ldi	r26, 0x20	; 32
     a78:	b0 e4       	ldi	r27, 0x40	; 64
     a7a:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <flows95+0x48>
     a7e:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <flows95+0x49>
     a82:	a0 93 39 02 	sts	0x0239, r26	; 0x800239 <flows95+0x4a>
     a86:	b0 93 3a 02 	sts	0x023A, r27	; 0x80023a <flows95+0x4b>
     a8a:	84 eb       	ldi	r24, 0xB4	; 180
     a8c:	98 ec       	ldi	r25, 0xC8	; 200
     a8e:	a6 e1       	ldi	r26, 0x16	; 22
     a90:	b0 e4       	ldi	r27, 0x40	; 64
     a92:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <flows95+0x4c>
     a96:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <flows95+0x4d>
     a9a:	a0 93 3d 02 	sts	0x023D, r26	; 0x80023d <flows95+0x4e>
     a9e:	b0 93 3e 02 	sts	0x023E, r27	; 0x80023e <flows95+0x4f>
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	a0 ea       	ldi	r26, 0xA0	; 160
     aa8:	b0 e4       	ldi	r27, 0x40	; 64
     aaa:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <flows95+0x50>
     aae:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <flows95+0x51>
     ab2:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <flows95+0x52>
     ab6:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <flows95+0x53>
     aba:	89 e2       	ldi	r24, 0x29	; 41
     abc:	9c e5       	ldi	r25, 0x5C	; 92
     abe:	a7 e2       	ldi	r26, 0x27	; 39
     ac0:	b0 e4       	ldi	r27, 0x40	; 64
     ac2:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <flows95+0x54>
     ac6:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <flows95+0x55>
     aca:	a0 93 45 02 	sts	0x0245, r26	; 0x800245 <flows95+0x56>
     ace:	b0 93 46 02 	sts	0x0246, r27	; 0x800246 <flows95+0x57>
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	a0 ef       	ldi	r26, 0xF0	; 240
     ad8:	b0 e4       	ldi	r27, 0x40	; 64
     ada:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <flows95+0x58>
     ade:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <flows95+0x59>
     ae2:	a0 93 49 02 	sts	0x0249, r26	; 0x800249 <flows95+0x5a>
     ae6:	b0 93 4a 02 	sts	0x024A, r27	; 0x80024a <flows95+0x5b>
     aea:	81 e7       	ldi	r24, 0x71	; 113
     aec:	9d e3       	ldi	r25, 0x3D	; 61
     aee:	a2 e3       	ldi	r26, 0x32	; 50
     af0:	b0 e4       	ldi	r27, 0x40	; 64
     af2:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <flows95+0x5c>
     af6:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <flows95+0x5d>
     afa:	a0 93 4d 02 	sts	0x024D, r26	; 0x80024d <flows95+0x5e>
     afe:	b0 93 4e 02 	sts	0x024E, r27	; 0x80024e <flows95+0x5f>
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	a0 e2       	ldi	r26, 0x20	; 32
     b08:	b1 e4       	ldi	r27, 0x41	; 65
     b0a:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <flows95+0x60>
     b0e:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <flows95+0x61>
     b12:	a0 93 51 02 	sts	0x0251, r26	; 0x800251 <flows95+0x62>
     b16:	b0 93 52 02 	sts	0x0252, r27	; 0x800252 <flows95+0x63>
     b1a:	83 ed       	ldi	r24, 0xD3	; 211
     b1c:	9d e4       	ldi	r25, 0x4D	; 77
     b1e:	aa e3       	ldi	r26, 0x3A	; 58
     b20:	b0 e4       	ldi	r27, 0x40	; 64
     b22:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <flows95+0x64>
     b26:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <flows95+0x65>
     b2a:	a0 93 55 02 	sts	0x0255, r26	; 0x800255 <flows95+0x66>
     b2e:	b0 93 56 02 	sts	0x0256, r27	; 0x800256 <flows95+0x67>
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	a8 e4       	ldi	r26, 0x48	; 72
     b38:	b1 e4       	ldi	r27, 0x41	; 65
     b3a:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <flows95+0x68>
     b3e:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <flows95+0x69>
     b42:	a0 93 59 02 	sts	0x0259, r26	; 0x800259 <flows95+0x6a>
     b46:	b0 93 5a 02 	sts	0x025A, r27	; 0x80025a <flows95+0x6b>
     b4a:	82 e1       	ldi	r24, 0x12	; 18
     b4c:	93 e8       	ldi	r25, 0x83	; 131
     b4e:	a0 e4       	ldi	r26, 0x40	; 64
     b50:	b0 e4       	ldi	r27, 0x40	; 64
     b52:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <flows95+0x6c>
     b56:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <flows95+0x6d>
     b5a:	a0 93 5d 02 	sts	0x025D, r26	; 0x80025d <flows95+0x6e>
     b5e:	b0 93 5e 02 	sts	0x025E, r27	; 0x80025e <flows95+0x6f>
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e7       	ldi	r26, 0x70	; 112
     b68:	b1 e4       	ldi	r27, 0x41	; 65
     b6a:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <flows95+0x70>
     b6e:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <flows95+0x71>
     b72:	a0 93 61 02 	sts	0x0261, r26	; 0x800261 <flows95+0x72>
     b76:	b0 93 62 02 	sts	0x0262, r27	; 0x800262 <flows95+0x73>
     b7a:	8d ed       	ldi	r24, 0xDD	; 221
     b7c:	94 e2       	ldi	r25, 0x24	; 36
     b7e:	a6 e4       	ldi	r26, 0x46	; 70
     b80:	b0 e4       	ldi	r27, 0x40	; 64
     b82:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <flows95+0x74>
     b86:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <flows95+0x75>
     b8a:	a0 93 65 02 	sts	0x0265, r26	; 0x800265 <flows95+0x76>
     b8e:	b0 93 66 02 	sts	0x0266, r27	; 0x800266 <flows95+0x77>
     b92:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <_Z4set2v>

00000b96 <_Z11interpolatePA2_ff>:
     b96:	2f 92       	push	r2
     b98:	3f 92       	push	r3
     b9a:	4f 92       	push	r4
     b9c:	5f 92       	push	r5
     b9e:	6f 92       	push	r6
     ba0:	7f 92       	push	r7
     ba2:	8f 92       	push	r8
     ba4:	9f 92       	push	r9
     ba6:	af 92       	push	r10
     ba8:	bf 92       	push	r11
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	28 97       	sbiw	r28, 0x08	; 8
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	98 87       	std	Y+8, r25	; 0x08
     bcc:	8f 83       	std	Y+7, r24	; 0x07
     bce:	2a 01       	movw	r4, r20
     bd0:	3b 01       	movw	r6, r22
     bd2:	2d ed       	ldi	r18, 0xDD	; 221
     bd4:	34 e2       	ldi	r19, 0x24	; 36
     bd6:	46 e4       	ldi	r20, 0x46	; 70
     bd8:	50 e4       	ldi	r21, 0x40	; 64
     bda:	c3 01       	movw	r24, r6
     bdc:	b2 01       	movw	r22, r4
     bde:	0e 94 80 0b 	call	0x1700	; 0x1700 <__gesf2>
     be2:	87 fd       	sbrc	r24, 7
     be4:	0a c0       	rjmp	.+20     	; 0xbfa <_Z11interpolatePA2_ff+0x64>
     be6:	2f 81       	ldd	r18, Y+7	; 0x07
     be8:	38 85       	ldd	r19, Y+8	; 0x08
     bea:	20 59       	subi	r18, 0x90	; 144
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	f9 01       	movw	r30, r18
     bf0:	64 81       	ldd	r22, Z+4	; 0x04
     bf2:	75 81       	ldd	r23, Z+5	; 0x05
     bf4:	86 81       	ldd	r24, Z+6	; 0x06
     bf6:	97 81       	ldd	r25, Z+7	; 0x07
     bf8:	6e c0       	rjmp	.+220    	; 0xcd6 <_Z11interpolatePA2_ff+0x140>
     bfa:	ef 81       	ldd	r30, Y+7	; 0x07
     bfc:	f8 85       	ldd	r31, Y+8	; 0x08
     bfe:	84 80       	ldd	r8, Z+4	; 0x04
     c00:	95 80       	ldd	r9, Z+5	; 0x05
     c02:	a6 80       	ldd	r10, Z+6	; 0x06
     c04:	b7 80       	ldd	r11, Z+7	; 0x07
     c06:	f0 80       	ld	r15, Z
     c08:	01 81       	ldd	r16, Z+1	; 0x01
     c0a:	12 81       	ldd	r17, Z+2	; 0x02
     c0c:	23 80       	ldd	r2, Z+3	; 0x03
     c0e:	9f 01       	movw	r18, r30
     c10:	28 58       	subi	r18, 0x88	; 136
     c12:	3f 4f       	sbci	r19, 0xFF	; 255
     c14:	3e 83       	std	Y+6, r19	; 0x06
     c16:	2d 83       	std	Y+5, r18	; 0x05
     c18:	ef 81       	ldd	r30, Y+7	; 0x07
     c1a:	f8 85       	ldd	r31, Y+8	; 0x08
     c1c:	34 80       	ldd	r3, Z+4	; 0x04
     c1e:	c5 80       	ldd	r12, Z+5	; 0x05
     c20:	d6 80       	ldd	r13, Z+6	; 0x06
     c22:	e7 80       	ldd	r14, Z+7	; 0x07
     c24:	f0 81       	ld	r31, Z
     c26:	f9 83       	std	Y+1, r31	; 0x01
     c28:	ef 81       	ldd	r30, Y+7	; 0x07
     c2a:	f8 85       	ldd	r31, Y+8	; 0x08
     c2c:	f1 81       	ldd	r31, Z+1	; 0x01
     c2e:	fa 83       	std	Y+2, r31	; 0x02
     c30:	ef 81       	ldd	r30, Y+7	; 0x07
     c32:	f8 85       	ldd	r31, Y+8	; 0x08
     c34:	f2 81       	ldd	r31, Z+2	; 0x02
     c36:	fb 83       	std	Y+3, r31	; 0x03
     c38:	ef 81       	ldd	r30, Y+7	; 0x07
     c3a:	f8 85       	ldd	r31, Y+8	; 0x08
     c3c:	f3 81       	ldd	r31, Z+3	; 0x03
     c3e:	fc 83       	std	Y+4, r31	; 0x04
     c40:	23 2d       	mov	r18, r3
     c42:	3c 2d       	mov	r19, r12
     c44:	4d 2d       	mov	r20, r13
     c46:	5e 2d       	mov	r21, r14
     c48:	c3 01       	movw	r24, r6
     c4a:	b2 01       	movw	r22, r4
     c4c:	0e 94 80 0b 	call	0x1700	; 0x1700 <__gesf2>
     c50:	87 fd       	sbrc	r24, 7
     c52:	13 c0       	rjmp	.+38     	; 0xc7a <_Z11interpolatePA2_ff+0xe4>
     c54:	2f 81       	ldd	r18, Y+7	; 0x07
     c56:	38 85       	ldd	r19, Y+8	; 0x08
     c58:	28 5f       	subi	r18, 0xF8	; 248
     c5a:	3f 4f       	sbci	r19, 0xFF	; 255
     c5c:	38 87       	std	Y+8, r19	; 0x08
     c5e:	2f 83       	std	Y+7, r18	; 0x07
     c60:	83 2c       	mov	r8, r3
     c62:	9c 2c       	mov	r9, r12
     c64:	ad 2c       	mov	r10, r13
     c66:	be 2c       	mov	r11, r14
     c68:	f9 80       	ldd	r15, Y+1	; 0x01
     c6a:	0a 81       	ldd	r16, Y+2	; 0x02
     c6c:	1b 81       	ldd	r17, Y+3	; 0x03
     c6e:	2c 80       	ldd	r2, Y+4	; 0x04
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	28 17       	cp	r18, r24
     c76:	39 07       	cpc	r19, r25
     c78:	79 f6       	brne	.-98     	; 0xc18 <_Z11interpolatePA2_ff+0x82>
     c7a:	94 01       	movw	r18, r8
     c7c:	a5 01       	movw	r20, r10
     c7e:	c3 01       	movw	r24, r6
     c80:	b2 01       	movw	r22, r4
     c82:	0e 94 1a 09 	call	0x1234	; 0x1234 <__subsf3>
     c86:	2b 01       	movw	r4, r22
     c88:	3c 01       	movw	r6, r24
     c8a:	94 01       	movw	r18, r8
     c8c:	a5 01       	movw	r20, r10
     c8e:	63 2d       	mov	r22, r3
     c90:	7c 2d       	mov	r23, r12
     c92:	8d 2d       	mov	r24, r13
     c94:	9e 2d       	mov	r25, r14
     c96:	0e 94 1a 09 	call	0x1234	; 0x1234 <__subsf3>
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
     c9e:	c3 01       	movw	r24, r6
     ca0:	b2 01       	movw	r22, r4
     ca2:	0e 94 c0 09 	call	0x1380	; 0x1380 <__divsf3>
     ca6:	4b 01       	movw	r8, r22
     ca8:	5c 01       	movw	r10, r24
     caa:	2f 2d       	mov	r18, r15
     cac:	30 2f       	mov	r19, r16
     cae:	41 2f       	mov	r20, r17
     cb0:	52 2d       	mov	r21, r2
     cb2:	69 81       	ldd	r22, Y+1	; 0x01
     cb4:	7a 81       	ldd	r23, Y+2	; 0x02
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	9c 81       	ldd	r25, Y+4	; 0x04
     cba:	0e 94 1a 09 	call	0x1234	; 0x1234 <__subsf3>
     cbe:	9b 01       	movw	r18, r22
     cc0:	ac 01       	movw	r20, r24
     cc2:	c5 01       	movw	r24, r10
     cc4:	b4 01       	movw	r22, r8
     cc6:	0e 94 8d 0b 	call	0x171a	; 0x171a <__mulsf3>
     cca:	2f 2d       	mov	r18, r15
     ccc:	30 2f       	mov	r19, r16
     cce:	41 2f       	mov	r20, r17
     cd0:	52 2d       	mov	r21, r2
     cd2:	0e 94 1b 09 	call	0x1236	; 0x1236 <__addsf3>
     cd6:	28 96       	adiw	r28, 0x08	; 8
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	ff 90       	pop	r15
     cec:	ef 90       	pop	r14
     cee:	df 90       	pop	r13
     cf0:	cf 90       	pop	r12
     cf2:	bf 90       	pop	r11
     cf4:	af 90       	pop	r10
     cf6:	9f 90       	pop	r9
     cf8:	8f 90       	pop	r8
     cfa:	7f 90       	pop	r7
     cfc:	6f 90       	pop	r6
     cfe:	5f 90       	pop	r5
     d00:	4f 90       	pop	r4
     d02:	3f 90       	pop	r3
     d04:	2f 90       	pop	r2
     d06:	08 95       	ret

00000d08 <_Z12getTotalWindff>:
     d08:	8f 92       	push	r8
     d0a:	9f 92       	push	r9
     d0c:	af 92       	push	r10
     d0e:	bf 92       	push	r11
     d10:	cf 92       	push	r12
     d12:	df 92       	push	r13
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	6b 01       	movw	r12, r22
     d1a:	7c 01       	movw	r14, r24
     d1c:	ca 01       	movw	r24, r20
     d1e:	b9 01       	movw	r22, r18
     d20:	0e 94 8d 0b 	call	0x171a	; 0x171a <__mulsf3>
     d24:	4b 01       	movw	r8, r22
     d26:	5c 01       	movw	r10, r24
     d28:	a7 01       	movw	r20, r14
     d2a:	96 01       	movw	r18, r12
     d2c:	c7 01       	movw	r24, r14
     d2e:	b6 01       	movw	r22, r12
     d30:	0e 94 8d 0b 	call	0x171a	; 0x171a <__mulsf3>
     d34:	9b 01       	movw	r18, r22
     d36:	ac 01       	movw	r20, r24
     d38:	c5 01       	movw	r24, r10
     d3a:	b4 01       	movw	r22, r8
     d3c:	0e 94 1b 09 	call	0x1236	; 0x1236 <__addsf3>
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	cf 90       	pop	r12
     d48:	bf 90       	pop	r11
     d4a:	af 90       	pop	r10
     d4c:	9f 90       	pop	r9
     d4e:	8f 90       	pop	r8
     d50:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <sqrt>

00000d54 <_GLOBAL__sub_I_flows94>:

#define TFT_CS     10
#define TFT_RST    9
#define TFT_DC     8

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);
     d54:	29 e0       	ldi	r18, 0x09	; 9
     d56:	48 e0       	ldi	r20, 0x08	; 8
     d58:	6a e0       	ldi	r22, 0x0A	; 10
     d5a:	8e eb       	ldi	r24, 0xBE	; 190
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	0c 94 37 18 	jmp	0x306e	; 0x306e <_ZN15Adafruit_ST7735C1Eaaa>

00000d62 <_Z8plotLineiifi>:

int lastX1;
int lastY1;
float lastAngle;

void plotLine(int x0, int y0, float angle, int length = 50) {
     d62:	2f 92       	push	r2
     d64:	3f 92       	push	r3
     d66:	4f 92       	push	r4
     d68:	5f 92       	push	r5
     d6a:	6f 92       	push	r6
     d6c:	7f 92       	push	r7
     d6e:	8f 92       	push	r8
     d70:	9f 92       	push	r9
     d72:	af 92       	push	r10
     d74:	bf 92       	push	r11
     d76:	cf 92       	push	r12
     d78:	df 92       	push	r13
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	00 d0       	rcall	.+0      	; 0xd88 <_Z8plotLineiifi+0x26>
     d88:	00 d0       	rcall	.+0      	; 0xd8a <_Z8plotLineiifi+0x28>
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <_Z8plotLineiifi+0x2a>
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	1c 01       	movw	r2, r24
     d92:	7e 83       	std	Y+6, r23	; 0x06
     d94:	6d 83       	std	Y+5, r22	; 0x05
     d96:	69 01       	movw	r12, r18
     d98:	7a 01       	movw	r14, r20
	if (angle == 0) return;
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	a9 01       	movw	r20, r18
     da0:	c7 01       	movw	r24, r14
     da2:	b6 01       	movw	r22, r12
     da4:	0e 94 b6 09 	call	0x136c	; 0x136c <__cmpsf2>
     da8:	88 23       	and	r24, r24
     daa:	09 f4       	brne	.+2      	; 0xdae <_Z8plotLineiifi+0x4c>
     dac:	61 c0       	rjmp	.+194    	; 0xe70 <_Z8plotLineiifi+0x10e>

	int x1 = x0 + (length * cos(angle));
     dae:	b8 01       	movw	r22, r16
     db0:	11 0f       	add	r17, r17
     db2:	88 0b       	sbc	r24, r24
     db4:	99 0b       	sbc	r25, r25
     db6:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__floatsisf>
     dba:	4b 01       	movw	r8, r22
     dbc:	5c 01       	movw	r10, r24
     dbe:	c7 01       	movw	r24, r14
     dc0:	b6 01       	movw	r22, r12
     dc2:	0e 94 bb 09 	call	0x1376	; 0x1376 <cos>
     dc6:	69 83       	std	Y+1, r22	; 0x01
     dc8:	7a 83       	std	Y+2, r23	; 0x02
     dca:	8b 83       	std	Y+3, r24	; 0x03
     dcc:	9c 83       	std	Y+4, r25	; 0x04
     dce:	b1 01       	movw	r22, r2
     dd0:	03 2c       	mov	r0, r3
     dd2:	00 0c       	add	r0, r0
     dd4:	88 0b       	sbc	r24, r24
     dd6:	99 0b       	sbc	r25, r25
     dd8:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__floatsisf>
     ddc:	2b 01       	movw	r4, r22
     dde:	3c 01       	movw	r6, r24
     de0:	29 81       	ldd	r18, Y+1	; 0x01
     de2:	3a 81       	ldd	r19, Y+2	; 0x02
     de4:	4b 81       	ldd	r20, Y+3	; 0x03
     de6:	5c 81       	ldd	r21, Y+4	; 0x04
     de8:	c5 01       	movw	r24, r10
     dea:	b4 01       	movw	r22, r8
     dec:	0e 94 8d 0b 	call	0x171a	; 0x171a <__mulsf3>
     df0:	9b 01       	movw	r18, r22
     df2:	ac 01       	movw	r20, r24
     df4:	c3 01       	movw	r24, r6
     df6:	b2 01       	movw	r22, r4
     df8:	0e 94 1b 09 	call	0x1236	; 0x1236 <__addsf3>
     dfc:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fixsfsi>
     e00:	69 83       	std	Y+1, r22	; 0x01
     e02:	7a 83       	std	Y+2, r23	; 0x02
     e04:	8b 83       	std	Y+3, r24	; 0x03
     e06:	9c 83       	std	Y+4, r25	; 0x04
	int y1 = y0 + (length * sin(angle));
     e08:	c7 01       	movw	r24, r14
     e0a:	b6 01       	movw	r22, r12
     e0c:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <sin>
     e10:	2b 01       	movw	r4, r22
     e12:	3c 01       	movw	r6, r24
     e14:	2d 81       	ldd	r18, Y+5	; 0x05
     e16:	3e 81       	ldd	r19, Y+6	; 0x06
     e18:	b9 01       	movw	r22, r18
     e1a:	33 0f       	add	r19, r19
     e1c:	88 0b       	sbc	r24, r24
     e1e:	99 0b       	sbc	r25, r25
     e20:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__floatsisf>
     e24:	6b 01       	movw	r12, r22
     e26:	7c 01       	movw	r14, r24
     e28:	a3 01       	movw	r20, r6
     e2a:	92 01       	movw	r18, r4
     e2c:	c5 01       	movw	r24, r10
     e2e:	b4 01       	movw	r22, r8
     e30:	0e 94 8d 0b 	call	0x171a	; 0x171a <__mulsf3>
     e34:	9b 01       	movw	r18, r22
     e36:	ac 01       	movw	r20, r24
     e38:	c7 01       	movw	r24, r14
     e3a:	b6 01       	movw	r22, r12
     e3c:	0e 94 1b 09 	call	0x1236	; 0x1236 <__addsf3>
     e40:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fixsfsi>
	lastX1 = x1;
     e44:	29 81       	ldd	r18, Y+1	; 0x01
     e46:	3a 81       	ldd	r19, Y+2	; 0x02
     e48:	30 93 bd 01 	sts	0x01BD, r19	; 0x8001bd <lastX1+0x1>
     e4c:	20 93 bc 01 	sts	0x01BC, r18	; 0x8001bc <lastX1>
	lastY1 = y1;
     e50:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <lastY1+0x1>
     e54:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <lastY1>
	tft.drawLine(x0, y0, x1, y1, 0xF81F);
     e58:	8f e1       	ldi	r24, 0x1F	; 31
     e5a:	e8 2e       	mov	r14, r24
     e5c:	88 ef       	ldi	r24, 0xF8	; 248
     e5e:	f8 2e       	mov	r15, r24
     e60:	8b 01       	movw	r16, r22
     e62:	4d 81       	ldd	r20, Y+5	; 0x05
     e64:	5e 81       	ldd	r21, Y+6	; 0x06
     e66:	b1 01       	movw	r22, r2
     e68:	8e eb       	ldi	r24, 0xBE	; 190
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <_ZN12Adafruit_GFX8drawLineEiiiij>
}
     e70:	26 96       	adiw	r28, 0x06	; 6
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	bf 90       	pop	r11
     e8e:	af 90       	pop	r10
     e90:	9f 90       	pop	r9
     e92:	8f 90       	pop	r8
     e94:	7f 90       	pop	r7
     e96:	6f 90       	pop	r6
     e98:	5f 90       	pop	r5
     e9a:	4f 90       	pop	r4
     e9c:	3f 90       	pop	r3
     e9e:	2f 90       	pop	r2
     ea0:	08 95       	ret

00000ea2 <setup>:

void setup() {
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
	tft.initR(INITR_BLACKTAB);
     eaa:	62 e0       	ldi	r22, 0x02	; 2
     eac:	8e eb       	ldi	r24, 0xBE	; 190
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN15Adafruit_ST77355initREh>
	pinMode(LED_BUILTIN, OUTPUT);
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	8d e0       	ldi	r24, 0x0D	; 13
     eb8:	0e 94 16 11 	call	0x222c	; 0x222c <pinMode>

	pinMode(2, OUTPUT);
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	0e 94 16 11 	call	0x222c	; 0x222c <pinMode>
	pinMode(A0, INPUT);
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	8e e0       	ldi	r24, 0x0E	; 14
     ec8:	0e 94 16 11 	call	0x222c	; 0x222c <pinMode>
	pinMode(A1, INPUT);
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	8f e0       	ldi	r24, 0x0F	; 15
     ed0:	0e 94 16 11 	call	0x222c	; 0x222c <pinMode>
	pinMode(A2, INPUT);
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	80 e1       	ldi	r24, 0x10	; 16
     ed8:	0e 94 16 11 	call	0x222c	; 0x222c <pinMode>
	pinMode(6, OUTPUT);
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	86 e0       	ldi	r24, 0x06	; 6
     ee0:	0e 94 16 11 	call	0x222c	; 0x222c <pinMode>
	digitalWrite(6, HIGH);
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	86 e0       	ldi	r24, 0x06	; 6
     ee8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <digitalWrite>
	digitalWrite(7, HIGH);
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	87 e0       	ldi	r24, 0x07	; 7
     ef0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <digitalWrite>
	digitalWrite(5, LOW);
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	85 e0       	ldi	r24, 0x05	; 5
     ef8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <digitalWrite>
	digitalWrite(2, HIGH);
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	0e 94 52 11 	call	0x22a4	; 0x22a4 <digitalWrite>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     f04:	26 e0       	ldi	r18, 0x06	; 6
     f06:	40 e8       	ldi	r20, 0x80	; 128
     f08:	55 e2       	ldi	r21, 0x25	; 37
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	8f ed       	ldi	r24, 0xDF	; 223
     f10:	92 e0       	ldi	r25, 0x02	; 2
     f12:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_ZN14HardwareSerial5beginEmh>

	Serial.begin(9600);

	set();
     f16:	0e 94 a3 04 	call	0x946	; 0x946 <_Z3setv>
	tft.fillRect(0, 0, tft.width() , tft.height(), 0);
     f1a:	8e eb       	ldi	r24, 0xBE	; 190
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <_ZNK12Adafruit_GFX6heightEv>
     f22:	8c 01       	movw	r16, r24
     f24:	8e eb       	ldi	r24, 0xBE	; 190
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	0e 94 e7 17 	call	0x2fce	; 0x2fce <_ZNK12Adafruit_GFX5widthEv>
     f2c:	e1 2c       	mov	r14, r1
     f2e:	f1 2c       	mov	r15, r1
     f30:	9c 01       	movw	r18, r24
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	8e eb       	ldi	r24, 0xBE	; 190
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN15Adafruit_ST77358fillRectEiiiij>

}
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	08 95       	ret

00000f4c <loop>:
float Ywind;

float totalWind;
float angle;

void loop() {
     f4c:	8f 92       	push	r8
     f4e:	9f 92       	push	r9
     f50:	af 92       	push	r10
     f52:	bf 92       	push	r11
     f54:	cf 92       	push	r12
     f56:	df 92       	push	r13
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	00 d0       	rcall	.+0      	; 0xf66 <loop+0x1a>
     f66:	00 d0       	rcall	.+0      	; 0xf68 <loop+0x1c>
     f68:	00 d0       	rcall	.+0      	; 0xf6a <loop+0x1e>
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
	digitalWrite(LED_BUILTIN, HIGH);
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	8d e0       	ldi	r24, 0x0D	; 13
     f72:	0e 94 52 11 	call	0x22a4	; 0x22a4 <digitalWrite>

	/*
	raw0 = analogRead(A0);
	raw1 = analogRead(A2);
	*/
	raw0 = 2.4;
     f76:	8a e9       	ldi	r24, 0x9A	; 154
     f78:	99 e9       	ldi	r25, 0x99	; 153
     f7a:	a9 e1       	ldi	r26, 0x19	; 25
     f7c:	b0 e4       	ldi	r27, 0x40	; 64
     f7e:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <raw0>
     f82:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <raw0+0x1>
     f86:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <raw0+0x2>
     f8a:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <raw0+0x3>
	raw1 = 2.6;
     f8e:	86 e6       	ldi	r24, 0x66	; 102
     f90:	96 e6       	ldi	r25, 0x66	; 102
     f92:	a6 e2       	ldi	r26, 0x26	; 38
     f94:	b0 e4       	ldi	r27, 0x40	; 64
     f96:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <raw1>
     f9a:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <raw1+0x1>
     f9e:	a0 93 ac 01 	sts	0x01AC, r26	; 0x8001ac <raw1+0x2>
     fa2:	b0 93 ad 01 	sts	0x01AD, r27	; 0x8001ad <raw1+0x3>
	Ywind = interpolate(flows95, (raw1 / 1023.0) * 5.0);
     fa6:	4c e0       	ldi	r20, 0x0C	; 12
     fa8:	54 e3       	ldi	r21, 0x34	; 52
     faa:	60 e5       	ldi	r22, 0x50	; 80
     fac:	7c e3       	ldi	r23, 0x3C	; 60
     fae:	8f ee       	ldi	r24, 0xEF	; 239
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	0e 94 cb 05 	call	0xb96	; 0xb96 <_Z11interpolatePA2_ff>
     fb6:	6b 01       	movw	r12, r22
     fb8:	7c 01       	movw	r14, r24
     fba:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <Ywind>
     fbe:	70 93 a3 01 	sts	0x01A3, r23	; 0x8001a3 <Ywind+0x1>
     fc2:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <Ywind+0x2>
     fc6:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <Ywind+0x3>
	Xwind = interpolate(flows94, (raw0 / 1023.0) * 5.0);
     fca:	4c e0       	ldi	r20, 0x0C	; 12
     fcc:	50 e3       	ldi	r21, 0x30	; 48
     fce:	60 e4       	ldi	r22, 0x40	; 64
     fd0:	7c e3       	ldi	r23, 0x3C	; 60
     fd2:	87 e6       	ldi	r24, 0x67	; 103
     fd4:	92 e0       	ldi	r25, 0x02	; 2
     fd6:	0e 94 cb 05 	call	0xb96	; 0xb96 <_Z11interpolatePA2_ff>
     fda:	4b 01       	movw	r8, r22
     fdc:	5c 01       	movw	r10, r24
     fde:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <Xwind>
     fe2:	70 93 a7 01 	sts	0x01A7, r23	; 0x8001a7 <Xwind+0x1>
     fe6:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <Xwind+0x2>
     fea:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <Xwind+0x3>
	totalWind = getTotalWind(Ywind, Xwind);
     fee:	9b 01       	movw	r18, r22
     ff0:	ac 01       	movw	r20, r24
     ff2:	c7 01       	movw	r24, r14
     ff4:	b6 01       	movw	r22, r12
     ff6:	0e 94 84 06 	call	0xd08	; 0xd08 <_Z12getTotalWindff>
     ffa:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <totalWind>
     ffe:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <totalWind+0x1>
    1002:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <totalWind+0x2>
    1006:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <totalWind+0x3>
	return sqrt(sq(WSx) + sq(WSy));
}

float getWindAngle(float WSy, float WSx) {

	return atan(WSy / WSx);
    100a:	a5 01       	movw	r20, r10
    100c:	94 01       	movw	r18, r8
    100e:	c7 01       	movw	r24, r14
    1010:	b6 01       	movw	r22, r12
    1012:	0e 94 c0 09 	call	0x1380	; 0x1380 <__divsf3>
    1016:	0e 94 87 09 	call	0x130e	; 0x130e <atan>
	raw0 = 2.4;
	raw1 = 2.6;
	Ywind = interpolate(flows95, (raw1 / 1023.0) * 5.0);
	Xwind = interpolate(flows94, (raw0 / 1023.0) * 5.0);
	totalWind = getTotalWind(Ywind, Xwind);
	angle = getWindAngle(Ywind, Xwind );
    101a:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <__data_end>
    101e:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <__data_end+0x1>
    1022:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end+0x2>
    1026:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <__data_end+0x3>


	if (Xwind >= 2 || Ywind >= 2) {
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	50 e4       	ldi	r21, 0x40	; 64
    1032:	c5 01       	movw	r24, r10
    1034:	b4 01       	movw	r22, r8
    1036:	0e 94 80 0b 	call	0x1700	; 0x1700 <__gesf2>
    103a:	87 ff       	sbrs	r24, 7
    103c:	0a c0       	rjmp	.+20     	; 0x1052 <loop+0x106>
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	50 e4       	ldi	r21, 0x40	; 64
    1046:	c7 01       	movw	r24, r14
    1048:	b6 01       	movw	r22, r12
    104a:	0e 94 80 0b 	call	0x1700	; 0x1700 <__gesf2>
    104e:	87 fd       	sbrc	r24, 7
    1050:	de c0       	rjmp	.+444    	; 0x120e <loop+0x2c2>
		tft.setRotation(2);
    1052:	62 e0       	ldi	r22, 0x02	; 2
    1054:	8e eb       	ldi	r24, 0xBE	; 190
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	0e 94 ab 1a 	call	0x3556	; 0x3556 <_ZN15Adafruit_ST773511setRotationEh>
		tft.setCursor(64, 10);
    105c:	4a e0       	ldi	r20, 0x0A	; 10
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	60 e4       	ldi	r22, 0x40	; 64
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	8e eb       	ldi	r24, 0xBE	; 190
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN12Adafruit_GFX9setCursorEii>
		tft.setTextColor(0);
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	8e eb       	ldi	r24, 0xBE	; 190
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN12Adafruit_GFX12setTextColorEj>
		tft.print(lastSpeed);
    1078:	40 91 b2 01 	lds	r20, 0x01B2	; 0x8001b2 <lastSpeed>
    107c:	50 91 b3 01 	lds	r21, 0x01B3	; 0x8001b3 <lastSpeed+0x1>
    1080:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <lastSpeed+0x2>
    1084:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <lastSpeed+0x3>
    1088:	22 e0       	ldi	r18, 0x02	; 2
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	8e eb       	ldi	r24, 0xBE	; 190
    108e:	91 e0       	ldi	r25, 0x01	; 1
    1090:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <_ZN5Print5printEdi>
		tft.setCursor(64, 10);
    1094:	4a e0       	ldi	r20, 0x0A	; 10
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	60 e4       	ldi	r22, 0x40	; 64
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	8e eb       	ldi	r24, 0xBE	; 190
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN12Adafruit_GFX9setCursorEii>

		tft.setTextColor(0xFFFFF);
    10a4:	6f ef       	ldi	r22, 0xFF	; 255
    10a6:	7f ef       	ldi	r23, 0xFF	; 255
    10a8:	8e eb       	ldi	r24, 0xBE	; 190
    10aa:	91 e0       	ldi	r25, 0x01	; 1
    10ac:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN12Adafruit_GFX12setTextColorEj>
		int windKMh = totalWind * 3.6;
    10b0:	26 e6       	ldi	r18, 0x66	; 102
    10b2:	36 e6       	ldi	r19, 0x66	; 102
    10b4:	46 e6       	ldi	r20, 0x66	; 102
    10b6:	50 e4       	ldi	r21, 0x40	; 64
    10b8:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <totalWind>
    10bc:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <totalWind+0x1>
    10c0:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <totalWind+0x2>
    10c4:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <totalWind+0x3>
    10c8:	0e 94 8d 0b 	call	0x171a	; 0x171a <__mulsf3>
    10cc:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fixsfsi>
    10d0:	6b 01       	movw	r12, r22
    10d2:	7c 01       	movw	r14, r24
		lastSpeed = windKMh;
    10d4:	07 2e       	mov	r0, r23
    10d6:	00 0c       	add	r0, r0
    10d8:	88 0b       	sbc	r24, r24
    10da:	99 0b       	sbc	r25, r25
    10dc:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__floatsisf>
    10e0:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <lastSpeed>
    10e4:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <lastSpeed+0x1>
    10e8:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <lastSpeed+0x2>
    10ec:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <lastSpeed+0x3>
		tft.print(String(windKMh));
    10f0:	4a e0       	ldi	r20, 0x0A	; 10
    10f2:	b6 01       	movw	r22, r12
    10f4:	ce 01       	movw	r24, r28
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	0e 94 06 12 	call	0x240c	; 0x240c <_ZN6StringC1Eih>
    10fc:	be 01       	movw	r22, r28
    10fe:	6f 5f       	subi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	8e eb       	ldi	r24, 0xBE	; 190
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <_ZN5Print5printERK6String>
    110a:	ce 01       	movw	r24, r28
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	0e 94 81 11 	call	0x2302	; 0x2302 <_ZN6StringD1Ev>
		//	tft.print(" km/h");



		tft.drawLine(x0, y0, lastX1, lastY1, 0x0);
    1112:	00 91 ba 01 	lds	r16, 0x01BA	; 0x8001ba <lastY1>
    1116:	10 91 bb 01 	lds	r17, 0x01BB	; 0x8001bb <lastY1+0x1>
    111a:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <lastX1>
    111e:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <lastX1+0x1>
    1122:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <y0>
    1126:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <y0+0x1>
    112a:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <x0>
    112e:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <x0+0x1>
    1132:	e1 2c       	mov	r14, r1
    1134:	f1 2c       	mov	r15, r1
    1136:	8e eb       	ldi	r24, 0xBE	; 190
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <_ZN12Adafruit_GFX8drawLineEiiiij>


		plotLine (x0, y0, angle, 50);
    113e:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <__data_end>
    1142:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <__data_end+0x1>
    1146:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <__data_end+0x2>
    114a:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <__data_end+0x3>
    114e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <y0>
    1152:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <y0+0x1>
    1156:	02 e3       	ldi	r16, 0x32	; 50
    1158:	10 e0       	ldi	r17, 0x00	; 0
    115a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <x0>
    115e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <x0+0x1>
    1162:	0e 94 b1 06 	call	0xd62	; 0xd62 <_Z8plotLineiifi>
		Serial.println(angle * (180 / PI));
    1166:	20 ee       	ldi	r18, 0xE0	; 224
    1168:	3e e2       	ldi	r19, 0x2E	; 46
    116a:	45 e6       	ldi	r20, 0x65	; 101
    116c:	52 e4       	ldi	r21, 0x42	; 66
    116e:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <__data_end>
    1172:	70 91 9b 01 	lds	r23, 0x019B	; 0x80019b <__data_end+0x1>
    1176:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end+0x2>
    117a:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <__data_end+0x3>
    117e:	0e 94 8d 0b 	call	0x171a	; 0x171a <__mulsf3>
    1182:	ab 01       	movw	r20, r22
    1184:	bc 01       	movw	r22, r24
    1186:	22 e0       	ldi	r18, 0x02	; 2
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	8f ed       	ldi	r24, 0xDF	; 223
    118c:	92 e0       	ldi	r25, 0x02	; 2
    118e:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <_ZN5Print7printlnEdi>
		Serial.println("!!!!!!!!!!!!!!!!!!!!!");
    1192:	6a e0       	ldi	r22, 0x0A	; 10
    1194:	71 e0       	ldi	r23, 0x01	; 1
    1196:	8f ed       	ldi	r24, 0xDF	; 223
    1198:	92 e0       	ldi	r25, 0x02	; 2
    119a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <_ZN5Print7printlnEPKc>

		Serial.println(Xwind);
    119e:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <Xwind>
    11a2:	50 91 a7 01 	lds	r21, 0x01A7	; 0x8001a7 <Xwind+0x1>
    11a6:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <Xwind+0x2>
    11aa:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <Xwind+0x3>
    11ae:	22 e0       	ldi	r18, 0x02	; 2
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	8f ed       	ldi	r24, 0xDF	; 223
    11b4:	92 e0       	ldi	r25, 0x02	; 2
    11b6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <_ZN5Print7printlnEdi>
		Serial.println(Ywind);
    11ba:	40 91 a2 01 	lds	r20, 0x01A2	; 0x8001a2 <Ywind>
    11be:	50 91 a3 01 	lds	r21, 0x01A3	; 0x8001a3 <Ywind+0x1>
    11c2:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <Ywind+0x2>
    11c6:	70 91 a5 01 	lds	r23, 0x01A5	; 0x8001a5 <Ywind+0x3>
    11ca:	22 e0       	ldi	r18, 0x02	; 2
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	8f ed       	ldi	r24, 0xDF	; 223
    11d0:	92 e0       	ldi	r25, 0x02	; 2
    11d2:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <_ZN5Print7printlnEdi>
		Serial.println("!!!!!!!!!!!!!!!!!!!!!");
    11d6:	6a e0       	ldi	r22, 0x0A	; 10
    11d8:	71 e0       	ldi	r23, 0x01	; 1
    11da:	8f ed       	ldi	r24, 0xDF	; 223
    11dc:	92 e0       	ldi	r25, 0x02	; 2
    11de:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <_ZN5Print7printlnEPKc>
		lastAngle = angle;
    11e2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
    11e6:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x1>
    11ea:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <__data_end+0x2>
    11ee:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <__data_end+0x3>
    11f2:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lastAngle>
    11f6:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <lastAngle+0x1>
    11fa:	a0 93 b8 01 	sts	0x01B8, r26	; 0x8001b8 <lastAngle+0x2>
    11fe:	b0 93 b9 01 	sts	0x01B9, r27	; 0x8001b9 <lastAngle+0x3>
		delay(100);
    1202:	64 e6       	ldi	r22, 0x64	; 100
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 76 10 	call	0x20ec	; 0x20ec <delay>

	}

}
    120e:	26 96       	adiw	r28, 0x06	; 6
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	df 90       	pop	r13
    1228:	cf 90       	pop	r12
    122a:	bf 90       	pop	r11
    122c:	af 90       	pop	r10
    122e:	9f 90       	pop	r9
    1230:	8f 90       	pop	r8
    1232:	08 95       	ret

00001234 <__subsf3>:
    1234:	50 58       	subi	r21, 0x80	; 128

00001236 <__addsf3>:
    1236:	bb 27       	eor	r27, r27
    1238:	aa 27       	eor	r26, r26
    123a:	0e 94 32 09 	call	0x1264	; 0x1264 <__addsf3x>
    123e:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__fp_round>
    1242:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__fp_pscA>
    1246:	38 f0       	brcs	.+14     	; 0x1256 <__addsf3+0x20>
    1248:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fp_pscB>
    124c:	20 f0       	brcs	.+8      	; 0x1256 <__addsf3+0x20>
    124e:	39 f4       	brne	.+14     	; 0x125e <__addsf3+0x28>
    1250:	9f 3f       	cpi	r25, 0xFF	; 255
    1252:	19 f4       	brne	.+6      	; 0x125a <__addsf3+0x24>
    1254:	26 f4       	brtc	.+8      	; 0x125e <__addsf3+0x28>
    1256:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__fp_nan>
    125a:	0e f4       	brtc	.+2      	; 0x125e <__addsf3+0x28>
    125c:	e0 95       	com	r30
    125e:	e7 fb       	bst	r30, 7
    1260:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__fp_inf>

00001264 <__addsf3x>:
    1264:	e9 2f       	mov	r30, r25
    1266:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__fp_split3>
    126a:	58 f3       	brcs	.-42     	; 0x1242 <__addsf3+0xc>
    126c:	ba 17       	cp	r27, r26
    126e:	62 07       	cpc	r22, r18
    1270:	73 07       	cpc	r23, r19
    1272:	84 07       	cpc	r24, r20
    1274:	95 07       	cpc	r25, r21
    1276:	20 f0       	brcs	.+8      	; 0x1280 <__addsf3x+0x1c>
    1278:	79 f4       	brne	.+30     	; 0x1298 <__addsf3x+0x34>
    127a:	a6 f5       	brtc	.+104    	; 0x12e4 <__addsf3x+0x80>
    127c:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__fp_zero>
    1280:	0e f4       	brtc	.+2      	; 0x1284 <__addsf3x+0x20>
    1282:	e0 95       	com	r30
    1284:	0b 2e       	mov	r0, r27
    1286:	ba 2f       	mov	r27, r26
    1288:	a0 2d       	mov	r26, r0
    128a:	0b 01       	movw	r0, r22
    128c:	b9 01       	movw	r22, r18
    128e:	90 01       	movw	r18, r0
    1290:	0c 01       	movw	r0, r24
    1292:	ca 01       	movw	r24, r20
    1294:	a0 01       	movw	r20, r0
    1296:	11 24       	eor	r1, r1
    1298:	ff 27       	eor	r31, r31
    129a:	59 1b       	sub	r21, r25
    129c:	99 f0       	breq	.+38     	; 0x12c4 <__addsf3x+0x60>
    129e:	59 3f       	cpi	r21, 0xF9	; 249
    12a0:	50 f4       	brcc	.+20     	; 0x12b6 <__addsf3x+0x52>
    12a2:	50 3e       	cpi	r21, 0xE0	; 224
    12a4:	68 f1       	brcs	.+90     	; 0x1300 <__addsf3x+0x9c>
    12a6:	1a 16       	cp	r1, r26
    12a8:	f0 40       	sbci	r31, 0x00	; 0
    12aa:	a2 2f       	mov	r26, r18
    12ac:	23 2f       	mov	r18, r19
    12ae:	34 2f       	mov	r19, r20
    12b0:	44 27       	eor	r20, r20
    12b2:	58 5f       	subi	r21, 0xF8	; 248
    12b4:	f3 cf       	rjmp	.-26     	; 0x129c <__addsf3x+0x38>
    12b6:	46 95       	lsr	r20
    12b8:	37 95       	ror	r19
    12ba:	27 95       	ror	r18
    12bc:	a7 95       	ror	r26
    12be:	f0 40       	sbci	r31, 0x00	; 0
    12c0:	53 95       	inc	r21
    12c2:	c9 f7       	brne	.-14     	; 0x12b6 <__addsf3x+0x52>
    12c4:	7e f4       	brtc	.+30     	; 0x12e4 <__addsf3x+0x80>
    12c6:	1f 16       	cp	r1, r31
    12c8:	ba 0b       	sbc	r27, r26
    12ca:	62 0b       	sbc	r22, r18
    12cc:	73 0b       	sbc	r23, r19
    12ce:	84 0b       	sbc	r24, r20
    12d0:	ba f0       	brmi	.+46     	; 0x1300 <__addsf3x+0x9c>
    12d2:	91 50       	subi	r25, 0x01	; 1
    12d4:	a1 f0       	breq	.+40     	; 0x12fe <__addsf3x+0x9a>
    12d6:	ff 0f       	add	r31, r31
    12d8:	bb 1f       	adc	r27, r27
    12da:	66 1f       	adc	r22, r22
    12dc:	77 1f       	adc	r23, r23
    12de:	88 1f       	adc	r24, r24
    12e0:	c2 f7       	brpl	.-16     	; 0x12d2 <__addsf3x+0x6e>
    12e2:	0e c0       	rjmp	.+28     	; 0x1300 <__addsf3x+0x9c>
    12e4:	ba 0f       	add	r27, r26
    12e6:	62 1f       	adc	r22, r18
    12e8:	73 1f       	adc	r23, r19
    12ea:	84 1f       	adc	r24, r20
    12ec:	48 f4       	brcc	.+18     	; 0x1300 <__addsf3x+0x9c>
    12ee:	87 95       	ror	r24
    12f0:	77 95       	ror	r23
    12f2:	67 95       	ror	r22
    12f4:	b7 95       	ror	r27
    12f6:	f7 95       	ror	r31
    12f8:	9e 3f       	cpi	r25, 0xFE	; 254
    12fa:	08 f0       	brcs	.+2      	; 0x12fe <__addsf3x+0x9a>
    12fc:	b0 cf       	rjmp	.-160    	; 0x125e <__addsf3+0x28>
    12fe:	93 95       	inc	r25
    1300:	88 0f       	add	r24, r24
    1302:	08 f0       	brcs	.+2      	; 0x1306 <__addsf3x+0xa2>
    1304:	99 27       	eor	r25, r25
    1306:	ee 0f       	add	r30, r30
    1308:	97 95       	ror	r25
    130a:	87 95       	ror	r24
    130c:	08 95       	ret

0000130e <atan>:
    130e:	df 93       	push	r29
    1310:	dd 27       	eor	r29, r29
    1312:	b9 2f       	mov	r27, r25
    1314:	bf 77       	andi	r27, 0x7F	; 127
    1316:	40 e8       	ldi	r20, 0x80	; 128
    1318:	5f e3       	ldi	r21, 0x3F	; 63
    131a:	16 16       	cp	r1, r22
    131c:	17 06       	cpc	r1, r23
    131e:	48 07       	cpc	r20, r24
    1320:	5b 07       	cpc	r21, r27
    1322:	18 f4       	brcc	.+6      	; 0x132a <atan+0x1c>
    1324:	d9 2f       	mov	r29, r25
    1326:	0e 94 85 0b 	call	0x170a	; 0x170a <inverse>
    132a:	9f 93       	push	r25
    132c:	8f 93       	push	r24
    132e:	7f 93       	push	r23
    1330:	6f 93       	push	r22
    1332:	0e 94 48 0c 	call	0x1890	; 0x1890 <square>
    1336:	e8 e6       	ldi	r30, 0x68	; 104
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__fp_powser>
    133e:	0e 94 32 0b 	call	0x1664	; 0x1664 <__fp_round>
    1342:	2f 91       	pop	r18
    1344:	3f 91       	pop	r19
    1346:	4f 91       	pop	r20
    1348:	5f 91       	pop	r21
    134a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__mulsf3x>
    134e:	dd 23       	and	r29, r29
    1350:	51 f0       	breq	.+20     	; 0x1366 <atan+0x58>
    1352:	90 58       	subi	r25, 0x80	; 128
    1354:	a2 ea       	ldi	r26, 0xA2	; 162
    1356:	2a ed       	ldi	r18, 0xDA	; 218
    1358:	3f e0       	ldi	r19, 0x0F	; 15
    135a:	49 ec       	ldi	r20, 0xC9	; 201
    135c:	5f e3       	ldi	r21, 0x3F	; 63
    135e:	d0 78       	andi	r29, 0x80	; 128
    1360:	5d 27       	eor	r21, r29
    1362:	0e 94 32 09 	call	0x1264	; 0x1264 <__addsf3x>
    1366:	df 91       	pop	r29
    1368:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__fp_round>

0000136c <__cmpsf2>:
    136c:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fp_cmp>
    1370:	08 f4       	brcc	.+2      	; 0x1374 <__cmpsf2+0x8>
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	08 95       	ret

00001376 <cos>:
    1376:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_rempio2>
    137a:	e3 95       	inc	r30
    137c:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_sinus>

00001380 <__divsf3>:
    1380:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__divsf3x>
    1384:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__fp_round>
    1388:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fp_pscB>
    138c:	58 f0       	brcs	.+22     	; 0x13a4 <__divsf3+0x24>
    138e:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__fp_pscA>
    1392:	40 f0       	brcs	.+16     	; 0x13a4 <__divsf3+0x24>
    1394:	29 f4       	brne	.+10     	; 0x13a0 <__divsf3+0x20>
    1396:	5f 3f       	cpi	r21, 0xFF	; 255
    1398:	29 f0       	breq	.+10     	; 0x13a4 <__divsf3+0x24>
    139a:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__fp_inf>
    139e:	51 11       	cpse	r21, r1
    13a0:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__fp_szero>
    13a4:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__fp_nan>

000013a8 <__divsf3x>:
    13a8:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__fp_split3>
    13ac:	68 f3       	brcs	.-38     	; 0x1388 <__divsf3+0x8>

000013ae <__divsf3_pse>:
    13ae:	99 23       	and	r25, r25
    13b0:	b1 f3       	breq	.-20     	; 0x139e <__divsf3+0x1e>
    13b2:	55 23       	and	r21, r21
    13b4:	91 f3       	breq	.-28     	; 0x139a <__divsf3+0x1a>
    13b6:	95 1b       	sub	r25, r21
    13b8:	55 0b       	sbc	r21, r21
    13ba:	bb 27       	eor	r27, r27
    13bc:	aa 27       	eor	r26, r26
    13be:	62 17       	cp	r22, r18
    13c0:	73 07       	cpc	r23, r19
    13c2:	84 07       	cpc	r24, r20
    13c4:	38 f0       	brcs	.+14     	; 0x13d4 <__divsf3_pse+0x26>
    13c6:	9f 5f       	subi	r25, 0xFF	; 255
    13c8:	5f 4f       	sbci	r21, 0xFF	; 255
    13ca:	22 0f       	add	r18, r18
    13cc:	33 1f       	adc	r19, r19
    13ce:	44 1f       	adc	r20, r20
    13d0:	aa 1f       	adc	r26, r26
    13d2:	a9 f3       	breq	.-22     	; 0x13be <__divsf3_pse+0x10>
    13d4:	35 d0       	rcall	.+106    	; 0x1440 <__divsf3_pse+0x92>
    13d6:	0e 2e       	mov	r0, r30
    13d8:	3a f0       	brmi	.+14     	; 0x13e8 <__divsf3_pse+0x3a>
    13da:	e0 e8       	ldi	r30, 0x80	; 128
    13dc:	32 d0       	rcall	.+100    	; 0x1442 <__divsf3_pse+0x94>
    13de:	91 50       	subi	r25, 0x01	; 1
    13e0:	50 40       	sbci	r21, 0x00	; 0
    13e2:	e6 95       	lsr	r30
    13e4:	00 1c       	adc	r0, r0
    13e6:	ca f7       	brpl	.-14     	; 0x13da <__divsf3_pse+0x2c>
    13e8:	2b d0       	rcall	.+86     	; 0x1440 <__divsf3_pse+0x92>
    13ea:	fe 2f       	mov	r31, r30
    13ec:	29 d0       	rcall	.+82     	; 0x1440 <__divsf3_pse+0x92>
    13ee:	66 0f       	add	r22, r22
    13f0:	77 1f       	adc	r23, r23
    13f2:	88 1f       	adc	r24, r24
    13f4:	bb 1f       	adc	r27, r27
    13f6:	26 17       	cp	r18, r22
    13f8:	37 07       	cpc	r19, r23
    13fa:	48 07       	cpc	r20, r24
    13fc:	ab 07       	cpc	r26, r27
    13fe:	b0 e8       	ldi	r27, 0x80	; 128
    1400:	09 f0       	breq	.+2      	; 0x1404 <__divsf3_pse+0x56>
    1402:	bb 0b       	sbc	r27, r27
    1404:	80 2d       	mov	r24, r0
    1406:	bf 01       	movw	r22, r30
    1408:	ff 27       	eor	r31, r31
    140a:	93 58       	subi	r25, 0x83	; 131
    140c:	5f 4f       	sbci	r21, 0xFF	; 255
    140e:	3a f0       	brmi	.+14     	; 0x141e <__divsf3_pse+0x70>
    1410:	9e 3f       	cpi	r25, 0xFE	; 254
    1412:	51 05       	cpc	r21, r1
    1414:	78 f0       	brcs	.+30     	; 0x1434 <__divsf3_pse+0x86>
    1416:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__fp_inf>
    141a:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__fp_szero>
    141e:	5f 3f       	cpi	r21, 0xFF	; 255
    1420:	e4 f3       	brlt	.-8      	; 0x141a <__divsf3_pse+0x6c>
    1422:	98 3e       	cpi	r25, 0xE8	; 232
    1424:	d4 f3       	brlt	.-12     	; 0x141a <__divsf3_pse+0x6c>
    1426:	86 95       	lsr	r24
    1428:	77 95       	ror	r23
    142a:	67 95       	ror	r22
    142c:	b7 95       	ror	r27
    142e:	f7 95       	ror	r31
    1430:	9f 5f       	subi	r25, 0xFF	; 255
    1432:	c9 f7       	brne	.-14     	; 0x1426 <__divsf3_pse+0x78>
    1434:	88 0f       	add	r24, r24
    1436:	91 1d       	adc	r25, r1
    1438:	96 95       	lsr	r25
    143a:	87 95       	ror	r24
    143c:	97 f9       	bld	r25, 7
    143e:	08 95       	ret
    1440:	e1 e0       	ldi	r30, 0x01	; 1
    1442:	66 0f       	add	r22, r22
    1444:	77 1f       	adc	r23, r23
    1446:	88 1f       	adc	r24, r24
    1448:	bb 1f       	adc	r27, r27
    144a:	62 17       	cp	r22, r18
    144c:	73 07       	cpc	r23, r19
    144e:	84 07       	cpc	r24, r20
    1450:	ba 07       	cpc	r27, r26
    1452:	20 f0       	brcs	.+8      	; 0x145c <__divsf3_pse+0xae>
    1454:	62 1b       	sub	r22, r18
    1456:	73 0b       	sbc	r23, r19
    1458:	84 0b       	sbc	r24, r20
    145a:	ba 0b       	sbc	r27, r26
    145c:	ee 1f       	adc	r30, r30
    145e:	88 f7       	brcc	.-30     	; 0x1442 <__divsf3_pse+0x94>
    1460:	e0 95       	com	r30
    1462:	08 95       	ret

00001464 <__fixsfsi>:
    1464:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fixunssfsi>
    1468:	68 94       	set
    146a:	b1 11       	cpse	r27, r1
    146c:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__fp_szero>
    1470:	08 95       	ret

00001472 <__fixunssfsi>:
    1472:	0e 94 5f 0b 	call	0x16be	; 0x16be <__fp_splitA>
    1476:	88 f0       	brcs	.+34     	; 0x149a <__fixunssfsi+0x28>
    1478:	9f 57       	subi	r25, 0x7F	; 127
    147a:	98 f0       	brcs	.+38     	; 0x14a2 <__fixunssfsi+0x30>
    147c:	b9 2f       	mov	r27, r25
    147e:	99 27       	eor	r25, r25
    1480:	b7 51       	subi	r27, 0x17	; 23
    1482:	b0 f0       	brcs	.+44     	; 0x14b0 <__fixunssfsi+0x3e>
    1484:	e1 f0       	breq	.+56     	; 0x14be <__fixunssfsi+0x4c>
    1486:	66 0f       	add	r22, r22
    1488:	77 1f       	adc	r23, r23
    148a:	88 1f       	adc	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	1a f0       	brmi	.+6      	; 0x1496 <__fixunssfsi+0x24>
    1490:	ba 95       	dec	r27
    1492:	c9 f7       	brne	.-14     	; 0x1486 <__fixunssfsi+0x14>
    1494:	14 c0       	rjmp	.+40     	; 0x14be <__fixunssfsi+0x4c>
    1496:	b1 30       	cpi	r27, 0x01	; 1
    1498:	91 f0       	breq	.+36     	; 0x14be <__fixunssfsi+0x4c>
    149a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__fp_zero>
    149e:	b1 e0       	ldi	r27, 0x01	; 1
    14a0:	08 95       	ret
    14a2:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__fp_zero>
    14a6:	67 2f       	mov	r22, r23
    14a8:	78 2f       	mov	r23, r24
    14aa:	88 27       	eor	r24, r24
    14ac:	b8 5f       	subi	r27, 0xF8	; 248
    14ae:	39 f0       	breq	.+14     	; 0x14be <__fixunssfsi+0x4c>
    14b0:	b9 3f       	cpi	r27, 0xF9	; 249
    14b2:	cc f3       	brlt	.-14     	; 0x14a6 <__fixunssfsi+0x34>
    14b4:	86 95       	lsr	r24
    14b6:	77 95       	ror	r23
    14b8:	67 95       	ror	r22
    14ba:	b3 95       	inc	r27
    14bc:	d9 f7       	brne	.-10     	; 0x14b4 <__fixunssfsi+0x42>
    14be:	3e f4       	brtc	.+14     	; 0x14ce <__fixunssfsi+0x5c>
    14c0:	90 95       	com	r25
    14c2:	80 95       	com	r24
    14c4:	70 95       	com	r23
    14c6:	61 95       	neg	r22
    14c8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ca:	8f 4f       	sbci	r24, 0xFF	; 255
    14cc:	9f 4f       	sbci	r25, 0xFF	; 255
    14ce:	08 95       	ret

000014d0 <__floatunsisf>:
    14d0:	e8 94       	clt
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <__floatsisf+0x12>

000014d4 <__floatsisf>:
    14d4:	97 fb       	bst	r25, 7
    14d6:	3e f4       	brtc	.+14     	; 0x14e6 <__floatsisf+0x12>
    14d8:	90 95       	com	r25
    14da:	80 95       	com	r24
    14dc:	70 95       	com	r23
    14de:	61 95       	neg	r22
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	8f 4f       	sbci	r24, 0xFF	; 255
    14e4:	9f 4f       	sbci	r25, 0xFF	; 255
    14e6:	99 23       	and	r25, r25
    14e8:	a9 f0       	breq	.+42     	; 0x1514 <__floatsisf+0x40>
    14ea:	f9 2f       	mov	r31, r25
    14ec:	96 e9       	ldi	r25, 0x96	; 150
    14ee:	bb 27       	eor	r27, r27
    14f0:	93 95       	inc	r25
    14f2:	f6 95       	lsr	r31
    14f4:	87 95       	ror	r24
    14f6:	77 95       	ror	r23
    14f8:	67 95       	ror	r22
    14fa:	b7 95       	ror	r27
    14fc:	f1 11       	cpse	r31, r1
    14fe:	f8 cf       	rjmp	.-16     	; 0x14f0 <__floatsisf+0x1c>
    1500:	fa f4       	brpl	.+62     	; 0x1540 <__floatsisf+0x6c>
    1502:	bb 0f       	add	r27, r27
    1504:	11 f4       	brne	.+4      	; 0x150a <__floatsisf+0x36>
    1506:	60 ff       	sbrs	r22, 0
    1508:	1b c0       	rjmp	.+54     	; 0x1540 <__floatsisf+0x6c>
    150a:	6f 5f       	subi	r22, 0xFF	; 255
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	8f 4f       	sbci	r24, 0xFF	; 255
    1510:	9f 4f       	sbci	r25, 0xFF	; 255
    1512:	16 c0       	rjmp	.+44     	; 0x1540 <__floatsisf+0x6c>
    1514:	88 23       	and	r24, r24
    1516:	11 f0       	breq	.+4      	; 0x151c <__floatsisf+0x48>
    1518:	96 e9       	ldi	r25, 0x96	; 150
    151a:	11 c0       	rjmp	.+34     	; 0x153e <__floatsisf+0x6a>
    151c:	77 23       	and	r23, r23
    151e:	21 f0       	breq	.+8      	; 0x1528 <__floatsisf+0x54>
    1520:	9e e8       	ldi	r25, 0x8E	; 142
    1522:	87 2f       	mov	r24, r23
    1524:	76 2f       	mov	r23, r22
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <__floatsisf+0x5e>
    1528:	66 23       	and	r22, r22
    152a:	71 f0       	breq	.+28     	; 0x1548 <__floatsisf+0x74>
    152c:	96 e8       	ldi	r25, 0x86	; 134
    152e:	86 2f       	mov	r24, r22
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	2a f0       	brmi	.+10     	; 0x1540 <__floatsisf+0x6c>
    1536:	9a 95       	dec	r25
    1538:	66 0f       	add	r22, r22
    153a:	77 1f       	adc	r23, r23
    153c:	88 1f       	adc	r24, r24
    153e:	da f7       	brpl	.-10     	; 0x1536 <__floatsisf+0x62>
    1540:	88 0f       	add	r24, r24
    1542:	96 95       	lsr	r25
    1544:	87 95       	ror	r24
    1546:	97 f9       	bld	r25, 7
    1548:	08 95       	ret

0000154a <__fp_cmp>:
    154a:	99 0f       	add	r25, r25
    154c:	00 08       	sbc	r0, r0
    154e:	55 0f       	add	r21, r21
    1550:	aa 0b       	sbc	r26, r26
    1552:	e0 e8       	ldi	r30, 0x80	; 128
    1554:	fe ef       	ldi	r31, 0xFE	; 254
    1556:	16 16       	cp	r1, r22
    1558:	17 06       	cpc	r1, r23
    155a:	e8 07       	cpc	r30, r24
    155c:	f9 07       	cpc	r31, r25
    155e:	c0 f0       	brcs	.+48     	; 0x1590 <__fp_cmp+0x46>
    1560:	12 16       	cp	r1, r18
    1562:	13 06       	cpc	r1, r19
    1564:	e4 07       	cpc	r30, r20
    1566:	f5 07       	cpc	r31, r21
    1568:	98 f0       	brcs	.+38     	; 0x1590 <__fp_cmp+0x46>
    156a:	62 1b       	sub	r22, r18
    156c:	73 0b       	sbc	r23, r19
    156e:	84 0b       	sbc	r24, r20
    1570:	95 0b       	sbc	r25, r21
    1572:	39 f4       	brne	.+14     	; 0x1582 <__fp_cmp+0x38>
    1574:	0a 26       	eor	r0, r26
    1576:	61 f0       	breq	.+24     	; 0x1590 <__fp_cmp+0x46>
    1578:	23 2b       	or	r18, r19
    157a:	24 2b       	or	r18, r20
    157c:	25 2b       	or	r18, r21
    157e:	21 f4       	brne	.+8      	; 0x1588 <__fp_cmp+0x3e>
    1580:	08 95       	ret
    1582:	0a 26       	eor	r0, r26
    1584:	09 f4       	brne	.+2      	; 0x1588 <__fp_cmp+0x3e>
    1586:	a1 40       	sbci	r26, 0x01	; 1
    1588:	a6 95       	lsr	r26
    158a:	8f ef       	ldi	r24, 0xFF	; 255
    158c:	81 1d       	adc	r24, r1
    158e:	81 1d       	adc	r24, r1
    1590:	08 95       	ret

00001592 <__fp_inf>:
    1592:	97 f9       	bld	r25, 7
    1594:	9f 67       	ori	r25, 0x7F	; 127
    1596:	80 e8       	ldi	r24, 0x80	; 128
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	08 95       	ret

0000159e <__fp_nan>:
    159e:	9f ef       	ldi	r25, 0xFF	; 255
    15a0:	80 ec       	ldi	r24, 0xC0	; 192
    15a2:	08 95       	ret

000015a4 <__fp_powser>:
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	1f 93       	push	r17
    15aa:	0f 93       	push	r16
    15ac:	ff 92       	push	r15
    15ae:	ef 92       	push	r14
    15b0:	df 92       	push	r13
    15b2:	7b 01       	movw	r14, r22
    15b4:	8c 01       	movw	r16, r24
    15b6:	68 94       	set
    15b8:	06 c0       	rjmp	.+12     	; 0x15c6 <__fp_powser+0x22>
    15ba:	da 2e       	mov	r13, r26
    15bc:	ef 01       	movw	r28, r30
    15be:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__mulsf3x>
    15c2:	fe 01       	movw	r30, r28
    15c4:	e8 94       	clt
    15c6:	a5 91       	lpm	r26, Z+
    15c8:	25 91       	lpm	r18, Z+
    15ca:	35 91       	lpm	r19, Z+
    15cc:	45 91       	lpm	r20, Z+
    15ce:	55 91       	lpm	r21, Z+
    15d0:	a6 f3       	brts	.-24     	; 0x15ba <__fp_powser+0x16>
    15d2:	ef 01       	movw	r28, r30
    15d4:	0e 94 32 09 	call	0x1264	; 0x1264 <__addsf3x>
    15d8:	fe 01       	movw	r30, r28
    15da:	97 01       	movw	r18, r14
    15dc:	a8 01       	movw	r20, r16
    15de:	da 94       	dec	r13
    15e0:	69 f7       	brne	.-38     	; 0x15bc <__fp_powser+0x18>
    15e2:	df 90       	pop	r13
    15e4:	ef 90       	pop	r14
    15e6:	ff 90       	pop	r15
    15e8:	0f 91       	pop	r16
    15ea:	1f 91       	pop	r17
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <__fp_pscA>:
    15f2:	00 24       	eor	r0, r0
    15f4:	0a 94       	dec	r0
    15f6:	16 16       	cp	r1, r22
    15f8:	17 06       	cpc	r1, r23
    15fa:	18 06       	cpc	r1, r24
    15fc:	09 06       	cpc	r0, r25
    15fe:	08 95       	ret

00001600 <__fp_pscB>:
    1600:	00 24       	eor	r0, r0
    1602:	0a 94       	dec	r0
    1604:	12 16       	cp	r1, r18
    1606:	13 06       	cpc	r1, r19
    1608:	14 06       	cpc	r1, r20
    160a:	05 06       	cpc	r0, r21
    160c:	08 95       	ret
    160e:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__fp_nan>

00001612 <__fp_rempio2>:
    1612:	0e 94 5f 0b 	call	0x16be	; 0x16be <__fp_splitA>
    1616:	d8 f3       	brcs	.-10     	; 0x160e <__fp_pscB+0xe>
    1618:	e8 94       	clt
    161a:	e0 e0       	ldi	r30, 0x00	; 0
    161c:	bb 27       	eor	r27, r27
    161e:	9f 57       	subi	r25, 0x7F	; 127
    1620:	f0 f0       	brcs	.+60     	; 0x165e <__fp_rempio2+0x4c>
    1622:	2a ed       	ldi	r18, 0xDA	; 218
    1624:	3f e0       	ldi	r19, 0x0F	; 15
    1626:	49 ec       	ldi	r20, 0xC9	; 201
    1628:	06 c0       	rjmp	.+12     	; 0x1636 <__fp_rempio2+0x24>
    162a:	ee 0f       	add	r30, r30
    162c:	bb 0f       	add	r27, r27
    162e:	66 1f       	adc	r22, r22
    1630:	77 1f       	adc	r23, r23
    1632:	88 1f       	adc	r24, r24
    1634:	28 f0       	brcs	.+10     	; 0x1640 <__fp_rempio2+0x2e>
    1636:	b2 3a       	cpi	r27, 0xA2	; 162
    1638:	62 07       	cpc	r22, r18
    163a:	73 07       	cpc	r23, r19
    163c:	84 07       	cpc	r24, r20
    163e:	28 f0       	brcs	.+10     	; 0x164a <__fp_rempio2+0x38>
    1640:	b2 5a       	subi	r27, 0xA2	; 162
    1642:	62 0b       	sbc	r22, r18
    1644:	73 0b       	sbc	r23, r19
    1646:	84 0b       	sbc	r24, r20
    1648:	e3 95       	inc	r30
    164a:	9a 95       	dec	r25
    164c:	72 f7       	brpl	.-36     	; 0x162a <__fp_rempio2+0x18>
    164e:	80 38       	cpi	r24, 0x80	; 128
    1650:	30 f4       	brcc	.+12     	; 0x165e <__fp_rempio2+0x4c>
    1652:	9a 95       	dec	r25
    1654:	bb 0f       	add	r27, r27
    1656:	66 1f       	adc	r22, r22
    1658:	77 1f       	adc	r23, r23
    165a:	88 1f       	adc	r24, r24
    165c:	d2 f7       	brpl	.-12     	; 0x1652 <__fp_rempio2+0x40>
    165e:	90 48       	sbci	r25, 0x80	; 128
    1660:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <__fp_mpack_finite>

00001664 <__fp_round>:
    1664:	09 2e       	mov	r0, r25
    1666:	03 94       	inc	r0
    1668:	00 0c       	add	r0, r0
    166a:	11 f4       	brne	.+4      	; 0x1670 <__fp_round+0xc>
    166c:	88 23       	and	r24, r24
    166e:	52 f0       	brmi	.+20     	; 0x1684 <__fp_round+0x20>
    1670:	bb 0f       	add	r27, r27
    1672:	40 f4       	brcc	.+16     	; 0x1684 <__fp_round+0x20>
    1674:	bf 2b       	or	r27, r31
    1676:	11 f4       	brne	.+4      	; 0x167c <__fp_round+0x18>
    1678:	60 ff       	sbrs	r22, 0
    167a:	04 c0       	rjmp	.+8      	; 0x1684 <__fp_round+0x20>
    167c:	6f 5f       	subi	r22, 0xFF	; 255
    167e:	7f 4f       	sbci	r23, 0xFF	; 255
    1680:	8f 4f       	sbci	r24, 0xFF	; 255
    1682:	9f 4f       	sbci	r25, 0xFF	; 255
    1684:	08 95       	ret

00001686 <__fp_sinus>:
    1686:	ef 93       	push	r30
    1688:	e0 ff       	sbrs	r30, 0
    168a:	07 c0       	rjmp	.+14     	; 0x169a <__fp_sinus+0x14>
    168c:	a2 ea       	ldi	r26, 0xA2	; 162
    168e:	2a ed       	ldi	r18, 0xDA	; 218
    1690:	3f e0       	ldi	r19, 0x0F	; 15
    1692:	49 ec       	ldi	r20, 0xC9	; 201
    1694:	5f eb       	ldi	r21, 0xBF	; 191
    1696:	0e 94 32 09 	call	0x1264	; 0x1264 <__addsf3x>
    169a:	0e 94 32 0b 	call	0x1664	; 0x1664 <__fp_round>
    169e:	0f 90       	pop	r0
    16a0:	03 94       	inc	r0
    16a2:	01 fc       	sbrc	r0, 1
    16a4:	90 58       	subi	r25, 0x80	; 128
    16a6:	e5 e9       	ldi	r30, 0x95	; 149
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <__fp_powsodd>

000016ae <__fp_split3>:
    16ae:	57 fd       	sbrc	r21, 7
    16b0:	90 58       	subi	r25, 0x80	; 128
    16b2:	44 0f       	add	r20, r20
    16b4:	55 1f       	adc	r21, r21
    16b6:	59 f0       	breq	.+22     	; 0x16ce <__fp_splitA+0x10>
    16b8:	5f 3f       	cpi	r21, 0xFF	; 255
    16ba:	71 f0       	breq	.+28     	; 0x16d8 <__fp_splitA+0x1a>
    16bc:	47 95       	ror	r20

000016be <__fp_splitA>:
    16be:	88 0f       	add	r24, r24
    16c0:	97 fb       	bst	r25, 7
    16c2:	99 1f       	adc	r25, r25
    16c4:	61 f0       	breq	.+24     	; 0x16de <__fp_splitA+0x20>
    16c6:	9f 3f       	cpi	r25, 0xFF	; 255
    16c8:	79 f0       	breq	.+30     	; 0x16e8 <__fp_splitA+0x2a>
    16ca:	87 95       	ror	r24
    16cc:	08 95       	ret
    16ce:	12 16       	cp	r1, r18
    16d0:	13 06       	cpc	r1, r19
    16d2:	14 06       	cpc	r1, r20
    16d4:	55 1f       	adc	r21, r21
    16d6:	f2 cf       	rjmp	.-28     	; 0x16bc <__fp_split3+0xe>
    16d8:	46 95       	lsr	r20
    16da:	f1 df       	rcall	.-30     	; 0x16be <__fp_splitA>
    16dc:	08 c0       	rjmp	.+16     	; 0x16ee <__fp_splitA+0x30>
    16de:	16 16       	cp	r1, r22
    16e0:	17 06       	cpc	r1, r23
    16e2:	18 06       	cpc	r1, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	f1 cf       	rjmp	.-30     	; 0x16ca <__fp_splitA+0xc>
    16e8:	86 95       	lsr	r24
    16ea:	71 05       	cpc	r23, r1
    16ec:	61 05       	cpc	r22, r1
    16ee:	08 94       	sec
    16f0:	08 95       	ret

000016f2 <__fp_zero>:
    16f2:	e8 94       	clt

000016f4 <__fp_szero>:
    16f4:	bb 27       	eor	r27, r27
    16f6:	66 27       	eor	r22, r22
    16f8:	77 27       	eor	r23, r23
    16fa:	cb 01       	movw	r24, r22
    16fc:	97 f9       	bld	r25, 7
    16fe:	08 95       	ret

00001700 <__gesf2>:
    1700:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fp_cmp>
    1704:	08 f4       	brcc	.+2      	; 0x1708 <__gesf2+0x8>
    1706:	8f ef       	ldi	r24, 0xFF	; 255
    1708:	08 95       	ret

0000170a <inverse>:
    170a:	9b 01       	movw	r18, r22
    170c:	ac 01       	movw	r20, r24
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	80 e8       	ldi	r24, 0x80	; 128
    1714:	9f e3       	ldi	r25, 0x3F	; 63
    1716:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__divsf3>

0000171a <__mulsf3>:
    171a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__mulsf3x>
    171e:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__fp_round>
    1722:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__fp_pscA>
    1726:	38 f0       	brcs	.+14     	; 0x1736 <__mulsf3+0x1c>
    1728:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fp_pscB>
    172c:	20 f0       	brcs	.+8      	; 0x1736 <__mulsf3+0x1c>
    172e:	95 23       	and	r25, r21
    1730:	11 f0       	breq	.+4      	; 0x1736 <__mulsf3+0x1c>
    1732:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__fp_inf>
    1736:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__fp_nan>
    173a:	11 24       	eor	r1, r1
    173c:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__fp_szero>

00001740 <__mulsf3x>:
    1740:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__fp_split3>
    1744:	70 f3       	brcs	.-36     	; 0x1722 <__mulsf3+0x8>

00001746 <__mulsf3_pse>:
    1746:	95 9f       	mul	r25, r21
    1748:	c1 f3       	breq	.-16     	; 0x173a <__mulsf3+0x20>
    174a:	95 0f       	add	r25, r21
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	55 1f       	adc	r21, r21
    1750:	62 9f       	mul	r22, r18
    1752:	f0 01       	movw	r30, r0
    1754:	72 9f       	mul	r23, r18
    1756:	bb 27       	eor	r27, r27
    1758:	f0 0d       	add	r31, r0
    175a:	b1 1d       	adc	r27, r1
    175c:	63 9f       	mul	r22, r19
    175e:	aa 27       	eor	r26, r26
    1760:	f0 0d       	add	r31, r0
    1762:	b1 1d       	adc	r27, r1
    1764:	aa 1f       	adc	r26, r26
    1766:	64 9f       	mul	r22, r20
    1768:	66 27       	eor	r22, r22
    176a:	b0 0d       	add	r27, r0
    176c:	a1 1d       	adc	r26, r1
    176e:	66 1f       	adc	r22, r22
    1770:	82 9f       	mul	r24, r18
    1772:	22 27       	eor	r18, r18
    1774:	b0 0d       	add	r27, r0
    1776:	a1 1d       	adc	r26, r1
    1778:	62 1f       	adc	r22, r18
    177a:	73 9f       	mul	r23, r19
    177c:	b0 0d       	add	r27, r0
    177e:	a1 1d       	adc	r26, r1
    1780:	62 1f       	adc	r22, r18
    1782:	83 9f       	mul	r24, r19
    1784:	a0 0d       	add	r26, r0
    1786:	61 1d       	adc	r22, r1
    1788:	22 1f       	adc	r18, r18
    178a:	74 9f       	mul	r23, r20
    178c:	33 27       	eor	r19, r19
    178e:	a0 0d       	add	r26, r0
    1790:	61 1d       	adc	r22, r1
    1792:	23 1f       	adc	r18, r19
    1794:	84 9f       	mul	r24, r20
    1796:	60 0d       	add	r22, r0
    1798:	21 1d       	adc	r18, r1
    179a:	82 2f       	mov	r24, r18
    179c:	76 2f       	mov	r23, r22
    179e:	6a 2f       	mov	r22, r26
    17a0:	11 24       	eor	r1, r1
    17a2:	9f 57       	subi	r25, 0x7F	; 127
    17a4:	50 40       	sbci	r21, 0x00	; 0
    17a6:	9a f0       	brmi	.+38     	; 0x17ce <__mulsf3_pse+0x88>
    17a8:	f1 f0       	breq	.+60     	; 0x17e6 <__mulsf3_pse+0xa0>
    17aa:	88 23       	and	r24, r24
    17ac:	4a f0       	brmi	.+18     	; 0x17c0 <__mulsf3_pse+0x7a>
    17ae:	ee 0f       	add	r30, r30
    17b0:	ff 1f       	adc	r31, r31
    17b2:	bb 1f       	adc	r27, r27
    17b4:	66 1f       	adc	r22, r22
    17b6:	77 1f       	adc	r23, r23
    17b8:	88 1f       	adc	r24, r24
    17ba:	91 50       	subi	r25, 0x01	; 1
    17bc:	50 40       	sbci	r21, 0x00	; 0
    17be:	a9 f7       	brne	.-22     	; 0x17aa <__mulsf3_pse+0x64>
    17c0:	9e 3f       	cpi	r25, 0xFE	; 254
    17c2:	51 05       	cpc	r21, r1
    17c4:	80 f0       	brcs	.+32     	; 0x17e6 <__mulsf3_pse+0xa0>
    17c6:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__fp_inf>
    17ca:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__fp_szero>
    17ce:	5f 3f       	cpi	r21, 0xFF	; 255
    17d0:	e4 f3       	brlt	.-8      	; 0x17ca <__mulsf3_pse+0x84>
    17d2:	98 3e       	cpi	r25, 0xE8	; 232
    17d4:	d4 f3       	brlt	.-12     	; 0x17ca <__mulsf3_pse+0x84>
    17d6:	86 95       	lsr	r24
    17d8:	77 95       	ror	r23
    17da:	67 95       	ror	r22
    17dc:	b7 95       	ror	r27
    17de:	f7 95       	ror	r31
    17e0:	e7 95       	ror	r30
    17e2:	9f 5f       	subi	r25, 0xFF	; 255
    17e4:	c1 f7       	brne	.-16     	; 0x17d6 <__mulsf3_pse+0x90>
    17e6:	fe 2b       	or	r31, r30
    17e8:	88 0f       	add	r24, r24
    17ea:	91 1d       	adc	r25, r1
    17ec:	96 95       	lsr	r25
    17ee:	87 95       	ror	r24
    17f0:	97 f9       	bld	r25, 7
    17f2:	08 95       	ret

000017f4 <sin>:
    17f4:	9f 93       	push	r25
    17f6:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_rempio2>
    17fa:	0f 90       	pop	r0
    17fc:	07 fc       	sbrc	r0, 7
    17fe:	ee 5f       	subi	r30, 0xFE	; 254
    1800:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__fp_sinus>
    1804:	19 f4       	brne	.+6      	; 0x180c <sin+0x18>
    1806:	16 f4       	brtc	.+4      	; 0x180c <sin+0x18>
    1808:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__fp_nan>
    180c:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__fp_mpack>

00001810 <sqrt>:
    1810:	0e 94 5f 0b 	call	0x16be	; 0x16be <__fp_splitA>
    1814:	b8 f3       	brcs	.-18     	; 0x1804 <sin+0x10>
    1816:	99 23       	and	r25, r25
    1818:	c9 f3       	breq	.-14     	; 0x180c <sin+0x18>
    181a:	b6 f3       	brts	.-20     	; 0x1808 <sin+0x14>
    181c:	9f 57       	subi	r25, 0x7F	; 127
    181e:	55 0b       	sbc	r21, r21
    1820:	87 ff       	sbrs	r24, 7
    1822:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__fp_norm2>
    1826:	00 24       	eor	r0, r0
    1828:	a0 e6       	ldi	r26, 0x60	; 96
    182a:	40 ea       	ldi	r20, 0xA0	; 160
    182c:	90 01       	movw	r18, r0
    182e:	80 58       	subi	r24, 0x80	; 128
    1830:	56 95       	lsr	r21
    1832:	97 95       	ror	r25
    1834:	28 f4       	brcc	.+10     	; 0x1840 <sqrt+0x30>
    1836:	80 5c       	subi	r24, 0xC0	; 192
    1838:	66 0f       	add	r22, r22
    183a:	77 1f       	adc	r23, r23
    183c:	88 1f       	adc	r24, r24
    183e:	20 f0       	brcs	.+8      	; 0x1848 <sqrt+0x38>
    1840:	26 17       	cp	r18, r22
    1842:	37 07       	cpc	r19, r23
    1844:	48 07       	cpc	r20, r24
    1846:	30 f4       	brcc	.+12     	; 0x1854 <sqrt+0x44>
    1848:	62 1b       	sub	r22, r18
    184a:	73 0b       	sbc	r23, r19
    184c:	84 0b       	sbc	r24, r20
    184e:	20 29       	or	r18, r0
    1850:	31 29       	or	r19, r1
    1852:	4a 2b       	or	r20, r26
    1854:	a6 95       	lsr	r26
    1856:	17 94       	ror	r1
    1858:	07 94       	ror	r0
    185a:	20 25       	eor	r18, r0
    185c:	31 25       	eor	r19, r1
    185e:	4a 27       	eor	r20, r26
    1860:	58 f7       	brcc	.-42     	; 0x1838 <sqrt+0x28>
    1862:	66 0f       	add	r22, r22
    1864:	77 1f       	adc	r23, r23
    1866:	88 1f       	adc	r24, r24
    1868:	20 f0       	brcs	.+8      	; 0x1872 <sqrt+0x62>
    186a:	26 17       	cp	r18, r22
    186c:	37 07       	cpc	r19, r23
    186e:	48 07       	cpc	r20, r24
    1870:	30 f4       	brcc	.+12     	; 0x187e <sqrt+0x6e>
    1872:	62 0b       	sbc	r22, r18
    1874:	73 0b       	sbc	r23, r19
    1876:	84 0b       	sbc	r24, r20
    1878:	20 0d       	add	r18, r0
    187a:	31 1d       	adc	r19, r1
    187c:	41 1d       	adc	r20, r1
    187e:	a0 95       	com	r26
    1880:	81 f7       	brne	.-32     	; 0x1862 <sqrt+0x52>
    1882:	b9 01       	movw	r22, r18
    1884:	84 2f       	mov	r24, r20
    1886:	91 58       	subi	r25, 0x81	; 129
    1888:	88 0f       	add	r24, r24
    188a:	96 95       	lsr	r25
    188c:	87 95       	ror	r24
    188e:	08 95       	ret

00001890 <square>:
    1890:	9b 01       	movw	r18, r22
    1892:	ac 01       	movw	r20, r24
    1894:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__mulsf3>

00001898 <__fp_mpack>:
    1898:	9f 3f       	cpi	r25, 0xFF	; 255
    189a:	31 f0       	breq	.+12     	; 0x18a8 <__fp_mpack_finite+0xc>

0000189c <__fp_mpack_finite>:
    189c:	91 50       	subi	r25, 0x01	; 1
    189e:	20 f4       	brcc	.+8      	; 0x18a8 <__fp_mpack_finite+0xc>
    18a0:	87 95       	ror	r24
    18a2:	77 95       	ror	r23
    18a4:	67 95       	ror	r22
    18a6:	b7 95       	ror	r27
    18a8:	88 0f       	add	r24, r24
    18aa:	91 1d       	adc	r25, r1
    18ac:	96 95       	lsr	r25
    18ae:	87 95       	ror	r24
    18b0:	97 f9       	bld	r25, 7
    18b2:	08 95       	ret

000018b4 <__fp_norm2>:
    18b4:	91 50       	subi	r25, 0x01	; 1
    18b6:	50 40       	sbci	r21, 0x00	; 0
    18b8:	66 0f       	add	r22, r22
    18ba:	77 1f       	adc	r23, r23
    18bc:	88 1f       	adc	r24, r24
    18be:	d2 f7       	brpl	.-12     	; 0x18b4 <__fp_norm2>
    18c0:	08 95       	ret

000018c2 <__fp_powsodd>:
    18c2:	9f 93       	push	r25
    18c4:	8f 93       	push	r24
    18c6:	7f 93       	push	r23
    18c8:	6f 93       	push	r22
    18ca:	ff 93       	push	r31
    18cc:	ef 93       	push	r30
    18ce:	9b 01       	movw	r18, r22
    18d0:	ac 01       	movw	r20, r24
    18d2:	0e 94 8d 0b 	call	0x171a	; 0x171a <__mulsf3>
    18d6:	ef 91       	pop	r30
    18d8:	ff 91       	pop	r31
    18da:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__fp_powser>
    18de:	2f 91       	pop	r18
    18e0:	3f 91       	pop	r19
    18e2:	4f 91       	pop	r20
    18e4:	5f 91       	pop	r21
    18e6:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__mulsf3>

000018ea <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    18ea:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    18ec:	91 8d       	ldd	r25, Z+25	; 0x19
    18ee:	22 8d       	ldd	r18, Z+26	; 0x1a
    18f0:	89 2f       	mov	r24, r25
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	80 5c       	subi	r24, 0xC0	; 192
    18f6:	9f 4f       	sbci	r25, 0xFF	; 255
    18f8:	82 1b       	sub	r24, r18
    18fa:	91 09       	sbc	r25, r1
}
    18fc:	8f 73       	andi	r24, 0x3F	; 63
    18fe:	99 27       	eor	r25, r25
    1900:	08 95       	ret

00001902 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1902:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1904:	91 8d       	ldd	r25, Z+25	; 0x19
    1906:	82 8d       	ldd	r24, Z+26	; 0x1a
    1908:	98 17       	cp	r25, r24
    190a:	31 f0       	breq	.+12     	; 0x1918 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    190c:	82 8d       	ldd	r24, Z+26	; 0x1a
    190e:	e8 0f       	add	r30, r24
    1910:	f1 1d       	adc	r31, r1
    1912:	85 8d       	ldd	r24, Z+29	; 0x1d
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    191c:	08 95       	ret

0000191e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    191e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1920:	91 8d       	ldd	r25, Z+25	; 0x19
    1922:	82 8d       	ldd	r24, Z+26	; 0x1a
    1924:	98 17       	cp	r25, r24
    1926:	61 f0       	breq	.+24     	; 0x1940 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1928:	82 8d       	ldd	r24, Z+26	; 0x1a
    192a:	df 01       	movw	r26, r30
    192c:	a8 0f       	add	r26, r24
    192e:	b1 1d       	adc	r27, r1
    1930:	5d 96       	adiw	r26, 0x1d	; 29
    1932:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1934:	92 8d       	ldd	r25, Z+26	; 0x1a
    1936:	9f 5f       	subi	r25, 0xFF	; 255
    1938:	9f 73       	andi	r25, 0x3F	; 63
    193a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1944:	08 95       	ret

00001946 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    1946:	fc 01       	movw	r30, r24
    1948:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    194a:	44 8d       	ldd	r20, Z+28	; 0x1c
    194c:	25 2f       	mov	r18, r21
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	84 2f       	mov	r24, r20
    1952:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1954:	82 1b       	sub	r24, r18
    1956:	93 0b       	sbc	r25, r19
    1958:	54 17       	cp	r21, r20
    195a:	10 f0       	brcs	.+4      	; 0x1960 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    195c:	cf 96       	adiw	r24, 0x3f	; 63
    195e:	08 95       	ret
  return tail - head - 1;
    1960:	01 97       	sbiw	r24, 0x01	; 1
}
    1962:	08 95       	ret

00001964 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1964:	8b e0       	ldi	r24, 0x0B	; 11
    1966:	9e e0       	ldi	r25, 0x0E	; 14
    1968:	89 2b       	or	r24, r25
    196a:	49 f0       	breq	.+18     	; 0x197e <_Z14serialEventRunv+0x1a>
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	89 2b       	or	r24, r25
    1972:	29 f0       	breq	.+10     	; 0x197e <_Z14serialEventRunv+0x1a>
    1974:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_Z17Serial0_availablev>
    1978:	81 11       	cpse	r24, r1
    197a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    197e:	08 95       	ret

00001980 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1980:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1982:	84 8d       	ldd	r24, Z+28	; 0x1c
    1984:	df 01       	movw	r26, r30
    1986:	a8 0f       	add	r26, r24
    1988:	b1 1d       	adc	r27, r1
    198a:	a3 5a       	subi	r26, 0xA3	; 163
    198c:	bf 4f       	sbci	r27, 0xFF	; 255
    198e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1990:	84 8d       	ldd	r24, Z+28	; 0x1c
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	01 96       	adiw	r24, 0x01	; 1
    1996:	8f 73       	andi	r24, 0x3F	; 63
    1998:	99 27       	eor	r25, r25
    199a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    199c:	a6 89       	ldd	r26, Z+22	; 0x16
    199e:	b7 89       	ldd	r27, Z+23	; 0x17
    19a0:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    19a2:	a0 89       	ldd	r26, Z+16	; 0x10
    19a4:	b1 89       	ldd	r27, Z+17	; 0x11
    19a6:	8c 91       	ld	r24, X
    19a8:	80 64       	ori	r24, 0x40	; 64
    19aa:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    19ac:	93 8d       	ldd	r25, Z+27	; 0x1b
    19ae:	84 8d       	ldd	r24, Z+28	; 0x1c
    19b0:	98 13       	cpse	r25, r24
    19b2:	06 c0       	rjmp	.+12     	; 0x19c0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    19b4:	02 88       	ldd	r0, Z+18	; 0x12
    19b6:	f3 89       	ldd	r31, Z+19	; 0x13
    19b8:	e0 2d       	mov	r30, r0
    19ba:	80 81       	ld	r24, Z
    19bc:	8f 7d       	andi	r24, 0xDF	; 223
    19be:	80 83       	st	Z, r24
    19c0:	08 95       	ret

000019c2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    19c2:	ef 92       	push	r14
    19c4:	ff 92       	push	r15
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	ec 01       	movw	r28, r24
  _written = true;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    19d4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19d8:	98 13       	cpse	r25, r24
    19da:	05 c0       	rjmp	.+10     	; 0x19e6 <_ZN14HardwareSerial5writeEh+0x24>
    19dc:	e8 89       	ldd	r30, Y+16	; 0x10
    19de:	f9 89       	ldd	r31, Y+17	; 0x11
    19e0:	80 81       	ld	r24, Z
    19e2:	85 fd       	sbrc	r24, 5
    19e4:	24 c0       	rjmp	.+72     	; 0x1a2e <_ZN14HardwareSerial5writeEh+0x6c>
    19e6:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    19e8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    19ea:	10 e0       	ldi	r17, 0x00	; 0
    19ec:	0f 5f       	subi	r16, 0xFF	; 255
    19ee:	1f 4f       	sbci	r17, 0xFF	; 255
    19f0:	0f 73       	andi	r16, 0x3F	; 63
    19f2:	11 27       	eor	r17, r17
    19f4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    19f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19f8:	e8 12       	cpse	r14, r24
    19fa:	0c c0       	rjmp	.+24     	; 0x1a14 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	07 fc       	sbrc	r0, 7
    1a00:	fa cf       	rjmp	.-12     	; 0x19f6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1a02:	e8 89       	ldd	r30, Y+16	; 0x10
    1a04:	f9 89       	ldd	r31, Y+17	; 0x11
    1a06:	80 81       	ld	r24, Z
    1a08:	85 ff       	sbrs	r24, 5
    1a0a:	f5 cf       	rjmp	.-22     	; 0x19f6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a12:	f1 cf       	rjmp	.-30     	; 0x19f6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1a14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a16:	fe 01       	movw	r30, r28
    1a18:	e8 0f       	add	r30, r24
    1a1a:	f1 1d       	adc	r31, r1
    1a1c:	e3 5a       	subi	r30, 0xA3	; 163
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1a22:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1a24:	ea 89       	ldd	r30, Y+18	; 0x12
    1a26:	fb 89       	ldd	r31, Y+19	; 0x13
    1a28:	80 81       	ld	r24, Z
    1a2a:	80 62       	ori	r24, 0x20	; 32
    1a2c:	07 c0       	rjmp	.+14     	; 0x1a3c <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1a2e:	ee 89       	ldd	r30, Y+22	; 0x16
    1a30:	ff 89       	ldd	r31, Y+23	; 0x17
    1a32:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1a34:	e8 89       	ldd	r30, Y+16	; 0x10
    1a36:	f9 89       	ldd	r31, Y+17	; 0x11
    1a38:	80 81       	ld	r24, Z
    1a3a:	80 64       	ori	r24, 0x40	; 64
    1a3c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	ff 90       	pop	r15
    1a4c:	ef 90       	pop	r14
    1a4e:	08 95       	ret

00001a50 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1a56:	88 8d       	ldd	r24, Y+24	; 0x18
    1a58:	88 23       	and	r24, r24
    1a5a:	c9 f0       	breq	.+50     	; 0x1a8e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1a5c:	ea 89       	ldd	r30, Y+18	; 0x12
    1a5e:	fb 89       	ldd	r31, Y+19	; 0x13
    1a60:	80 81       	ld	r24, Z
    1a62:	85 fd       	sbrc	r24, 5
    1a64:	05 c0       	rjmp	.+10     	; 0x1a70 <_ZN14HardwareSerial5flushEv+0x20>
    1a66:	a8 89       	ldd	r26, Y+16	; 0x10
    1a68:	b9 89       	ldd	r27, Y+17	; 0x11
    1a6a:	8c 91       	ld	r24, X
    1a6c:	86 fd       	sbrc	r24, 6
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	07 fc       	sbrc	r0, 7
    1a74:	f5 cf       	rjmp	.-22     	; 0x1a60 <_ZN14HardwareSerial5flushEv+0x10>
    1a76:	80 81       	ld	r24, Z
    1a78:	85 ff       	sbrs	r24, 5
    1a7a:	f2 cf       	rjmp	.-28     	; 0x1a60 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1a7c:	a8 89       	ldd	r26, Y+16	; 0x10
    1a7e:	b9 89       	ldd	r27, Y+17	; 0x11
    1a80:	8c 91       	ld	r24, X
    1a82:	85 ff       	sbrs	r24, 5
    1a84:	ed cf       	rjmp	.-38     	; 0x1a60 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1a86:	ce 01       	movw	r24, r28
    1a88:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a8c:	e7 cf       	rjmp	.-50     	; 0x1a5c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	08 95       	ret

00001a94 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1a94:	cf 92       	push	r12
    1a96:	df 92       	push	r13
    1a98:	ef 92       	push	r14
    1a9a:	ff 92       	push	r15
    1a9c:	1f 93       	push	r17
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	ec 01       	movw	r28, r24
    1aa4:	6a 01       	movw	r12, r20
    1aa6:	7b 01       	movw	r14, r22
    1aa8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1aaa:	e8 89       	ldd	r30, Y+16	; 0x10
    1aac:	f9 89       	ldd	r31, Y+17	; 0x11
    1aae:	82 e0       	ldi	r24, 0x02	; 2
    1ab0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1ab2:	41 15       	cp	r20, r1
    1ab4:	51 4e       	sbci	r21, 0xE1	; 225
    1ab6:	61 05       	cpc	r22, r1
    1ab8:	71 05       	cpc	r23, r1
    1aba:	b1 f0       	breq	.+44     	; 0x1ae8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	79 e0       	ldi	r23, 0x09	; 9
    1ac0:	8d e3       	ldi	r24, 0x3D	; 61
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	a7 01       	movw	r20, r14
    1ac6:	96 01       	movw	r18, r12
    1ac8:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <__udivmodsi4>
    1acc:	da 01       	movw	r26, r20
    1ace:	c9 01       	movw	r24, r18
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	a1 09       	sbc	r26, r1
    1ad4:	b1 09       	sbc	r27, r1
    1ad6:	b6 95       	lsr	r27
    1ad8:	a7 95       	ror	r26
    1ada:	97 95       	ror	r25
    1adc:	87 95       	ror	r24
    1ade:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1ae0:	21 15       	cp	r18, r1
    1ae2:	80 e1       	ldi	r24, 0x10	; 16
    1ae4:	38 07       	cpc	r19, r24
    1ae6:	a8 f0       	brcs	.+42     	; 0x1b12 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1ae8:	e8 89       	ldd	r30, Y+16	; 0x10
    1aea:	f9 89       	ldd	r31, Y+17	; 0x11
    1aec:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1aee:	60 e8       	ldi	r22, 0x80	; 128
    1af0:	74 e8       	ldi	r23, 0x84	; 132
    1af2:	8e e1       	ldi	r24, 0x1E	; 30
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	a7 01       	movw	r20, r14
    1af8:	96 01       	movw	r18, r12
    1afa:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <__udivmodsi4>
    1afe:	da 01       	movw	r26, r20
    1b00:	c9 01       	movw	r24, r18
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	a1 09       	sbc	r26, r1
    1b06:	b1 09       	sbc	r27, r1
    1b08:	b6 95       	lsr	r27
    1b0a:	a7 95       	ror	r26
    1b0c:	97 95       	ror	r25
    1b0e:	87 95       	ror	r24
    1b10:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1b12:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b14:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b16:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1b18:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b1a:	ff 85       	ldd	r31, Y+15	; 0x0f
    1b1c:	20 83       	st	Z, r18

  _written = false;
    1b1e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1b20:	ec 89       	ldd	r30, Y+20	; 0x14
    1b22:	fd 89       	ldd	r31, Y+21	; 0x15
    1b24:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1b26:	ea 89       	ldd	r30, Y+18	; 0x12
    1b28:	fb 89       	ldd	r31, Y+19	; 0x13
    1b2a:	80 81       	ld	r24, Z
    1b2c:	80 61       	ori	r24, 0x10	; 16
    1b2e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1b30:	ea 89       	ldd	r30, Y+18	; 0x12
    1b32:	fb 89       	ldd	r31, Y+19	; 0x13
    1b34:	80 81       	ld	r24, Z
    1b36:	88 60       	ori	r24, 0x08	; 8
    1b38:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1b3a:	ea 89       	ldd	r30, Y+18	; 0x12
    1b3c:	fb 89       	ldd	r31, Y+19	; 0x13
    1b3e:	80 81       	ld	r24, Z
    1b40:	80 68       	ori	r24, 0x80	; 128
    1b42:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1b44:	ea 89       	ldd	r30, Y+18	; 0x12
    1b46:	fb 89       	ldd	r31, Y+19	; 0x13
    1b48:	80 81       	ld	r24, Z
    1b4a:	8f 7d       	andi	r24, 0xDF	; 223
    1b4c:	80 83       	st	Z, r24
}
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	ff 90       	pop	r15
    1b56:	ef 90       	pop	r14
    1b58:	df 90       	pop	r13
    1b5a:	cf 90       	pop	r12
    1b5c:	08 95       	ret

00001b5e <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	08 95       	ret

00001b64 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1b64:	08 95       	ret

00001b66 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1b66:	1f 92       	push	r1
    1b68:	0f 92       	push	r0
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	0f 92       	push	r0
    1b6e:	11 24       	eor	r1, r1
    1b70:	2f 93       	push	r18
    1b72:	8f 93       	push	r24
    1b74:	9f 93       	push	r25
    1b76:	ef 93       	push	r30
    1b78:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1b7a:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <Serial+0x10>
    1b7e:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <Serial+0x11>
    1b82:	80 81       	ld	r24, Z
    1b84:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <Serial+0x16>
    1b88:	f0 91 f6 02 	lds	r31, 0x02F6	; 0x8002f6 <Serial+0x17>
    1b8c:	82 fd       	sbrc	r24, 2
    1b8e:	12 c0       	rjmp	.+36     	; 0x1bb4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1b90:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1b92:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <Serial+0x19>
    1b96:	8f 5f       	subi	r24, 0xFF	; 255
    1b98:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1b9a:	20 91 f9 02 	lds	r18, 0x02F9	; 0x8002f9 <Serial+0x1a>
    1b9e:	82 17       	cp	r24, r18
    1ba0:	51 f0       	breq	.+20     	; 0x1bb6 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1ba2:	e0 91 f8 02 	lds	r30, 0x02F8	; 0x8002f8 <Serial+0x19>
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	e1 52       	subi	r30, 0x21	; 33
    1baa:	fd 4f       	sbci	r31, 0xFD	; 253
    1bac:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1bae:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <Serial+0x19>
    1bb2:	01 c0       	rjmp	.+2      	; 0x1bb6 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1bb4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1bb6:	ff 91       	pop	r31
    1bb8:	ef 91       	pop	r30
    1bba:	9f 91       	pop	r25
    1bbc:	8f 91       	pop	r24
    1bbe:	2f 91       	pop	r18
    1bc0:	0f 90       	pop	r0
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	0f 90       	pop	r0
    1bc6:	1f 90       	pop	r1
    1bc8:	18 95       	reti

00001bca <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1bca:	1f 92       	push	r1
    1bcc:	0f 92       	push	r0
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	0f 92       	push	r0
    1bd2:	11 24       	eor	r1, r1
    1bd4:	2f 93       	push	r18
    1bd6:	3f 93       	push	r19
    1bd8:	4f 93       	push	r20
    1bda:	5f 93       	push	r21
    1bdc:	6f 93       	push	r22
    1bde:	7f 93       	push	r23
    1be0:	8f 93       	push	r24
    1be2:	9f 93       	push	r25
    1be4:	af 93       	push	r26
    1be6:	bf 93       	push	r27
    1be8:	ef 93       	push	r30
    1bea:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1bec:	8f ed       	ldi	r24, 0xDF	; 223
    1bee:	92 e0       	ldi	r25, 0x02	; 2
    1bf0:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1bf4:	ff 91       	pop	r31
    1bf6:	ef 91       	pop	r30
    1bf8:	bf 91       	pop	r27
    1bfa:	af 91       	pop	r26
    1bfc:	9f 91       	pop	r25
    1bfe:	8f 91       	pop	r24
    1c00:	7f 91       	pop	r23
    1c02:	6f 91       	pop	r22
    1c04:	5f 91       	pop	r21
    1c06:	4f 91       	pop	r20
    1c08:	3f 91       	pop	r19
    1c0a:	2f 91       	pop	r18
    1c0c:	0f 90       	pop	r0
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	0f 90       	pop	r0
    1c12:	1f 90       	pop	r1
    1c14:	18 95       	reti

00001c16 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1c16:	8f ed       	ldi	r24, 0xDF	; 223
    1c18:	92 e0       	ldi	r25, 0x02	; 2
    1c1a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_ZN14HardwareSerial9availableEv>
    1c1e:	21 e0       	ldi	r18, 0x01	; 1
    1c20:	89 2b       	or	r24, r25
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <_Z17Serial0_availablev+0x10>
    1c24:	20 e0       	ldi	r18, 0x00	; 0
}
    1c26:	82 2f       	mov	r24, r18
    1c28:	08 95       	ret

00001c2a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1c2a:	ef ed       	ldi	r30, 0xDF	; 223
    1c2c:	f2 e0       	ldi	r31, 0x02	; 2
    1c2e:	13 82       	std	Z+3, r1	; 0x03
    1c30:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1c32:	88 ee       	ldi	r24, 0xE8	; 232
    1c34:	93 e0       	ldi	r25, 0x03	; 3
    1c36:	a0 e0       	ldi	r26, 0x00	; 0
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	84 83       	std	Z+4, r24	; 0x04
    1c3c:	95 83       	std	Z+5, r25	; 0x05
    1c3e:	a6 83       	std	Z+6, r26	; 0x06
    1c40:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1c42:	84 e2       	ldi	r24, 0x24	; 36
    1c44:	91 e0       	ldi	r25, 0x01	; 1
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	80 83       	st	Z, r24
    1c4a:	85 ec       	ldi	r24, 0xC5	; 197
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	95 87       	std	Z+13, r25	; 0x0d
    1c50:	84 87       	std	Z+12, r24	; 0x0c
    1c52:	84 ec       	ldi	r24, 0xC4	; 196
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	97 87       	std	Z+15, r25	; 0x0f
    1c58:	86 87       	std	Z+14, r24	; 0x0e
    1c5a:	80 ec       	ldi	r24, 0xC0	; 192
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	91 8b       	std	Z+17, r25	; 0x11
    1c60:	80 8b       	std	Z+16, r24	; 0x10
    1c62:	81 ec       	ldi	r24, 0xC1	; 193
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	93 8b       	std	Z+19, r25	; 0x13
    1c68:	82 8b       	std	Z+18, r24	; 0x12
    1c6a:	82 ec       	ldi	r24, 0xC2	; 194
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	95 8b       	std	Z+21, r25	; 0x15
    1c70:	84 8b       	std	Z+20, r24	; 0x14
    1c72:	86 ec       	ldi	r24, 0xC6	; 198
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	97 8b       	std	Z+23, r25	; 0x17
    1c78:	86 8b       	std	Z+22, r24	; 0x16
    1c7a:	11 8e       	std	Z+25, r1	; 0x19
    1c7c:	12 8e       	std	Z+26, r1	; 0x1a
    1c7e:	13 8e       	std	Z+27, r1	; 0x1b
    1c80:	14 8e       	std	Z+28, r1	; 0x1c
    1c82:	08 95       	ret

00001c84 <initVariant>:
    1c84:	08 95       	ret

00001c86 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1c86:	0e 94 b2 10 	call	0x2164	; 0x2164 <init>

	initVariant();
    1c8a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1c8e:	0e 94 51 07 	call	0xea2	; 0xea2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1c92:	c2 eb       	ldi	r28, 0xB2	; 178
    1c94:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1c96:	0e 94 a6 07 	call	0xf4c	; 0xf4c <loop>
		if (serialEventRun) serialEventRun();
    1c9a:	20 97       	sbiw	r28, 0x00	; 0
    1c9c:	e1 f3       	breq	.-8      	; 0x1c96 <main+0x10>
    1c9e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_Z14serialEventRunv>
    1ca2:	f9 cf       	rjmp	.-14     	; 0x1c96 <main+0x10>

00001ca4 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1ca4:	cf 92       	push	r12
    1ca6:	df 92       	push	r13
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	6c 01       	movw	r12, r24
    1cb6:	7a 01       	movw	r14, r20
    1cb8:	8b 01       	movw	r16, r22
    1cba:	c0 e0       	ldi	r28, 0x00	; 0
    1cbc:	d0 e0       	ldi	r29, 0x00	; 0
    1cbe:	ce 15       	cp	r28, r14
    1cc0:	df 05       	cpc	r29, r15
    1cc2:	81 f0       	breq	.+32     	; 0x1ce4 <_ZN5Print5writeEPKhj+0x40>
    1cc4:	d8 01       	movw	r26, r16
    1cc6:	6d 91       	ld	r22, X+
    1cc8:	8d 01       	movw	r16, r26
    1cca:	d6 01       	movw	r26, r12
    1ccc:	ed 91       	ld	r30, X+
    1cce:	fc 91       	ld	r31, X
    1cd0:	01 90       	ld	r0, Z+
    1cd2:	f0 81       	ld	r31, Z
    1cd4:	e0 2d       	mov	r30, r0
    1cd6:	c6 01       	movw	r24, r12
    1cd8:	09 95       	icall
    1cda:	89 2b       	or	r24, r25
    1cdc:	11 f0       	breq	.+4      	; 0x1ce2 <_ZN5Print5writeEPKhj+0x3e>
    1cde:	21 96       	adiw	r28, 0x01	; 1
    1ce0:	ee cf       	rjmp	.-36     	; 0x1cbe <_ZN5Print5writeEPKhj+0x1a>
    1ce2:	7e 01       	movw	r14, r28
    1ce4:	c7 01       	movw	r24, r14
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	ff 90       	pop	r15
    1cf0:	ef 90       	pop	r14
    1cf2:	df 90       	pop	r13
    1cf4:	cf 90       	pop	r12
    1cf6:	08 95       	ret

00001cf8 <_ZN5Print5writeEPKc>:
    1cf8:	61 15       	cp	r22, r1
    1cfa:	71 05       	cpc	r23, r1
    1cfc:	79 f0       	breq	.+30     	; 0x1d1c <_ZN5Print5writeEPKc+0x24>
    1cfe:	fb 01       	movw	r30, r22
    1d00:	01 90       	ld	r0, Z+
    1d02:	00 20       	and	r0, r0
    1d04:	e9 f7       	brne	.-6      	; 0x1d00 <_ZN5Print5writeEPKc+0x8>
    1d06:	31 97       	sbiw	r30, 0x01	; 1
    1d08:	af 01       	movw	r20, r30
    1d0a:	46 1b       	sub	r20, r22
    1d0c:	57 0b       	sbc	r21, r23
    1d0e:	dc 01       	movw	r26, r24
    1d10:	ed 91       	ld	r30, X+
    1d12:	fc 91       	ld	r31, X
    1d14:	02 80       	ldd	r0, Z+2	; 0x02
    1d16:	f3 81       	ldd	r31, Z+3	; 0x03
    1d18:	e0 2d       	mov	r30, r0
    1d1a:	09 94       	ijmp
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	08 95       	ret

00001d22 <_ZN5Print5printERK6String>:
    1d22:	db 01       	movw	r26, r22
    1d24:	14 96       	adiw	r26, 0x04	; 4
    1d26:	4d 91       	ld	r20, X+
    1d28:	5c 91       	ld	r21, X
    1d2a:	15 97       	sbiw	r26, 0x05	; 5
    1d2c:	6d 91       	ld	r22, X+
    1d2e:	7c 91       	ld	r23, X
    1d30:	dc 01       	movw	r26, r24
    1d32:	ed 91       	ld	r30, X+
    1d34:	fc 91       	ld	r31, X
    1d36:	02 80       	ldd	r0, Z+2	; 0x02
    1d38:	f3 81       	ldd	r31, Z+3	; 0x03
    1d3a:	e0 2d       	mov	r30, r0
    1d3c:	09 94       	ijmp

00001d3e <_ZN5Print5printEc>:
    1d3e:	dc 01       	movw	r26, r24
    1d40:	ed 91       	ld	r30, X+
    1d42:	fc 91       	ld	r31, X
    1d44:	01 90       	ld	r0, Z+
    1d46:	f0 81       	ld	r31, Z
    1d48:	e0 2d       	mov	r30, r0
    1d4a:	09 94       	ijmp

00001d4c <_ZN5Print7printlnEv>:
    1d4c:	62 e3       	ldi	r22, 0x32	; 50
    1d4e:	71 e0       	ldi	r23, 0x01	; 1
    1d50:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <_ZN5Print5writeEPKc>

00001d54 <_ZN5Print7printlnEPKc>:
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	ec 01       	movw	r28, r24
    1d5e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN5Print5writeEPKc>
    1d62:	8c 01       	movw	r16, r24
    1d64:	ce 01       	movw	r24, r28
    1d66:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <_ZN5Print7printlnEv>
    1d6a:	80 0f       	add	r24, r16
    1d6c:	91 1f       	adc	r25, r17
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	1f 91       	pop	r17
    1d74:	0f 91       	pop	r16
    1d76:	08 95       	ret

00001d78 <_ZN5Print11printNumberEmh>:
    1d78:	8f 92       	push	r8
    1d7a:	9f 92       	push	r9
    1d7c:	af 92       	push	r10
    1d7e:	bf 92       	push	r11
    1d80:	ef 92       	push	r14
    1d82:	ff 92       	push	r15
    1d84:	0f 93       	push	r16
    1d86:	1f 93       	push	r17
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	a1 97       	sbiw	r28, 0x21	; 33
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	7c 01       	movw	r14, r24
    1d9e:	fa 01       	movw	r30, r20
    1da0:	cb 01       	movw	r24, r22
    1da2:	19 a2       	std	Y+33, r1	; 0x21
    1da4:	22 30       	cpi	r18, 0x02	; 2
    1da6:	08 f4       	brcc	.+2      	; 0x1daa <_ZN5Print11printNumberEmh+0x32>
    1da8:	2a e0       	ldi	r18, 0x0A	; 10
    1daa:	8e 01       	movw	r16, r28
    1dac:	0f 5d       	subi	r16, 0xDF	; 223
    1dae:	1f 4f       	sbci	r17, 0xFF	; 255
    1db0:	82 2e       	mov	r8, r18
    1db2:	91 2c       	mov	r9, r1
    1db4:	a1 2c       	mov	r10, r1
    1db6:	b1 2c       	mov	r11, r1
    1db8:	bf 01       	movw	r22, r30
    1dba:	a5 01       	movw	r20, r10
    1dbc:	94 01       	movw	r18, r8
    1dbe:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <__udivmodsi4>
    1dc2:	f9 01       	movw	r30, r18
    1dc4:	ca 01       	movw	r24, r20
    1dc6:	01 50       	subi	r16, 0x01	; 1
    1dc8:	11 09       	sbc	r17, r1
    1dca:	6a 30       	cpi	r22, 0x0A	; 10
    1dcc:	10 f4       	brcc	.+4      	; 0x1dd2 <_ZN5Print11printNumberEmh+0x5a>
    1dce:	60 5d       	subi	r22, 0xD0	; 208
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <_ZN5Print11printNumberEmh+0x5c>
    1dd2:	69 5c       	subi	r22, 0xC9	; 201
    1dd4:	d8 01       	movw	r26, r16
    1dd6:	6c 93       	st	X, r22
    1dd8:	23 2b       	or	r18, r19
    1dda:	24 2b       	or	r18, r20
    1ddc:	25 2b       	or	r18, r21
    1dde:	61 f7       	brne	.-40     	; 0x1db8 <_ZN5Print11printNumberEmh+0x40>
    1de0:	b8 01       	movw	r22, r16
    1de2:	c7 01       	movw	r24, r14
    1de4:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN5Print5writeEPKc>
    1de8:	a1 96       	adiw	r28, 0x21	; 33
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	1f 91       	pop	r17
    1dfa:	0f 91       	pop	r16
    1dfc:	ff 90       	pop	r15
    1dfe:	ef 90       	pop	r14
    1e00:	bf 90       	pop	r11
    1e02:	af 90       	pop	r10
    1e04:	9f 90       	pop	r9
    1e06:	8f 90       	pop	r8
    1e08:	08 95       	ret

00001e0a <_ZN5Print5printEmi>:
    1e0a:	21 15       	cp	r18, r1
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	41 f4       	brne	.+16     	; 0x1e20 <_ZN5Print5printEmi+0x16>
    1e10:	dc 01       	movw	r26, r24
    1e12:	ed 91       	ld	r30, X+
    1e14:	fc 91       	ld	r31, X
    1e16:	01 90       	ld	r0, Z+
    1e18:	f0 81       	ld	r31, Z
    1e1a:	e0 2d       	mov	r30, r0
    1e1c:	64 2f       	mov	r22, r20
    1e1e:	09 94       	ijmp
    1e20:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <_ZN5Print11printNumberEmh>

00001e24 <_ZN5Print5printEji>:
    1e24:	9a 01       	movw	r18, r20
    1e26:	ab 01       	movw	r20, r22
    1e28:	60 e0       	ldi	r22, 0x00	; 0
    1e2a:	70 e0       	ldi	r23, 0x00	; 0
    1e2c:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <_ZN5Print5printEmi>

00001e30 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1e30:	7f 92       	push	r7
    1e32:	8f 92       	push	r8
    1e34:	9f 92       	push	r9
    1e36:	af 92       	push	r10
    1e38:	bf 92       	push	r11
    1e3a:	cf 92       	push	r12
    1e3c:	df 92       	push	r13
    1e3e:	ef 92       	push	r14
    1e40:	ff 92       	push	r15
    1e42:	0f 93       	push	r16
    1e44:	1f 93       	push	r17
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	8c 01       	movw	r16, r24
    1e4c:	6a 01       	movw	r12, r20
    1e4e:	7b 01       	movw	r14, r22
    1e50:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1e52:	9a 01       	movw	r18, r20
    1e54:	ab 01       	movw	r20, r22
    1e56:	c7 01       	movw	r24, r14
    1e58:	b6 01       	movw	r22, r12
    1e5a:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <__unordsf2>
    1e5e:	88 23       	and	r24, r24
    1e60:	19 f0       	breq	.+6      	; 0x1e68 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1e62:	65 e3       	ldi	r22, 0x35	; 53
    1e64:	71 e0       	ldi	r23, 0x01	; 1
    1e66:	27 c0       	rjmp	.+78     	; 0x1eb6 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1e68:	46 01       	movw	r8, r12
    1e6a:	57 01       	movw	r10, r14
    1e6c:	e8 94       	clt
    1e6e:	b7 f8       	bld	r11, 7
    1e70:	2f ef       	ldi	r18, 0xFF	; 255
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	5f e7       	ldi	r21, 0x7F	; 127
    1e78:	c5 01       	movw	r24, r10
    1e7a:	b4 01       	movw	r22, r8
    1e7c:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <__unordsf2>
    1e80:	81 11       	cpse	r24, r1
    1e82:	0d c0       	rjmp	.+26     	; 0x1e9e <_ZN5Print10printFloatEdh+0x6e>
    1e84:	2f ef       	ldi	r18, 0xFF	; 255
    1e86:	3f ef       	ldi	r19, 0xFF	; 255
    1e88:	4f e7       	ldi	r20, 0x7F	; 127
    1e8a:	5f e7       	ldi	r21, 0x7F	; 127
    1e8c:	c5 01       	movw	r24, r10
    1e8e:	b4 01       	movw	r22, r8
    1e90:	0e 94 b6 09 	call	0x136c	; 0x136c <__cmpsf2>
    1e94:	18 16       	cp	r1, r24
    1e96:	1c f4       	brge	.+6      	; 0x1e9e <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1e98:	69 e3       	ldi	r22, 0x39	; 57
    1e9a:	71 e0       	ldi	r23, 0x01	; 1
    1e9c:	0c c0       	rjmp	.+24     	; 0x1eb6 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1e9e:	2f ef       	ldi	r18, 0xFF	; 255
    1ea0:	3f ef       	ldi	r19, 0xFF	; 255
    1ea2:	4f e7       	ldi	r20, 0x7F	; 127
    1ea4:	5f e4       	ldi	r21, 0x4F	; 79
    1ea6:	c7 01       	movw	r24, r14
    1ea8:	b6 01       	movw	r22, r12
    1eaa:	0e 94 80 0b 	call	0x1700	; 0x1700 <__gesf2>
    1eae:	18 16       	cp	r1, r24
    1eb0:	94 f4       	brge	.+36     	; 0x1ed6 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1eb2:	6d e3       	ldi	r22, 0x3D	; 61
    1eb4:	71 e0       	ldi	r23, 0x01	; 1
    1eb6:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 91       	pop	r16
    1ec0:	ff 90       	pop	r15
    1ec2:	ef 90       	pop	r14
    1ec4:	df 90       	pop	r13
    1ec6:	cf 90       	pop	r12
    1ec8:	bf 90       	pop	r11
    1eca:	af 90       	pop	r10
    1ecc:	9f 90       	pop	r9
    1ece:	8f 90       	pop	r8
    1ed0:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1ed2:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1ed6:	2f ef       	ldi	r18, 0xFF	; 255
    1ed8:	3f ef       	ldi	r19, 0xFF	; 255
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	5f ec       	ldi	r21, 0xCF	; 207
    1ede:	c7 01       	movw	r24, r14
    1ee0:	b6 01       	movw	r22, r12
    1ee2:	0e 94 b6 09 	call	0x136c	; 0x136c <__cmpsf2>
    1ee6:	87 fd       	sbrc	r24, 7
    1ee8:	e4 cf       	rjmp	.-56     	; 0x1eb2 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	a9 01       	movw	r20, r18
    1ef0:	c7 01       	movw	r24, r14
    1ef2:	b6 01       	movw	r22, r12
    1ef4:	0e 94 b6 09 	call	0x136c	; 0x136c <__cmpsf2>
    1ef8:	87 ff       	sbrs	r24, 7
    1efa:	0a c0       	rjmp	.+20     	; 0x1f10 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    1efc:	6d e2       	ldi	r22, 0x2D	; 45
    1efe:	c8 01       	movw	r24, r16
    1f00:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <_ZN5Print5printEc>
    1f04:	ec 01       	movw	r28, r24
     number = -number;
    1f06:	f7 fa       	bst	r15, 7
    1f08:	f0 94       	com	r15
    1f0a:	f7 f8       	bld	r15, 7
    1f0c:	f0 94       	com	r15
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1f10:	c0 e0       	ldi	r28, 0x00	; 0
    1f12:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1f14:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	70 e0       	ldi	r23, 0x00	; 0
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1f1e:	7b 14       	cp	r7, r11
    1f20:	41 f0       	breq	.+16     	; 0x1f32 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e2       	ldi	r20, 0x20	; 32
    1f28:	51 e4       	ldi	r21, 0x41	; 65
    1f2a:	0e 94 c0 09 	call	0x1380	; 0x1380 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1f2e:	b3 94       	inc	r11
    1f30:	f6 cf       	rjmp	.-20     	; 0x1f1e <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    1f32:	a7 01       	movw	r20, r14
    1f34:	96 01       	movw	r18, r12
    1f36:	0e 94 1b 09 	call	0x1236	; 0x1236 <__addsf3>
    1f3a:	6b 01       	movw	r12, r22
    1f3c:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1f3e:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fixunssfsi>
    1f42:	4b 01       	movw	r8, r22
    1f44:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1f46:	2a e0       	ldi	r18, 0x0A	; 10
    1f48:	ab 01       	movw	r20, r22
    1f4a:	bc 01       	movw	r22, r24
    1f4c:	c8 01       	movw	r24, r16
    1f4e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1f52:	c8 0f       	add	r28, r24
    1f54:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1f56:	77 20       	and	r7, r7
    1f58:	b9 f1       	breq	.+110    	; 0x1fc8 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1f5a:	c5 01       	movw	r24, r10
    1f5c:	b4 01       	movw	r22, r8
    1f5e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__floatunsisf>
    1f62:	9b 01       	movw	r18, r22
    1f64:	ac 01       	movw	r20, r24
    1f66:	c7 01       	movw	r24, r14
    1f68:	b6 01       	movw	r22, r12
    1f6a:	0e 94 1a 09 	call	0x1234	; 0x1234 <__subsf3>
    1f6e:	6b 01       	movw	r12, r22
    1f70:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1f72:	6e e2       	ldi	r22, 0x2E	; 46
    1f74:	c8 01       	movw	r24, r16
    1f76:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <_ZN5Print5printEc>
    1f7a:	c8 0f       	add	r28, r24
    1f7c:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e2       	ldi	r20, 0x20	; 32
    1f84:	51 e4       	ldi	r21, 0x41	; 65
    1f86:	c7 01       	movw	r24, r14
    1f88:	b6 01       	movw	r22, r12
    1f8a:	0e 94 8d 0b 	call	0x171a	; 0x171a <__mulsf3>
    1f8e:	4b 01       	movw	r8, r22
    1f90:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    1f92:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fixunssfsi>
    1f96:	6b 01       	movw	r12, r22
    1f98:	7c 01       	movw	r14, r24
    n += print(toPrint);
    1f9a:	4a e0       	ldi	r20, 0x0A	; 10
    1f9c:	50 e0       	ldi	r21, 0x00	; 0
    1f9e:	c8 01       	movw	r24, r16
    1fa0:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <_ZN5Print5printEji>
    1fa4:	c8 0f       	add	r28, r24
    1fa6:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1fa8:	b6 01       	movw	r22, r12
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__floatunsisf>
    1fb2:	9b 01       	movw	r18, r22
    1fb4:	ac 01       	movw	r20, r24
    1fb6:	c5 01       	movw	r24, r10
    1fb8:	b4 01       	movw	r22, r8
    1fba:	0e 94 1a 09 	call	0x1234	; 0x1234 <__subsf3>
    1fbe:	6b 01       	movw	r12, r22
    1fc0:	7c 01       	movw	r14, r24
    1fc2:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1fc4:	71 10       	cpse	r7, r1
    1fc6:	db cf       	rjmp	.-74     	; 0x1f7e <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1fc8:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1fca:	df 91       	pop	r29
    1fcc:	cf 91       	pop	r28
    1fce:	1f 91       	pop	r17
    1fd0:	0f 91       	pop	r16
    1fd2:	ff 90       	pop	r15
    1fd4:	ef 90       	pop	r14
    1fd6:	df 90       	pop	r13
    1fd8:	cf 90       	pop	r12
    1fda:	bf 90       	pop	r11
    1fdc:	af 90       	pop	r10
    1fde:	9f 90       	pop	r9
    1fe0:	8f 90       	pop	r8
    1fe2:	7f 90       	pop	r7
    1fe4:	08 95       	ret

00001fe6 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1fe6:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <_ZN5Print10printFloatEdh>

00001fea <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1fea:	0f 93       	push	r16
    1fec:	1f 93       	push	r17
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1ff4:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZN5Print10printFloatEdh>
    1ff8:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <_ZN5Print7printlnEv>
  return n;
}
    2000:	80 0f       	add	r24, r16
    2002:	91 1f       	adc	r25, r17
    2004:	df 91       	pop	r29
    2006:	cf 91       	pop	r28
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	08 95       	ret

0000200e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    200e:	1f 92       	push	r1
    2010:	0f 92       	push	r0
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	0f 92       	push	r0
    2016:	11 24       	eor	r1, r1
    2018:	2f 93       	push	r18
    201a:	3f 93       	push	r19
    201c:	8f 93       	push	r24
    201e:	9f 93       	push	r25
    2020:	af 93       	push	r26
    2022:	bf 93       	push	r27
    2024:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <timer0_millis>
    2028:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <timer0_millis+0x1>
    202c:	a0 91 7f 03 	lds	r26, 0x037F	; 0x80037f <timer0_millis+0x2>
    2030:	b0 91 80 03 	lds	r27, 0x0380	; 0x800380 <timer0_millis+0x3>
    2034:	30 91 7c 03 	lds	r19, 0x037C	; 0x80037c <timer0_fract>
    2038:	23 e0       	ldi	r18, 0x03	; 3
    203a:	23 0f       	add	r18, r19
    203c:	2d 37       	cpi	r18, 0x7D	; 125
    203e:	20 f4       	brcc	.+8      	; 0x2048 <__vector_16+0x3a>
    2040:	01 96       	adiw	r24, 0x01	; 1
    2042:	a1 1d       	adc	r26, r1
    2044:	b1 1d       	adc	r27, r1
    2046:	05 c0       	rjmp	.+10     	; 0x2052 <__vector_16+0x44>
    2048:	26 e8       	ldi	r18, 0x86	; 134
    204a:	23 0f       	add	r18, r19
    204c:	02 96       	adiw	r24, 0x02	; 2
    204e:	a1 1d       	adc	r26, r1
    2050:	b1 1d       	adc	r27, r1
    2052:	20 93 7c 03 	sts	0x037C, r18	; 0x80037c <timer0_fract>
    2056:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <timer0_millis>
    205a:	90 93 7e 03 	sts	0x037E, r25	; 0x80037e <timer0_millis+0x1>
    205e:	a0 93 7f 03 	sts	0x037F, r26	; 0x80037f <timer0_millis+0x2>
    2062:	b0 93 80 03 	sts	0x0380, r27	; 0x800380 <timer0_millis+0x3>
    2066:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <timer0_overflow_count>
    206a:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <timer0_overflow_count+0x1>
    206e:	a0 91 83 03 	lds	r26, 0x0383	; 0x800383 <timer0_overflow_count+0x2>
    2072:	b0 91 84 03 	lds	r27, 0x0384	; 0x800384 <timer0_overflow_count+0x3>
    2076:	01 96       	adiw	r24, 0x01	; 1
    2078:	a1 1d       	adc	r26, r1
    207a:	b1 1d       	adc	r27, r1
    207c:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <timer0_overflow_count>
    2080:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <timer0_overflow_count+0x1>
    2084:	a0 93 83 03 	sts	0x0383, r26	; 0x800383 <timer0_overflow_count+0x2>
    2088:	b0 93 84 03 	sts	0x0384, r27	; 0x800384 <timer0_overflow_count+0x3>
    208c:	bf 91       	pop	r27
    208e:	af 91       	pop	r26
    2090:	9f 91       	pop	r25
    2092:	8f 91       	pop	r24
    2094:	3f 91       	pop	r19
    2096:	2f 91       	pop	r18
    2098:	0f 90       	pop	r0
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	0f 90       	pop	r0
    209e:	1f 90       	pop	r1
    20a0:	18 95       	reti

000020a2 <micros>:
    20a2:	3f b7       	in	r19, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <timer0_overflow_count>
    20aa:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <timer0_overflow_count+0x1>
    20ae:	a0 91 83 03 	lds	r26, 0x0383	; 0x800383 <timer0_overflow_count+0x2>
    20b2:	b0 91 84 03 	lds	r27, 0x0384	; 0x800384 <timer0_overflow_count+0x3>
    20b6:	26 b5       	in	r18, 0x26	; 38
    20b8:	a8 9b       	sbis	0x15, 0	; 21
    20ba:	05 c0       	rjmp	.+10     	; 0x20c6 <micros+0x24>
    20bc:	2f 3f       	cpi	r18, 0xFF	; 255
    20be:	19 f0       	breq	.+6      	; 0x20c6 <micros+0x24>
    20c0:	01 96       	adiw	r24, 0x01	; 1
    20c2:	a1 1d       	adc	r26, r1
    20c4:	b1 1d       	adc	r27, r1
    20c6:	3f bf       	out	0x3f, r19	; 63
    20c8:	ba 2f       	mov	r27, r26
    20ca:	a9 2f       	mov	r26, r25
    20cc:	98 2f       	mov	r25, r24
    20ce:	88 27       	eor	r24, r24
    20d0:	82 0f       	add	r24, r18
    20d2:	91 1d       	adc	r25, r1
    20d4:	a1 1d       	adc	r26, r1
    20d6:	b1 1d       	adc	r27, r1
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	42 e0       	ldi	r20, 0x02	; 2
    20de:	66 0f       	add	r22, r22
    20e0:	77 1f       	adc	r23, r23
    20e2:	88 1f       	adc	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	4a 95       	dec	r20
    20e8:	d1 f7       	brne	.-12     	; 0x20de <micros+0x3c>
    20ea:	08 95       	ret

000020ec <delay>:
    20ec:	8f 92       	push	r8
    20ee:	9f 92       	push	r9
    20f0:	af 92       	push	r10
    20f2:	bf 92       	push	r11
    20f4:	cf 92       	push	r12
    20f6:	df 92       	push	r13
    20f8:	ef 92       	push	r14
    20fa:	ff 92       	push	r15
    20fc:	6b 01       	movw	r12, r22
    20fe:	7c 01       	movw	r14, r24
    2100:	0e 94 51 10 	call	0x20a2	; 0x20a2 <micros>
    2104:	4b 01       	movw	r8, r22
    2106:	5c 01       	movw	r10, r24
    2108:	c1 14       	cp	r12, r1
    210a:	d1 04       	cpc	r13, r1
    210c:	e1 04       	cpc	r14, r1
    210e:	f1 04       	cpc	r15, r1
    2110:	01 f1       	breq	.+64     	; 0x2152 <delay+0x66>
    2112:	0e 94 cf 1c 	call	0x399e	; 0x399e <yield>
    2116:	0e 94 51 10 	call	0x20a2	; 0x20a2 <micros>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	88 19       	sub	r24, r8
    2120:	99 09       	sbc	r25, r9
    2122:	aa 09       	sbc	r26, r10
    2124:	bb 09       	sbc	r27, r11
    2126:	88 3e       	cpi	r24, 0xE8	; 232
    2128:	93 40       	sbci	r25, 0x03	; 3
    212a:	a1 05       	cpc	r26, r1
    212c:	b1 05       	cpc	r27, r1
    212e:	60 f3       	brcs	.-40     	; 0x2108 <delay+0x1c>
    2130:	21 e0       	ldi	r18, 0x01	; 1
    2132:	c2 1a       	sub	r12, r18
    2134:	d1 08       	sbc	r13, r1
    2136:	e1 08       	sbc	r14, r1
    2138:	f1 08       	sbc	r15, r1
    213a:	88 ee       	ldi	r24, 0xE8	; 232
    213c:	88 0e       	add	r8, r24
    213e:	83 e0       	ldi	r24, 0x03	; 3
    2140:	98 1e       	adc	r9, r24
    2142:	a1 1c       	adc	r10, r1
    2144:	b1 1c       	adc	r11, r1
    2146:	c1 14       	cp	r12, r1
    2148:	d1 04       	cpc	r13, r1
    214a:	e1 04       	cpc	r14, r1
    214c:	f1 04       	cpc	r15, r1
    214e:	19 f7       	brne	.-58     	; 0x2116 <delay+0x2a>
    2150:	db cf       	rjmp	.-74     	; 0x2108 <delay+0x1c>
    2152:	ff 90       	pop	r15
    2154:	ef 90       	pop	r14
    2156:	df 90       	pop	r13
    2158:	cf 90       	pop	r12
    215a:	bf 90       	pop	r11
    215c:	af 90       	pop	r10
    215e:	9f 90       	pop	r9
    2160:	8f 90       	pop	r8
    2162:	08 95       	ret

00002164 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2164:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2166:	84 b5       	in	r24, 0x24	; 36
    2168:	82 60       	ori	r24, 0x02	; 2
    216a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    216c:	84 b5       	in	r24, 0x24	; 36
    216e:	81 60       	ori	r24, 0x01	; 1
    2170:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2172:	85 b5       	in	r24, 0x25	; 37
    2174:	82 60       	ori	r24, 0x02	; 2
    2176:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2178:	85 b5       	in	r24, 0x25	; 37
    217a:	81 60       	ori	r24, 0x01	; 1
    217c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    217e:	ee e6       	ldi	r30, 0x6E	; 110
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	81 60       	ori	r24, 0x01	; 1
    2186:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2188:	e1 e8       	ldi	r30, 0x81	; 129
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    218e:	80 81       	ld	r24, Z
    2190:	82 60       	ori	r24, 0x02	; 2
    2192:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2194:	80 81       	ld	r24, Z
    2196:	81 60       	ori	r24, 0x01	; 1
    2198:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    219a:	e0 e8       	ldi	r30, 0x80	; 128
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	81 60       	ori	r24, 0x01	; 1
    21a2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    21a4:	e1 eb       	ldi	r30, 0xB1	; 177
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	84 60       	ori	r24, 0x04	; 4
    21ac:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    21ae:	e0 eb       	ldi	r30, 0xB0	; 176
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	81 60       	ori	r24, 0x01	; 1
    21b6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    21b8:	ea e7       	ldi	r30, 0x7A	; 122
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	84 60       	ori	r24, 0x04	; 4
    21c0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    21c2:	80 81       	ld	r24, Z
    21c4:	82 60       	ori	r24, 0x02	; 2
    21c6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    21c8:	80 81       	ld	r24, Z
    21ca:	81 60       	ori	r24, 0x01	; 1
    21cc:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    21ce:	80 81       	ld	r24, Z
    21d0:	80 68       	ori	r24, 0x80	; 128
    21d2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    21d4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    21d8:	08 95       	ret

000021da <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    21da:	83 30       	cpi	r24, 0x03	; 3
    21dc:	81 f0       	breq	.+32     	; 0x21fe <turnOffPWM+0x24>
    21de:	28 f4       	brcc	.+10     	; 0x21ea <turnOffPWM+0x10>
    21e0:	81 30       	cpi	r24, 0x01	; 1
    21e2:	99 f0       	breq	.+38     	; 0x220a <turnOffPWM+0x30>
    21e4:	82 30       	cpi	r24, 0x02	; 2
    21e6:	a1 f0       	breq	.+40     	; 0x2210 <turnOffPWM+0x36>
    21e8:	08 95       	ret
    21ea:	87 30       	cpi	r24, 0x07	; 7
    21ec:	a9 f0       	breq	.+42     	; 0x2218 <turnOffPWM+0x3e>
    21ee:	88 30       	cpi	r24, 0x08	; 8
    21f0:	b9 f0       	breq	.+46     	; 0x2220 <turnOffPWM+0x46>
    21f2:	84 30       	cpi	r24, 0x04	; 4
    21f4:	d1 f4       	brne	.+52     	; 0x222a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    21f6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    21fa:	8f 7d       	andi	r24, 0xDF	; 223
    21fc:	03 c0       	rjmp	.+6      	; 0x2204 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    21fe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2202:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2204:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2208:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    220a:	84 b5       	in	r24, 0x24	; 36
    220c:	8f 77       	andi	r24, 0x7F	; 127
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2210:	84 b5       	in	r24, 0x24	; 36
    2212:	8f 7d       	andi	r24, 0xDF	; 223
    2214:	84 bd       	out	0x24, r24	; 36
    2216:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2218:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    221c:	8f 77       	andi	r24, 0x7F	; 127
    221e:	03 c0       	rjmp	.+6      	; 0x2226 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2220:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2224:	8f 7d       	andi	r24, 0xDF	; 223
    2226:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    222a:	08 95       	ret

0000222c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	fc 01       	movw	r30, r24
    2234:	e8 53       	subi	r30, 0x38	; 56
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    223a:	fc 01       	movw	r30, r24
    223c:	e4 52       	subi	r30, 0x24	; 36
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2242:	88 23       	and	r24, r24
    2244:	61 f1       	breq	.+88     	; 0x229e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	fc 01       	movw	r30, r24
    224e:	e6 50       	subi	r30, 0x06	; 6
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	c5 91       	lpm	r28, Z+
    2254:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2256:	fc 01       	movw	r30, r24
    2258:	e0 51       	subi	r30, 0x10	; 16
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	a5 91       	lpm	r26, Z+
    225e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2260:	61 11       	cpse	r22, r1
    2262:	09 c0       	rjmp	.+18     	; 0x2276 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2264:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2266:	f8 94       	cli
		*reg &= ~bit;
    2268:	88 81       	ld	r24, Y
    226a:	20 95       	com	r18
    226c:	82 23       	and	r24, r18
    226e:	88 83       	st	Y, r24
		*out &= ~bit;
    2270:	ec 91       	ld	r30, X
    2272:	2e 23       	and	r18, r30
    2274:	0b c0       	rjmp	.+22     	; 0x228c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2276:	62 30       	cpi	r22, 0x02	; 2
    2278:	61 f4       	brne	.+24     	; 0x2292 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    227a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    227c:	f8 94       	cli
		*reg &= ~bit;
    227e:	88 81       	ld	r24, Y
    2280:	32 2f       	mov	r19, r18
    2282:	30 95       	com	r19
    2284:	83 23       	and	r24, r19
    2286:	88 83       	st	Y, r24
		*out |= bit;
    2288:	ec 91       	ld	r30, X
    228a:	2e 2b       	or	r18, r30
    228c:	2c 93       	st	X, r18
		SREG = oldSREG;
    228e:	9f bf       	out	0x3f, r25	; 63
    2290:	06 c0       	rjmp	.+12     	; 0x229e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2292:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2294:	f8 94       	cli
		*reg |= bit;
    2296:	e8 81       	ld	r30, Y
    2298:	2e 2b       	or	r18, r30
    229a:	28 83       	st	Y, r18
		SREG = oldSREG;
    229c:	8f bf       	out	0x3f, r24	; 63
	}
}
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	08 95       	ret

000022a4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	f9 01       	movw	r30, r18
    22b0:	ec 54       	subi	r30, 0x4C	; 76
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    22b6:	f9 01       	movw	r30, r18
    22b8:	e8 53       	subi	r30, 0x38	; 56
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    22be:	f9 01       	movw	r30, r18
    22c0:	e4 52       	subi	r30, 0x24	; 36
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    22c6:	cc 23       	and	r28, r28
    22c8:	c1 f0       	breq	.+48     	; 0x22fa <digitalWrite+0x56>
    22ca:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    22cc:	81 11       	cpse	r24, r1
    22ce:	0e 94 ed 10 	call	0x21da	; 0x21da <turnOffPWM>

	out = portOutputRegister(port);
    22d2:	ec 2f       	mov	r30, r28
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	ee 0f       	add	r30, r30
    22d8:	ff 1f       	adc	r31, r31
    22da:	e0 51       	subi	r30, 0x10	; 16
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	a5 91       	lpm	r26, Z+
    22e0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    22e2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    22e4:	f8 94       	cli

	if (val == LOW) {
    22e6:	11 11       	cpse	r17, r1
    22e8:	04 c0       	rjmp	.+8      	; 0x22f2 <digitalWrite+0x4e>
		*out &= ~bit;
    22ea:	8c 91       	ld	r24, X
    22ec:	d0 95       	com	r29
    22ee:	d8 23       	and	r29, r24
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <digitalWrite+0x52>
	} else {
		*out |= bit;
    22f2:	ec 91       	ld	r30, X
    22f4:	de 2b       	or	r29, r30
    22f6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    22f8:	9f bf       	out	0x3f, r25	; 63
}
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	1f 91       	pop	r17
    2300:	08 95       	ret

00002302 <_ZN6StringD1Ev>:
{
	init();
	char buf[1 + 8 * sizeof(unsigned char)];
	utoa(value, buf, base);
	*this = buf;
}
    2302:	fc 01       	movw	r30, r24
    2304:	80 81       	ld	r24, Z
    2306:	91 81       	ldd	r25, Z+1	; 0x01
    2308:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <free>

0000230c <_ZN6String10invalidateEv>:
    230c:	cf 93       	push	r28
    230e:	df 93       	push	r29
    2310:	ec 01       	movw	r28, r24
    2312:	88 81       	ld	r24, Y
    2314:	99 81       	ldd	r25, Y+1	; 0x01
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	11 f0       	breq	.+4      	; 0x231e <_ZN6String10invalidateEv+0x12>
    231a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <free>
    231e:	19 82       	std	Y+1, r1	; 0x01
    2320:	18 82       	st	Y, r1
    2322:	1d 82       	std	Y+5, r1	; 0x05
    2324:	1c 82       	std	Y+4, r1	; 0x04
    2326:	1b 82       	std	Y+3, r1	; 0x03
    2328:	1a 82       	std	Y+2, r1	; 0x02
    232a:	df 91       	pop	r29
    232c:	cf 91       	pop	r28
    232e:	08 95       	ret

00002330 <_ZN6String12changeBufferEj>:
    2330:	0f 93       	push	r16
    2332:	1f 93       	push	r17
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	ec 01       	movw	r28, r24
    233a:	8b 01       	movw	r16, r22
    233c:	6f 5f       	subi	r22, 0xFF	; 255
    233e:	7f 4f       	sbci	r23, 0xFF	; 255
    2340:	88 81       	ld	r24, Y
    2342:	99 81       	ldd	r25, Y+1	; 0x01
    2344:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <realloc>
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	31 f0       	breq	.+12     	; 0x2358 <_ZN6String12changeBufferEj+0x28>
    234c:	99 83       	std	Y+1, r25	; 0x01
    234e:	88 83       	st	Y, r24
    2350:	1b 83       	std	Y+3, r17	; 0x03
    2352:	0a 83       	std	Y+2, r16	; 0x02
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	01 c0       	rjmp	.+2      	; 0x235a <_ZN6String12changeBufferEj+0x2a>
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	1f 91       	pop	r17
    2360:	0f 91       	pop	r16
    2362:	08 95       	ret

00002364 <_ZN6String7reserveEj>:
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
    2368:	ec 01       	movw	r28, r24
    236a:	88 81       	ld	r24, Y
    236c:	99 81       	ldd	r25, Y+1	; 0x01
    236e:	89 2b       	or	r24, r25
    2370:	29 f0       	breq	.+10     	; 0x237c <_ZN6String7reserveEj+0x18>
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	9b 81       	ldd	r25, Y+3	; 0x03
    2376:	86 17       	cp	r24, r22
    2378:	97 07       	cpc	r25, r23
    237a:	60 f4       	brcc	.+24     	; 0x2394 <_ZN6String7reserveEj+0x30>
    237c:	ce 01       	movw	r24, r28
    237e:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN6String12changeBufferEj>
    2382:	88 23       	and	r24, r24
    2384:	41 f0       	breq	.+16     	; 0x2396 <_ZN6String7reserveEj+0x32>
    2386:	8c 81       	ldd	r24, Y+4	; 0x04
    2388:	9d 81       	ldd	r25, Y+5	; 0x05
    238a:	89 2b       	or	r24, r25
    238c:	19 f4       	brne	.+6      	; 0x2394 <_ZN6String7reserveEj+0x30>
    238e:	e8 81       	ld	r30, Y
    2390:	f9 81       	ldd	r31, Y+1	; 0x01
    2392:	10 82       	st	Z, r1
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	08 95       	ret

0000239c <_ZN6String4copyEPKcj>:
    239c:	ef 92       	push	r14
    239e:	ff 92       	push	r15
    23a0:	0f 93       	push	r16
    23a2:	1f 93       	push	r17
    23a4:	cf 93       	push	r28
    23a6:	df 93       	push	r29
    23a8:	ec 01       	movw	r28, r24
    23aa:	7b 01       	movw	r14, r22
    23ac:	8a 01       	movw	r16, r20
    23ae:	ba 01       	movw	r22, r20
    23b0:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN6String7reserveEj>
    23b4:	81 11       	cpse	r24, r1
    23b6:	04 c0       	rjmp	.+8      	; 0x23c0 <_ZN6String4copyEPKcj+0x24>
    23b8:	ce 01       	movw	r24, r28
    23ba:	0e 94 86 11 	call	0x230c	; 0x230c <_ZN6String10invalidateEv>
    23be:	07 c0       	rjmp	.+14     	; 0x23ce <_ZN6String4copyEPKcj+0x32>
    23c0:	1d 83       	std	Y+5, r17	; 0x05
    23c2:	0c 83       	std	Y+4, r16	; 0x04
    23c4:	b7 01       	movw	r22, r14
    23c6:	88 81       	ld	r24, Y
    23c8:	99 81       	ldd	r25, Y+1	; 0x01
    23ca:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <strcpy>
    23ce:	ce 01       	movw	r24, r28
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	1f 91       	pop	r17
    23d6:	0f 91       	pop	r16
    23d8:	ff 90       	pop	r15
    23da:	ef 90       	pop	r14
    23dc:	08 95       	ret

000023de <_ZN6StringaSEPKc>:
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	ec 01       	movw	r28, r24
    23e4:	61 15       	cp	r22, r1
    23e6:	71 05       	cpc	r23, r1
    23e8:	59 f0       	breq	.+22     	; 0x2400 <_ZN6StringaSEPKc+0x22>
    23ea:	fb 01       	movw	r30, r22
    23ec:	01 90       	ld	r0, Z+
    23ee:	00 20       	and	r0, r0
    23f0:	e9 f7       	brne	.-6      	; 0x23ec <_ZN6StringaSEPKc+0xe>
    23f2:	31 97       	sbiw	r30, 0x01	; 1
    23f4:	af 01       	movw	r20, r30
    23f6:	46 1b       	sub	r20, r22
    23f8:	57 0b       	sbc	r21, r23
    23fa:	0e 94 ce 11 	call	0x239c	; 0x239c <_ZN6String4copyEPKcj>
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <_ZN6StringaSEPKc+0x26>
    2400:	0e 94 86 11 	call	0x230c	; 0x230c <_ZN6String10invalidateEv>
    2404:	ce 01       	movw	r24, r28
    2406:	df 91       	pop	r29
    2408:	cf 91       	pop	r28
    240a:	08 95       	ret

0000240c <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
    240c:	0f 93       	push	r16
    240e:	1f 93       	push	r17
    2410:	cf 93       	push	r28
    2412:	df 93       	push	r29
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	62 97       	sbiw	r28, 0x12	; 18
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	8c 01       	movw	r16, r24
    2426:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2428:	f8 01       	movw	r30, r16
    242a:	11 82       	std	Z+1, r1	; 0x01
    242c:	10 82       	st	Z, r1
	capacity = 0;
    242e:	13 82       	std	Z+3, r1	; 0x03
    2430:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2432:	15 82       	std	Z+5, r1	; 0x05
    2434:	14 82       	std	Z+4, r1	; 0x04
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
    2436:	50 e0       	ldi	r21, 0x00	; 0
    2438:	be 01       	movw	r22, r28
    243a:	6f 5f       	subi	r22, 0xFF	; 255
    243c:	7f 4f       	sbci	r23, 0xFF	; 255
    243e:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <itoa>
String::String(int value, unsigned char base)
{
	init();
	char buf[2 + 8 * sizeof(int)];
	itoa(value, buf, base);
	*this = buf;
    2442:	be 01       	movw	r22, r28
    2444:	6f 5f       	subi	r22, 0xFF	; 255
    2446:	7f 4f       	sbci	r23, 0xFF	; 255
    2448:	c8 01       	movw	r24, r16
    244a:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN6StringaSEPKc>
}
    244e:	62 96       	adiw	r28, 0x12	; 18
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	1f 91       	pop	r17
    2460:	0f 91       	pop	r16
    2462:	08 95       	ret

00002464 <_ZN12Adafruit_GFX9writeLineEiiiij>:
    }
    if(maxy >= miny) {
        *y1 = miny;
        *h  = maxy - miny + 1;
    }
}
    2464:	2f 92       	push	r2
    2466:	3f 92       	push	r3
    2468:	4f 92       	push	r4
    246a:	5f 92       	push	r5
    246c:	6f 92       	push	r6
    246e:	7f 92       	push	r7
    2470:	8f 92       	push	r8
    2472:	9f 92       	push	r9
    2474:	af 92       	push	r10
    2476:	bf 92       	push	r11
    2478:	cf 92       	push	r12
    247a:	df 92       	push	r13
    247c:	ef 92       	push	r14
    247e:	ff 92       	push	r15
    2480:	0f 93       	push	r16
    2482:	1f 93       	push	r17
    2484:	cf 93       	push	r28
    2486:	df 93       	push	r29
    2488:	00 d0       	rcall	.+0      	; 0x248a <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    248a:	00 d0       	rcall	.+0      	; 0x248c <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    248c:	00 d0       	rcall	.+0      	; 0x248e <_ZN12Adafruit_GFX9writeLineEiiiij+0x2a>
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	2c 01       	movw	r4, r24
    2494:	7e 83       	std	Y+6, r23	; 0x06
    2496:	6d 83       	std	Y+5, r22	; 0x05
    2498:	6a 01       	movw	r12, r20
    249a:	59 01       	movw	r10, r18
    249c:	c8 01       	movw	r24, r16
    249e:	fc 82       	std	Y+4, r15	; 0x04
    24a0:	eb 82       	std	Y+3, r14	; 0x03
    24a2:	48 01       	movw	r8, r16
    24a4:	84 1a       	sub	r8, r20
    24a6:	95 0a       	sbc	r9, r21
    24a8:	97 fe       	sbrs	r9, 7
    24aa:	03 c0       	rjmp	.+6      	; 0x24b2 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4e>
    24ac:	91 94       	neg	r9
    24ae:	81 94       	neg	r8
    24b0:	91 08       	sbc	r9, r1
    24b2:	35 01       	movw	r6, r10
    24b4:	2d 81       	ldd	r18, Y+5	; 0x05
    24b6:	3e 81       	ldd	r19, Y+6	; 0x06
    24b8:	62 1a       	sub	r6, r18
    24ba:	73 0a       	sbc	r7, r19
    24bc:	77 fe       	sbrs	r7, 7
    24be:	03 c0       	rjmp	.+6      	; 0x24c6 <_ZN12Adafruit_GFX9writeLineEiiiij+0x62>
    24c0:	71 94       	neg	r7
    24c2:	61 94       	neg	r6
    24c4:	71 08       	sbc	r7, r1
    24c6:	68 14       	cp	r6, r8
    24c8:	79 04       	cpc	r7, r9
    24ca:	5c f4       	brge	.+22     	; 0x24e2 <_ZN12Adafruit_GFX9writeLineEiiiij+0x7e>
    24cc:	3a 2d       	mov	r19, r10
    24ce:	2b 2d       	mov	r18, r11
    24d0:	5c 01       	movw	r10, r24
    24d2:	83 2f       	mov	r24, r19
    24d4:	92 2f       	mov	r25, r18
    24d6:	3d 81       	ldd	r19, Y+5	; 0x05
    24d8:	2e 81       	ldd	r18, Y+6	; 0x06
    24da:	de 82       	std	Y+6, r13	; 0x06
    24dc:	cd 82       	std	Y+5, r12	; 0x05
    24de:	c3 2e       	mov	r12, r19
    24e0:	d2 2e       	mov	r13, r18
    24e2:	ad 81       	ldd	r26, Y+5	; 0x05
    24e4:	be 81       	ldd	r27, Y+6	; 0x06
    24e6:	aa 16       	cp	r10, r26
    24e8:	bb 06       	cpc	r11, r27
    24ea:	5c f4       	brge	.+22     	; 0x2502 <_ZN12Adafruit_GFX9writeLineEiiiij+0x9e>
    24ec:	3c 2d       	mov	r19, r12
    24ee:	2d 2d       	mov	r18, r13
    24f0:	6c 01       	movw	r12, r24
    24f2:	83 2f       	mov	r24, r19
    24f4:	92 2f       	mov	r25, r18
    24f6:	3d 81       	ldd	r19, Y+5	; 0x05
    24f8:	2e 81       	ldd	r18, Y+6	; 0x06
    24fa:	be 82       	std	Y+6, r11	; 0x06
    24fc:	ad 82       	std	Y+5, r10	; 0x05
    24fe:	a3 2e       	mov	r10, r19
    2500:	b2 2e       	mov	r11, r18
    2502:	85 01       	movw	r16, r10
    2504:	2d 81       	ldd	r18, Y+5	; 0x05
    2506:	3e 81       	ldd	r19, Y+6	; 0x06
    2508:	02 1b       	sub	r16, r18
    250a:	13 0b       	sbc	r17, r19
    250c:	1c 01       	movw	r2, r24
    250e:	2c 18       	sub	r2, r12
    2510:	3d 08       	sbc	r3, r13
    2512:	37 fe       	sbrs	r3, 7
    2514:	03 c0       	rjmp	.+6      	; 0x251c <_ZN12Adafruit_GFX9writeLineEiiiij+0xb8>
    2516:	31 94       	neg	r3
    2518:	21 94       	neg	r2
    251a:	31 08       	sbc	r3, r1
    251c:	78 01       	movw	r14, r16
    251e:	17 ff       	sbrs	r17, 7
    2520:	03 c0       	rjmp	.+6      	; 0x2528 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc4>
    2522:	3f ef       	ldi	r19, 0xFF	; 255
    2524:	e3 1a       	sub	r14, r19
    2526:	f3 0a       	sbc	r15, r19
    2528:	f5 94       	asr	r15
    252a:	e7 94       	ror	r14
    252c:	c8 16       	cp	r12, r24
    252e:	d9 06       	cpc	r13, r25
    2530:	2c f0       	brlt	.+10     	; 0x253c <_ZN12Adafruit_GFX9writeLineEiiiij+0xd8>
    2532:	8f ef       	ldi	r24, 0xFF	; 255
    2534:	9f ef       	ldi	r25, 0xFF	; 255
    2536:	9a 83       	std	Y+2, r25	; 0x02
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	04 c0       	rjmp	.+8      	; 0x2544 <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    253c:	a1 e0       	ldi	r26, 0x01	; 1
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	ba 83       	std	Y+2, r27	; 0x02
    2542:	a9 83       	std	Y+1, r26	; 0x01
    2544:	2d 81       	ldd	r18, Y+5	; 0x05
    2546:	3e 81       	ldd	r19, Y+6	; 0x06
    2548:	a2 16       	cp	r10, r18
    254a:	b3 06       	cpc	r11, r19
    254c:	24 f1       	brlt	.+72     	; 0x2596 <_ZN12Adafruit_GFX9writeLineEiiiij+0x132>
    254e:	d2 01       	movw	r26, r4
    2550:	ed 91       	ld	r30, X+
    2552:	fc 91       	ld	r31, X
    2554:	04 84       	ldd	r0, Z+12	; 0x0c
    2556:	f5 85       	ldd	r31, Z+13	; 0x0d
    2558:	e0 2d       	mov	r30, r0
    255a:	2b 81       	ldd	r18, Y+3	; 0x03
    255c:	3c 81       	ldd	r19, Y+4	; 0x04
    255e:	68 14       	cp	r6, r8
    2560:	79 04       	cpc	r7, r9
    2562:	24 f4       	brge	.+8      	; 0x256c <_ZN12Adafruit_GFX9writeLineEiiiij+0x108>
    2564:	4d 81       	ldd	r20, Y+5	; 0x05
    2566:	5e 81       	ldd	r21, Y+6	; 0x06
    2568:	b6 01       	movw	r22, r12
    256a:	03 c0       	rjmp	.+6      	; 0x2572 <_ZN12Adafruit_GFX9writeLineEiiiij+0x10e>
    256c:	a6 01       	movw	r20, r12
    256e:	6d 81       	ldd	r22, Y+5	; 0x05
    2570:	7e 81       	ldd	r23, Y+6	; 0x06
    2572:	c2 01       	movw	r24, r4
    2574:	09 95       	icall
    2576:	e2 18       	sub	r14, r2
    2578:	f3 08       	sbc	r15, r3
    257a:	f7 fe       	sbrs	r15, 7
    257c:	06 c0       	rjmp	.+12     	; 0x258a <_ZN12Adafruit_GFX9writeLineEiiiij+0x126>
    257e:	29 81       	ldd	r18, Y+1	; 0x01
    2580:	3a 81       	ldd	r19, Y+2	; 0x02
    2582:	c2 0e       	add	r12, r18
    2584:	d3 1e       	adc	r13, r19
    2586:	e0 0e       	add	r14, r16
    2588:	f1 1e       	adc	r15, r17
    258a:	8d 81       	ldd	r24, Y+5	; 0x05
    258c:	9e 81       	ldd	r25, Y+6	; 0x06
    258e:	01 96       	adiw	r24, 0x01	; 1
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	8d 83       	std	Y+5, r24	; 0x05
    2594:	d7 cf       	rjmp	.-82     	; 0x2544 <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    2596:	26 96       	adiw	r28, 0x06	; 6
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	1f 91       	pop	r17
    25a8:	0f 91       	pop	r16
    25aa:	ff 90       	pop	r15
    25ac:	ef 90       	pop	r14
    25ae:	df 90       	pop	r13
    25b0:	cf 90       	pop	r12
    25b2:	bf 90       	pop	r11
    25b4:	af 90       	pop	r10
    25b6:	9f 90       	pop	r9
    25b8:	8f 90       	pop	r8
    25ba:	7f 90       	pop	r7
    25bc:	6f 90       	pop	r6
    25be:	5f 90       	pop	r5
    25c0:	4f 90       	pop	r4
    25c2:	3f 90       	pop	r3
    25c4:	2f 90       	pop	r2
    25c6:	08 95       	ret

000025c8 <_ZN12Adafruit_GFX10writePixelEiij>:
    25c8:	dc 01       	movw	r26, r24
    25ca:	ed 91       	ld	r30, X+
    25cc:	fc 91       	ld	r31, X
    25ce:	00 84       	ldd	r0, Z+8	; 0x08
    25d0:	f1 85       	ldd	r31, Z+9	; 0x09
    25d2:	e0 2d       	mov	r30, r0
    25d4:	09 94       	ijmp

000025d6 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    25d6:	0f 93       	push	r16
    25d8:	1f 93       	push	r17
    25da:	dc 01       	movw	r26, r24
    25dc:	ed 91       	ld	r30, X+
    25de:	fc 91       	ld	r31, X
    25e0:	04 8c       	ldd	r0, Z+28	; 0x1c
    25e2:	f5 8d       	ldd	r31, Z+29	; 0x1d
    25e4:	e0 2d       	mov	r30, r0
    25e6:	09 95       	icall
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	08 95       	ret

000025ee <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    25ee:	0f 93       	push	r16
    25f0:	1f 93       	push	r17
    25f2:	dc 01       	movw	r26, r24
    25f4:	ed 91       	ld	r30, X+
    25f6:	fc 91       	ld	r31, X
    25f8:	06 8c       	ldd	r0, Z+30	; 0x1e
    25fa:	f7 8d       	ldd	r31, Z+31	; 0x1f
    25fc:	e0 2d       	mov	r30, r0
    25fe:	09 95       	icall
    2600:	1f 91       	pop	r17
    2602:	0f 91       	pop	r16
    2604:	08 95       	ret

00002606 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    2606:	ef 92       	push	r14
    2608:	ff 92       	push	r15
    260a:	0f 93       	push	r16
    260c:	1f 93       	push	r17
    260e:	dc 01       	movw	r26, r24
    2610:	ed 91       	ld	r30, X+
    2612:	fc 91       	ld	r31, X
    2614:	00 a0       	ldd	r0, Z+32	; 0x20
    2616:	f1 a1       	ldd	r31, Z+33	; 0x21
    2618:	e0 2d       	mov	r30, r0
    261a:	09 95       	icall
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	ff 90       	pop	r15
    2622:	ef 90       	pop	r14
    2624:	08 95       	ret

00002626 <_ZN12Adafruit_GFX10startWriteEv>:
    2626:	08 95       	ret

00002628 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    2628:	8f 92       	push	r8
    262a:	9f 92       	push	r9
    262c:	af 92       	push	r10
    262e:	bf 92       	push	r11
    2630:	cf 92       	push	r12
    2632:	df 92       	push	r13
    2634:	ef 92       	push	r14
    2636:	ff 92       	push	r15
    2638:	0f 93       	push	r16
    263a:	1f 93       	push	r17
    263c:	cf 93       	push	r28
    263e:	df 93       	push	r29
    2640:	ec 01       	movw	r28, r24
    2642:	5b 01       	movw	r10, r22
    2644:	4a 01       	movw	r8, r20
    2646:	69 01       	movw	r12, r18
    2648:	78 01       	movw	r14, r16
    264a:	e8 81       	ld	r30, Y
    264c:	f9 81       	ldd	r31, Y+1	; 0x01
    264e:	02 84       	ldd	r0, Z+10	; 0x0a
    2650:	f3 85       	ldd	r31, Z+11	; 0x0b
    2652:	e0 2d       	mov	r30, r0
    2654:	09 95       	icall
    2656:	c8 0c       	add	r12, r8
    2658:	d9 1c       	adc	r13, r9
    265a:	86 01       	movw	r16, r12
    265c:	01 50       	subi	r16, 0x01	; 1
    265e:	11 09       	sbc	r17, r1
    2660:	e8 81       	ld	r30, Y
    2662:	f9 81       	ldd	r31, Y+1	; 0x01
    2664:	04 88       	ldd	r0, Z+20	; 0x14
    2666:	f5 89       	ldd	r31, Z+21	; 0x15
    2668:	e0 2d       	mov	r30, r0
    266a:	95 01       	movw	r18, r10
    266c:	a4 01       	movw	r20, r8
    266e:	b5 01       	movw	r22, r10
    2670:	ce 01       	movw	r24, r28
    2672:	09 95       	icall
    2674:	e8 81       	ld	r30, Y
    2676:	f9 81       	ldd	r31, Y+1	; 0x01
    2678:	06 88       	ldd	r0, Z+22	; 0x16
    267a:	f7 89       	ldd	r31, Z+23	; 0x17
    267c:	e0 2d       	mov	r30, r0
    267e:	ce 01       	movw	r24, r28
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	1f 91       	pop	r17
    2686:	0f 91       	pop	r16
    2688:	ff 90       	pop	r15
    268a:	ef 90       	pop	r14
    268c:	df 90       	pop	r13
    268e:	cf 90       	pop	r12
    2690:	bf 90       	pop	r11
    2692:	af 90       	pop	r10
    2694:	9f 90       	pop	r9
    2696:	8f 90       	pop	r8
    2698:	09 94       	ijmp

0000269a <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    269a:	8f 92       	push	r8
    269c:	9f 92       	push	r9
    269e:	af 92       	push	r10
    26a0:	bf 92       	push	r11
    26a2:	cf 92       	push	r12
    26a4:	df 92       	push	r13
    26a6:	ef 92       	push	r14
    26a8:	ff 92       	push	r15
    26aa:	0f 93       	push	r16
    26ac:	1f 93       	push	r17
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29
    26b2:	ec 01       	movw	r28, r24
    26b4:	5b 01       	movw	r10, r22
    26b6:	4a 01       	movw	r8, r20
    26b8:	69 01       	movw	r12, r18
    26ba:	e8 81       	ld	r30, Y
    26bc:	f9 81       	ldd	r31, Y+1	; 0x01
    26be:	02 84       	ldd	r0, Z+10	; 0x0a
    26c0:	f3 85       	ldd	r31, Z+11	; 0x0b
    26c2:	e0 2d       	mov	r30, r0
    26c4:	09 95       	icall
    26c6:	95 01       	movw	r18, r10
    26c8:	2c 0d       	add	r18, r12
    26ca:	3d 1d       	adc	r19, r13
    26cc:	21 50       	subi	r18, 0x01	; 1
    26ce:	31 09       	sbc	r19, r1
    26d0:	e8 81       	ld	r30, Y
    26d2:	f9 81       	ldd	r31, Y+1	; 0x01
    26d4:	04 88       	ldd	r0, Z+20	; 0x14
    26d6:	f5 89       	ldd	r31, Z+21	; 0x15
    26d8:	e0 2d       	mov	r30, r0
    26da:	78 01       	movw	r14, r16
    26dc:	84 01       	movw	r16, r8
    26de:	a4 01       	movw	r20, r8
    26e0:	b5 01       	movw	r22, r10
    26e2:	ce 01       	movw	r24, r28
    26e4:	09 95       	icall
    26e6:	e8 81       	ld	r30, Y
    26e8:	f9 81       	ldd	r31, Y+1	; 0x01
    26ea:	06 88       	ldd	r0, Z+22	; 0x16
    26ec:	f7 89       	ldd	r31, Z+23	; 0x17
    26ee:	e0 2d       	mov	r30, r0
    26f0:	ce 01       	movw	r24, r28
    26f2:	df 91       	pop	r29
    26f4:	cf 91       	pop	r28
    26f6:	1f 91       	pop	r17
    26f8:	0f 91       	pop	r16
    26fa:	ff 90       	pop	r15
    26fc:	ef 90       	pop	r14
    26fe:	df 90       	pop	r13
    2700:	cf 90       	pop	r12
    2702:	bf 90       	pop	r11
    2704:	af 90       	pop	r10
    2706:	9f 90       	pop	r9
    2708:	8f 90       	pop	r8
    270a:	09 94       	ijmp

0000270c <_ZN12Adafruit_GFX8fillRectEiiiij>:
    270c:	4f 92       	push	r4
    270e:	5f 92       	push	r5
    2710:	6f 92       	push	r6
    2712:	7f 92       	push	r7
    2714:	8f 92       	push	r8
    2716:	9f 92       	push	r9
    2718:	af 92       	push	r10
    271a:	bf 92       	push	r11
    271c:	cf 92       	push	r12
    271e:	df 92       	push	r13
    2720:	ef 92       	push	r14
    2722:	ff 92       	push	r15
    2724:	0f 93       	push	r16
    2726:	1f 93       	push	r17
    2728:	cf 93       	push	r28
    272a:	df 93       	push	r29
    272c:	6c 01       	movw	r12, r24
    272e:	2b 01       	movw	r4, r22
    2730:	5a 01       	movw	r10, r20
    2732:	39 01       	movw	r6, r18
    2734:	48 01       	movw	r8, r16
    2736:	dc 01       	movw	r26, r24
    2738:	ed 91       	ld	r30, X+
    273a:	fc 91       	ld	r31, X
    273c:	02 84       	ldd	r0, Z+10	; 0x0a
    273e:	f3 85       	ldd	r31, Z+11	; 0x0b
    2740:	e0 2d       	mov	r30, r0
    2742:	09 95       	icall
    2744:	e2 01       	movw	r28, r4
    2746:	64 0c       	add	r6, r4
    2748:	75 1c       	adc	r7, r5
    274a:	d6 01       	movw	r26, r12
    274c:	ed 91       	ld	r30, X+
    274e:	fc 91       	ld	r31, X
    2750:	c6 15       	cp	r28, r6
    2752:	d7 05       	cpc	r29, r7
    2754:	5c f4       	brge	.+22     	; 0x276c <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    2756:	00 88       	ldd	r0, Z+16	; 0x10
    2758:	f1 89       	ldd	r31, Z+17	; 0x11
    275a:	e0 2d       	mov	r30, r0
    275c:	87 01       	movw	r16, r14
    275e:	94 01       	movw	r18, r8
    2760:	a5 01       	movw	r20, r10
    2762:	be 01       	movw	r22, r28
    2764:	c6 01       	movw	r24, r12
    2766:	09 95       	icall
    2768:	21 96       	adiw	r28, 0x01	; 1
    276a:	ef cf       	rjmp	.-34     	; 0x274a <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    276c:	06 88       	ldd	r0, Z+22	; 0x16
    276e:	f7 89       	ldd	r31, Z+23	; 0x17
    2770:	e0 2d       	mov	r30, r0
    2772:	c6 01       	movw	r24, r12
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	1f 91       	pop	r17
    277a:	0f 91       	pop	r16
    277c:	ff 90       	pop	r15
    277e:	ef 90       	pop	r14
    2780:	df 90       	pop	r13
    2782:	cf 90       	pop	r12
    2784:	bf 90       	pop	r11
    2786:	af 90       	pop	r10
    2788:	9f 90       	pop	r9
    278a:	8f 90       	pop	r8
    278c:	7f 90       	pop	r7
    278e:	6f 90       	pop	r6
    2790:	5f 90       	pop	r5
    2792:	4f 90       	pop	r4
    2794:	09 94       	ijmp

00002796 <_ZN12Adafruit_GFX10fillScreenEj>:
    2796:	ef 92       	push	r14
    2798:	ff 92       	push	r15
    279a:	0f 93       	push	r16
    279c:	1f 93       	push	r17
    279e:	dc 01       	movw	r26, r24
    27a0:	1a 96       	adiw	r26, 0x0a	; 10
    27a2:	0d 91       	ld	r16, X+
    27a4:	1c 91       	ld	r17, X
    27a6:	1b 97       	sbiw	r26, 0x0b	; 11
    27a8:	18 96       	adiw	r26, 0x08	; 8
    27aa:	2d 91       	ld	r18, X+
    27ac:	3c 91       	ld	r19, X
    27ae:	19 97       	sbiw	r26, 0x09	; 9
    27b0:	ed 91       	ld	r30, X+
    27b2:	fc 91       	ld	r31, X
    27b4:	00 a0       	ldd	r0, Z+32	; 0x20
    27b6:	f1 a1       	ldd	r31, Z+33	; 0x21
    27b8:	e0 2d       	mov	r30, r0
    27ba:	7b 01       	movw	r14, r22
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	50 e0       	ldi	r21, 0x00	; 0
    27c0:	60 e0       	ldi	r22, 0x00	; 0
    27c2:	70 e0       	ldi	r23, 0x00	; 0
    27c4:	09 95       	icall
    27c6:	1f 91       	pop	r17
    27c8:	0f 91       	pop	r16
    27ca:	ff 90       	pop	r15
    27cc:	ef 90       	pop	r14
    27ce:	08 95       	ret

000027d0 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    27d0:	8f 92       	push	r8
    27d2:	9f 92       	push	r9
    27d4:	af 92       	push	r10
    27d6:	bf 92       	push	r11
    27d8:	cf 92       	push	r12
    27da:	df 92       	push	r13
    27dc:	ef 92       	push	r14
    27de:	ff 92       	push	r15
    27e0:	0f 93       	push	r16
    27e2:	1f 93       	push	r17
    27e4:	cf 93       	push	r28
    27e6:	df 93       	push	r29
    27e8:	4c 01       	movw	r8, r24
    27ea:	6b 01       	movw	r12, r22
    27ec:	5a 01       	movw	r10, r20
    27ee:	e9 01       	movw	r28, r18
    27f0:	dc 01       	movw	r26, r24
    27f2:	ed 91       	ld	r30, X+
    27f4:	fc 91       	ld	r31, X
    27f6:	62 17       	cp	r22, r18
    27f8:	73 07       	cpc	r23, r19
    27fa:	81 f4       	brne	.+32     	; 0x281c <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    27fc:	04 17       	cp	r16, r20
    27fe:	15 07       	cpc	r17, r21
    2800:	24 f4       	brge	.+8      	; 0x280a <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    2802:	8b 2d       	mov	r24, r11
    2804:	58 01       	movw	r10, r16
    2806:	04 2f       	mov	r16, r20
    2808:	18 2f       	mov	r17, r24
    280a:	0a 19       	sub	r16, r10
    280c:	1b 09       	sbc	r17, r11
    280e:	98 01       	movw	r18, r16
    2810:	2f 5f       	subi	r18, 0xFF	; 255
    2812:	3f 4f       	sbci	r19, 0xFF	; 255
    2814:	04 8c       	ldd	r0, Z+28	; 0x1c
    2816:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2818:	e0 2d       	mov	r30, r0
    281a:	12 c0       	rjmp	.+36     	; 0x2840 <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    281c:	40 17       	cp	r20, r16
    281e:	51 07       	cpc	r21, r17
    2820:	09 f5       	brne	.+66     	; 0x2864 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    2822:	26 17       	cp	r18, r22
    2824:	37 07       	cpc	r19, r23
    2826:	24 f4       	brge	.+8      	; 0x2830 <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    2828:	8d 2d       	mov	r24, r13
    282a:	69 01       	movw	r12, r18
    282c:	c6 2f       	mov	r28, r22
    282e:	d8 2f       	mov	r29, r24
    2830:	9e 01       	movw	r18, r28
    2832:	2c 19       	sub	r18, r12
    2834:	3d 09       	sbc	r19, r13
    2836:	2f 5f       	subi	r18, 0xFF	; 255
    2838:	3f 4f       	sbci	r19, 0xFF	; 255
    283a:	06 8c       	ldd	r0, Z+30	; 0x1e
    283c:	f7 8d       	ldd	r31, Z+31	; 0x1f
    283e:	e0 2d       	mov	r30, r0
    2840:	87 01       	movw	r16, r14
    2842:	a5 01       	movw	r20, r10
    2844:	b6 01       	movw	r22, r12
    2846:	c4 01       	movw	r24, r8
    2848:	09 95       	icall
    284a:	df 91       	pop	r29
    284c:	cf 91       	pop	r28
    284e:	1f 91       	pop	r17
    2850:	0f 91       	pop	r16
    2852:	ff 90       	pop	r15
    2854:	ef 90       	pop	r14
    2856:	df 90       	pop	r13
    2858:	cf 90       	pop	r12
    285a:	bf 90       	pop	r11
    285c:	af 90       	pop	r10
    285e:	9f 90       	pop	r9
    2860:	8f 90       	pop	r8
    2862:	08 95       	ret
    2864:	02 84       	ldd	r0, Z+10	; 0x0a
    2866:	f3 85       	ldd	r31, Z+11	; 0x0b
    2868:	e0 2d       	mov	r30, r0
    286a:	09 95       	icall
    286c:	d4 01       	movw	r26, r8
    286e:	ed 91       	ld	r30, X+
    2870:	fc 91       	ld	r31, X
    2872:	04 88       	ldd	r0, Z+20	; 0x14
    2874:	f5 89       	ldd	r31, Z+21	; 0x15
    2876:	e0 2d       	mov	r30, r0
    2878:	9e 01       	movw	r18, r28
    287a:	a5 01       	movw	r20, r10
    287c:	b6 01       	movw	r22, r12
    287e:	c4 01       	movw	r24, r8
    2880:	09 95       	icall
    2882:	d4 01       	movw	r26, r8
    2884:	ed 91       	ld	r30, X+
    2886:	fc 91       	ld	r31, X
    2888:	06 88       	ldd	r0, Z+22	; 0x16
    288a:	f7 89       	ldd	r31, Z+23	; 0x17
    288c:	e0 2d       	mov	r30, r0
    288e:	c4 01       	movw	r24, r8
    2890:	df 91       	pop	r29
    2892:	cf 91       	pop	r28
    2894:	1f 91       	pop	r17
    2896:	0f 91       	pop	r16
    2898:	ff 90       	pop	r15
    289a:	ef 90       	pop	r14
    289c:	df 90       	pop	r13
    289e:	cf 90       	pop	r12
    28a0:	bf 90       	pop	r11
    28a2:	af 90       	pop	r10
    28a4:	9f 90       	pop	r9
    28a6:	8f 90       	pop	r8
    28a8:	09 94       	ijmp

000028aa <_ZN12Adafruit_GFX8drawRectEiiiij>:
    28aa:	6f 92       	push	r6
    28ac:	7f 92       	push	r7
    28ae:	8f 92       	push	r8
    28b0:	9f 92       	push	r9
    28b2:	af 92       	push	r10
    28b4:	bf 92       	push	r11
    28b6:	cf 92       	push	r12
    28b8:	df 92       	push	r13
    28ba:	ef 92       	push	r14
    28bc:	ff 92       	push	r15
    28be:	0f 93       	push	r16
    28c0:	1f 93       	push	r17
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	ec 01       	movw	r28, r24
    28c8:	4b 01       	movw	r8, r22
    28ca:	5a 01       	movw	r10, r20
    28cc:	69 01       	movw	r12, r18
    28ce:	38 01       	movw	r6, r16
    28d0:	e8 81       	ld	r30, Y
    28d2:	f9 81       	ldd	r31, Y+1	; 0x01
    28d4:	02 84       	ldd	r0, Z+10	; 0x0a
    28d6:	f3 85       	ldd	r31, Z+11	; 0x0b
    28d8:	e0 2d       	mov	r30, r0
    28da:	09 95       	icall
    28dc:	e8 81       	ld	r30, Y
    28de:	f9 81       	ldd	r31, Y+1	; 0x01
    28e0:	02 88       	ldd	r0, Z+18	; 0x12
    28e2:	f3 89       	ldd	r31, Z+19	; 0x13
    28e4:	e0 2d       	mov	r30, r0
    28e6:	87 01       	movw	r16, r14
    28e8:	96 01       	movw	r18, r12
    28ea:	a5 01       	movw	r20, r10
    28ec:	b4 01       	movw	r22, r8
    28ee:	ce 01       	movw	r24, r28
    28f0:	09 95       	icall
    28f2:	a5 01       	movw	r20, r10
    28f4:	46 0d       	add	r20, r6
    28f6:	57 1d       	adc	r21, r7
    28f8:	41 50       	subi	r20, 0x01	; 1
    28fa:	51 09       	sbc	r21, r1
    28fc:	e8 81       	ld	r30, Y
    28fe:	f9 81       	ldd	r31, Y+1	; 0x01
    2900:	02 88       	ldd	r0, Z+18	; 0x12
    2902:	f3 89       	ldd	r31, Z+19	; 0x13
    2904:	e0 2d       	mov	r30, r0
    2906:	96 01       	movw	r18, r12
    2908:	b4 01       	movw	r22, r8
    290a:	ce 01       	movw	r24, r28
    290c:	09 95       	icall
    290e:	e8 81       	ld	r30, Y
    2910:	f9 81       	ldd	r31, Y+1	; 0x01
    2912:	00 88       	ldd	r0, Z+16	; 0x10
    2914:	f1 89       	ldd	r31, Z+17	; 0x11
    2916:	e0 2d       	mov	r30, r0
    2918:	93 01       	movw	r18, r6
    291a:	a5 01       	movw	r20, r10
    291c:	b4 01       	movw	r22, r8
    291e:	ce 01       	movw	r24, r28
    2920:	09 95       	icall
    2922:	c8 0c       	add	r12, r8
    2924:	d9 1c       	adc	r13, r9
    2926:	b6 01       	movw	r22, r12
    2928:	61 50       	subi	r22, 0x01	; 1
    292a:	71 09       	sbc	r23, r1
    292c:	e8 81       	ld	r30, Y
    292e:	f9 81       	ldd	r31, Y+1	; 0x01
    2930:	00 88       	ldd	r0, Z+16	; 0x10
    2932:	f1 89       	ldd	r31, Z+17	; 0x11
    2934:	e0 2d       	mov	r30, r0
    2936:	93 01       	movw	r18, r6
    2938:	a5 01       	movw	r20, r10
    293a:	ce 01       	movw	r24, r28
    293c:	09 95       	icall
    293e:	e8 81       	ld	r30, Y
    2940:	f9 81       	ldd	r31, Y+1	; 0x01
    2942:	06 88       	ldd	r0, Z+22	; 0x16
    2944:	f7 89       	ldd	r31, Z+23	; 0x17
    2946:	e0 2d       	mov	r30, r0
    2948:	ce 01       	movw	r24, r28
    294a:	df 91       	pop	r29
    294c:	cf 91       	pop	r28
    294e:	1f 91       	pop	r17
    2950:	0f 91       	pop	r16
    2952:	ff 90       	pop	r15
    2954:	ef 90       	pop	r14
    2956:	df 90       	pop	r13
    2958:	cf 90       	pop	r12
    295a:	bf 90       	pop	r11
    295c:	af 90       	pop	r10
    295e:	9f 90       	pop	r9
    2960:	8f 90       	pop	r8
    2962:	7f 90       	pop	r7
    2964:	6f 90       	pop	r6
    2966:	09 94       	ijmp

00002968 <_ZN12Adafruit_GFX13invertDisplayEb>:
    2968:	08 95       	ret

0000296a <_ZN12Adafruit_GFX11setRotationEh>:
    296a:	fc 01       	movw	r30, r24
    296c:	63 70       	andi	r22, 0x03	; 3
    296e:	65 8b       	std	Z+21, r22	; 0x15
    2970:	84 81       	ldd	r24, Z+4	; 0x04
    2972:	95 81       	ldd	r25, Z+5	; 0x05
    2974:	26 81       	ldd	r18, Z+6	; 0x06
    2976:	37 81       	ldd	r19, Z+7	; 0x07
    2978:	61 30       	cpi	r22, 0x01	; 1
    297a:	39 f0       	breq	.+14     	; 0x298a <_ZN12Adafruit_GFX11setRotationEh+0x20>
    297c:	63 30       	cpi	r22, 0x03	; 3
    297e:	29 f0       	breq	.+10     	; 0x298a <_ZN12Adafruit_GFX11setRotationEh+0x20>
    2980:	91 87       	std	Z+9, r25	; 0x09
    2982:	80 87       	std	Z+8, r24	; 0x08
    2984:	33 87       	std	Z+11, r19	; 0x0b
    2986:	22 87       	std	Z+10, r18	; 0x0a
    2988:	08 95       	ret
    298a:	31 87       	std	Z+9, r19	; 0x09
    298c:	20 87       	std	Z+8, r18	; 0x08
    298e:	93 87       	std	Z+11, r25	; 0x0b
    2990:	82 87       	std	Z+10, r24	; 0x0a
    2992:	08 95       	ret

00002994 <_ZN12Adafruit_GFXC1Eii>:
    2994:	fc 01       	movw	r30, r24
    2996:	13 82       	std	Z+3, r1	; 0x03
    2998:	12 82       	std	Z+2, r1	; 0x02
    299a:	85 e4       	ldi	r24, 0x45	; 69
    299c:	91 e0       	ldi	r25, 0x01	; 1
    299e:	91 83       	std	Z+1, r25	; 0x01
    29a0:	80 83       	st	Z, r24
    29a2:	75 83       	std	Z+5, r23	; 0x05
    29a4:	64 83       	std	Z+4, r22	; 0x04
    29a6:	57 83       	std	Z+7, r21	; 0x07
    29a8:	46 83       	std	Z+6, r20	; 0x06
    29aa:	71 87       	std	Z+9, r23	; 0x09
    29ac:	60 87       	std	Z+8, r22	; 0x08
    29ae:	53 87       	std	Z+11, r21	; 0x0b
    29b0:	42 87       	std	Z+10, r20	; 0x0a
    29b2:	15 8a       	std	Z+21, r1	; 0x15
    29b4:	15 86       	std	Z+13, r1	; 0x0d
    29b6:	14 86       	std	Z+12, r1	; 0x0c
    29b8:	17 86       	std	Z+15, r1	; 0x0f
    29ba:	16 86       	std	Z+14, r1	; 0x0e
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	84 8b       	std	Z+20, r24	; 0x14
    29c0:	2f ef       	ldi	r18, 0xFF	; 255
    29c2:	3f ef       	ldi	r19, 0xFF	; 255
    29c4:	33 8b       	std	Z+19, r19	; 0x13
    29c6:	22 8b       	std	Z+18, r18	; 0x12
    29c8:	31 8b       	std	Z+17, r19	; 0x11
    29ca:	20 8b       	std	Z+16, r18	; 0x10
    29cc:	86 8b       	std	Z+22, r24	; 0x16
    29ce:	17 8a       	std	Z+23, r1	; 0x17
    29d0:	11 8e       	std	Z+25, r1	; 0x19
    29d2:	10 8e       	std	Z+24, r1	; 0x18
    29d4:	08 95       	ret

000029d6 <_ZN12Adafruit_GFX8drawCharEiihjjh>:
    29d6:	2f 92       	push	r2
    29d8:	3f 92       	push	r3
    29da:	4f 92       	push	r4
    29dc:	5f 92       	push	r5
    29de:	6f 92       	push	r6
    29e0:	7f 92       	push	r7
    29e2:	8f 92       	push	r8
    29e4:	9f 92       	push	r9
    29e6:	af 92       	push	r10
    29e8:	bf 92       	push	r11
    29ea:	cf 92       	push	r12
    29ec:	df 92       	push	r13
    29ee:	ef 92       	push	r14
    29f0:	ff 92       	push	r15
    29f2:	0f 93       	push	r16
    29f4:	1f 93       	push	r17
    29f6:	cf 93       	push	r28
    29f8:	df 93       	push	r29
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	6b 97       	sbiw	r28, 0x1b	; 27
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	9b 8f       	std	Y+27, r25	; 0x1b
    2a0c:	8a 8f       	std	Y+26, r24	; 0x1a
    2a0e:	5b 01       	movw	r10, r22
    2a10:	1a 01       	movw	r2, r20
    2a12:	d2 2e       	mov	r13, r18
    2a14:	1f 83       	std	Y+7, r17	; 0x07
    2a16:	0e 83       	std	Y+6, r16	; 0x06
    2a18:	37 01       	movw	r6, r14
    2a1a:	c9 82       	std	Y+1, r12	; 0x01
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	58 96       	adiw	r26, 0x18	; 24
    2a20:	2d 91       	ld	r18, X+
    2a22:	3c 91       	ld	r19, X
    2a24:	59 97       	sbiw	r26, 0x19	; 25
    2a26:	21 15       	cp	r18, r1
    2a28:	31 05       	cpc	r19, r1
    2a2a:	09 f0       	breq	.+2      	; 0x2a2e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x58>
    2a2c:	e6 c0       	rjmp	.+460    	; 0x2bfa <_ZN12Adafruit_GFX8drawCharEiihjjh+0x224>
    2a2e:	18 96       	adiw	r26, 0x08	; 8
    2a30:	8d 91       	ld	r24, X+
    2a32:	9c 91       	ld	r25, X
    2a34:	19 97       	sbiw	r26, 0x09	; 9
    2a36:	68 17       	cp	r22, r24
    2a38:	79 07       	cpc	r23, r25
    2a3a:	0c f0       	brlt	.+2      	; 0x2a3e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x68>
    2a3c:	cd c1       	rjmp	.+922    	; 0x2dd8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    2a3e:	1a 96       	adiw	r26, 0x0a	; 10
    2a40:	8d 91       	ld	r24, X+
    2a42:	9c 91       	ld	r25, X
    2a44:	1b 97       	sbiw	r26, 0x0b	; 11
    2a46:	48 17       	cp	r20, r24
    2a48:	59 07       	cpc	r21, r25
    2a4a:	0c f0       	brlt	.+2      	; 0x2a4e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x78>
    2a4c:	c5 c1       	rjmp	.+906    	; 0x2dd8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    2a4e:	8c 2c       	mov	r8, r12
    2a50:	91 2c       	mov	r9, r1
    2a52:	fb 01       	movw	r30, r22
    2a54:	26 e0       	ldi	r18, 0x06	; 6
    2a56:	c2 9e       	mul	r12, r18
    2a58:	e0 0d       	add	r30, r0
    2a5a:	f1 1d       	adc	r31, r1
    2a5c:	11 24       	eor	r1, r1
    2a5e:	fb 87       	std	Y+11, r31	; 0x0b
    2a60:	ea 87       	std	Y+10, r30	; 0x0a
    2a62:	1e 16       	cp	r1, r30
    2a64:	1f 06       	cpc	r1, r31
    2a66:	0c f0       	brlt	.+2      	; 0x2a6a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x94>
    2a68:	b7 c1       	rjmp	.+878    	; 0x2dd8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    2a6a:	a4 01       	movw	r20, r8
    2a6c:	83 e0       	ldi	r24, 0x03	; 3
    2a6e:	44 0f       	add	r20, r20
    2a70:	55 1f       	adc	r21, r21
    2a72:	8a 95       	dec	r24
    2a74:	e1 f7       	brne	.-8      	; 0x2a6e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x98>
    2a76:	5d 87       	std	Y+13, r21	; 0x0d
    2a78:	4c 87       	std	Y+12, r20	; 0x0c
    2a7a:	ca 01       	movw	r24, r20
    2a7c:	82 0d       	add	r24, r2
    2a7e:	93 1d       	adc	r25, r3
    2a80:	18 16       	cp	r1, r24
    2a82:	19 06       	cpc	r1, r25
    2a84:	0c f0       	brlt	.+2      	; 0x2a88 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xb2>
    2a86:	a8 c1       	rjmp	.+848    	; 0x2dd8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    2a88:	57 96       	adiw	r26, 0x17	; 23
    2a8a:	8c 91       	ld	r24, X
    2a8c:	81 11       	cpse	r24, r1
    2a8e:	04 c0       	rjmp	.+8      	; 0x2a98 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xc2>
    2a90:	5f ea       	ldi	r21, 0xAF	; 175
    2a92:	5d 15       	cp	r21, r13
    2a94:	08 f4       	brcc	.+2      	; 0x2a98 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xc2>
    2a96:	d3 94       	inc	r13
    2a98:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2a9a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2a9c:	ed 91       	ld	r30, X+
    2a9e:	fc 91       	ld	r31, X
    2aa0:	11 97       	sbiw	r26, 0x01	; 1
    2aa2:	02 84       	ldd	r0, Z+10	; 0x0a
    2aa4:	f3 85       	ldd	r31, Z+11	; 0x0b
    2aa6:	e0 2d       	mov	r30, r0
    2aa8:	cd 01       	movw	r24, r26
    2aaa:	09 95       	icall
    2aac:	b5 e0       	ldi	r27, 0x05	; 5
    2aae:	db 9e       	mul	r13, r27
    2ab0:	c0 01       	movw	r24, r0
    2ab2:	11 24       	eor	r1, r1
    2ab4:	f5 01       	movw	r30, r10
    2ab6:	35 96       	adiw	r30, 0x05	; 5
    2ab8:	ff 87       	std	Y+15, r31	; 0x0f
    2aba:	ee 87       	std	Y+14, r30	; 0x0e
    2abc:	25 01       	movw	r4, r10
    2abe:	bb 82       	std	Y+3, r11	; 0x03
    2ac0:	aa 82       	std	Y+2, r10	; 0x02
    2ac2:	9c 01       	movw	r18, r24
    2ac4:	2a 19       	sub	r18, r10
    2ac6:	3b 09       	sbc	r19, r11
    2ac8:	39 8b       	std	Y+17, r19	; 0x11
    2aca:	28 8b       	std	Y+16, r18	; 0x10
    2acc:	a1 01       	movw	r20, r2
    2ace:	48 5f       	subi	r20, 0xF8	; 248
    2ad0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ad2:	5b 8b       	std	Y+19, r21	; 0x13
    2ad4:	4a 8b       	std	Y+18, r20	; 0x12
    2ad6:	e8 89       	ldd	r30, Y+16	; 0x10
    2ad8:	f9 89       	ldd	r31, Y+17	; 0x11
    2ada:	e4 0d       	add	r30, r4
    2adc:	f5 1d       	adc	r31, r5
    2ade:	ec 5f       	subi	r30, 0xFC	; 252
    2ae0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ae2:	54 91       	lpm	r21, Z
    2ae4:	58 87       	std	Y+8, r21	; 0x08
    2ae6:	3d 82       	std	Y+5, r3	; 0x05
    2ae8:	2c 82       	std	Y+4, r2	; 0x04
    2aea:	61 01       	movw	r12, r2
    2aec:	88 85       	ldd	r24, Y+8	; 0x08
    2aee:	80 ff       	sbrs	r24, 0
    2af0:	13 c0       	rjmp	.+38     	; 0x2b18 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x142>
    2af2:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2af4:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2af6:	ed 91       	ld	r30, X+
    2af8:	fc 91       	ld	r31, X
    2afa:	b9 81       	ldd	r27, Y+1	; 0x01
    2afc:	b1 30       	cpi	r27, 0x01	; 1
    2afe:	31 f4       	brne	.+12     	; 0x2b0c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x136>
    2b00:	04 84       	ldd	r0, Z+12	; 0x0c
    2b02:	f5 85       	ldd	r31, Z+13	; 0x0d
    2b04:	e0 2d       	mov	r30, r0
    2b06:	2e 81       	ldd	r18, Y+6	; 0x06
    2b08:	3f 81       	ldd	r19, Y+7	; 0x07
    2b0a:	16 c0       	rjmp	.+44     	; 0x2b38 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x162>
    2b0c:	06 84       	ldd	r0, Z+14	; 0x0e
    2b0e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2b10:	e0 2d       	mov	r30, r0
    2b12:	ee 80       	ldd	r14, Y+6	; 0x06
    2b14:	ff 80       	ldd	r15, Y+7	; 0x07
    2b16:	1a c0       	rjmp	.+52     	; 0x2b4c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x176>
    2b18:	ee 81       	ldd	r30, Y+6	; 0x06
    2b1a:	ff 81       	ldd	r31, Y+7	; 0x07
    2b1c:	e6 15       	cp	r30, r6
    2b1e:	f7 05       	cpc	r31, r7
    2b20:	f1 f0       	breq	.+60     	; 0x2b5e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x188>
    2b22:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2b24:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2b26:	ed 91       	ld	r30, X+
    2b28:	fc 91       	ld	r31, X
    2b2a:	b9 81       	ldd	r27, Y+1	; 0x01
    2b2c:	b1 30       	cpi	r27, 0x01	; 1
    2b2e:	51 f4       	brne	.+20     	; 0x2b44 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x16e>
    2b30:	04 84       	ldd	r0, Z+12	; 0x0c
    2b32:	f5 85       	ldd	r31, Z+13	; 0x0d
    2b34:	e0 2d       	mov	r30, r0
    2b36:	93 01       	movw	r18, r6
    2b38:	a6 01       	movw	r20, r12
    2b3a:	b2 01       	movw	r22, r4
    2b3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b3e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b40:	09 95       	icall
    2b42:	0d c0       	rjmp	.+26     	; 0x2b5e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x188>
    2b44:	06 84       	ldd	r0, Z+14	; 0x0e
    2b46:	f7 85       	ldd	r31, Z+15	; 0x0f
    2b48:	e0 2d       	mov	r30, r0
    2b4a:	73 01       	movw	r14, r6
    2b4c:	84 01       	movw	r16, r8
    2b4e:	94 01       	movw	r18, r8
    2b50:	4c 81       	ldd	r20, Y+4	; 0x04
    2b52:	5d 81       	ldd	r21, Y+5	; 0x05
    2b54:	6a 81       	ldd	r22, Y+2	; 0x02
    2b56:	7b 81       	ldd	r23, Y+3	; 0x03
    2b58:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b5a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b5c:	09 95       	icall
    2b5e:	e8 85       	ldd	r30, Y+8	; 0x08
    2b60:	e6 95       	lsr	r30
    2b62:	e8 87       	std	Y+8, r30	; 0x08
    2b64:	2c 81       	ldd	r18, Y+4	; 0x04
    2b66:	3d 81       	ldd	r19, Y+5	; 0x05
    2b68:	28 0d       	add	r18, r8
    2b6a:	39 1d       	adc	r19, r9
    2b6c:	3d 83       	std	Y+5, r19	; 0x05
    2b6e:	2c 83       	std	Y+4, r18	; 0x04
    2b70:	3f ef       	ldi	r19, 0xFF	; 255
    2b72:	c3 1a       	sub	r12, r19
    2b74:	d3 0a       	sbc	r13, r19
    2b76:	4a 89       	ldd	r20, Y+18	; 0x12
    2b78:	5b 89       	ldd	r21, Y+19	; 0x13
    2b7a:	c4 16       	cp	r12, r20
    2b7c:	d5 06       	cpc	r13, r21
    2b7e:	09 f0       	breq	.+2      	; 0x2b82 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1ac>
    2b80:	b5 cf       	rjmp	.-150    	; 0x2aec <_ZN12Adafruit_GFX8drawCharEiihjjh+0x116>
    2b82:	8a 81       	ldd	r24, Y+2	; 0x02
    2b84:	9b 81       	ldd	r25, Y+3	; 0x03
    2b86:	88 0d       	add	r24, r8
    2b88:	99 1d       	adc	r25, r9
    2b8a:	9b 83       	std	Y+3, r25	; 0x03
    2b8c:	8a 83       	std	Y+2, r24	; 0x02
    2b8e:	9f ef       	ldi	r25, 0xFF	; 255
    2b90:	49 1a       	sub	r4, r25
    2b92:	59 0a       	sbc	r5, r25
    2b94:	ae 85       	ldd	r26, Y+14	; 0x0e
    2b96:	bf 85       	ldd	r27, Y+15	; 0x0f
    2b98:	4a 16       	cp	r4, r26
    2b9a:	5b 06       	cpc	r5, r27
    2b9c:	09 f0       	breq	.+2      	; 0x2ba0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1ca>
    2b9e:	9b cf       	rjmp	.-202    	; 0x2ad6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x100>
    2ba0:	ee 81       	ldd	r30, Y+6	; 0x06
    2ba2:	ff 81       	ldd	r31, Y+7	; 0x07
    2ba4:	e6 15       	cp	r30, r6
    2ba6:	f7 05       	cpc	r31, r7
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1d6>
    2baa:	f4 c0       	rjmp	.+488    	; 0x2d94 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    2bac:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2bae:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2bb0:	a0 81       	ld	r26, Z
    2bb2:	b1 81       	ldd	r27, Z+1	; 0x01
    2bb4:	f9 81       	ldd	r31, Y+1	; 0x01
    2bb6:	f1 30       	cpi	r31, 0x01	; 1
    2bb8:	79 f4       	brne	.+30     	; 0x2bd8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x202>
    2bba:	b5 01       	movw	r22, r10
    2bbc:	6b 5f       	subi	r22, 0xFB	; 251
    2bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc0:	50 96       	adiw	r26, 0x10	; 16
    2bc2:	ed 91       	ld	r30, X+
    2bc4:	fc 91       	ld	r31, X
    2bc6:	51 97       	sbiw	r26, 0x11	; 17
    2bc8:	83 01       	movw	r16, r6
    2bca:	28 e0       	ldi	r18, 0x08	; 8
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	a1 01       	movw	r20, r2
    2bd0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bd2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2bd4:	09 95       	icall
    2bd6:	de c0       	rjmp	.+444    	; 0x2d94 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    2bd8:	6a 85       	ldd	r22, Y+10	; 0x0a
    2bda:	7b 85       	ldd	r23, Y+11	; 0x0b
    2bdc:	68 19       	sub	r22, r8
    2bde:	79 09       	sbc	r23, r9
    2be0:	1e 96       	adiw	r26, 0x0e	; 14
    2be2:	ed 91       	ld	r30, X+
    2be4:	fc 91       	ld	r31, X
    2be6:	1f 97       	sbiw	r26, 0x0f	; 15
    2be8:	73 01       	movw	r14, r6
    2bea:	0c 85       	ldd	r16, Y+12	; 0x0c
    2bec:	1d 85       	ldd	r17, Y+13	; 0x0d
    2bee:	94 01       	movw	r18, r8
    2bf0:	a1 01       	movw	r20, r2
    2bf2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bf4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2bf6:	09 95       	icall
    2bf8:	cd c0       	rjmp	.+410    	; 0x2d94 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    2bfa:	f9 01       	movw	r30, r18
    2bfc:	34 96       	adiw	r30, 0x04	; 4
    2bfe:	e4 91       	lpm	r30, Z
    2c00:	de 1a       	sub	r13, r30
    2c02:	f9 01       	movw	r30, r18
    2c04:	32 96       	adiw	r30, 0x02	; 2
    2c06:	85 91       	lpm	r24, Z+
    2c08:	94 91       	lpm	r25, Z
    2c0a:	b7 e0       	ldi	r27, 0x07	; 7
    2c0c:	db 9e       	mul	r13, r27
    2c0e:	80 0d       	add	r24, r0
    2c10:	91 1d       	adc	r25, r1
    2c12:	11 24       	eor	r1, r1
    2c14:	f9 01       	movw	r30, r18
    2c16:	25 91       	lpm	r18, Z+
    2c18:	34 91       	lpm	r19, Z
    2c1a:	3b 8b       	std	Y+19, r19	; 0x13
    2c1c:	2a 8b       	std	Y+18, r18	; 0x12
    2c1e:	fc 01       	movw	r30, r24
    2c20:	25 91       	lpm	r18, Z+
    2c22:	34 91       	lpm	r19, Z
    2c24:	29 01       	movw	r4, r18
    2c26:	fc 01       	movw	r30, r24
    2c28:	32 96       	adiw	r30, 0x02	; 2
    2c2a:	c4 90       	lpm	r12, Z
    2c2c:	31 96       	adiw	r30, 0x01	; 1
    2c2e:	34 91       	lpm	r19, Z
    2c30:	3c 87       	std	Y+12, r19	; 0x0c
    2c32:	32 96       	adiw	r30, 0x02	; 2
    2c34:	14 91       	lpm	r17, Z
    2c36:	31 96       	adiw	r30, 0x01	; 1
    2c38:	d4 90       	lpm	r13, Z
    2c3a:	49 81       	ldd	r20, Y+1	; 0x01
    2c3c:	42 30       	cpi	r20, 0x02	; 2
    2c3e:	58 f0       	brcs	.+22     	; 0x2c56 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x280>
    2c40:	61 2e       	mov	r6, r17
    2c42:	01 2e       	mov	r0, r17
    2c44:	00 0c       	add	r0, r0
    2c46:	77 08       	sbc	r7, r7
    2c48:	8d 2d       	mov	r24, r13
    2c4a:	0d 2c       	mov	r0, r13
    2c4c:	00 0c       	add	r0, r0
    2c4e:	99 0b       	sbc	r25, r25
    2c50:	99 87       	std	Y+9, r25	; 0x09
    2c52:	88 87       	std	Y+8, r24	; 0x08
    2c54:	04 c0       	rjmp	.+8      	; 0x2c5e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x288>
    2c56:	19 86       	std	Y+9, r1	; 0x09
    2c58:	18 86       	std	Y+8, r1	; 0x08
    2c5a:	61 2c       	mov	r6, r1
    2c5c:	71 2c       	mov	r7, r1
    2c5e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2c60:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2c62:	ed 91       	ld	r30, X+
    2c64:	fc 91       	ld	r31, X
    2c66:	11 97       	sbiw	r26, 0x01	; 1
    2c68:	02 84       	ldd	r0, Z+10	; 0x0a
    2c6a:	f3 85       	ldd	r31, Z+11	; 0x0b
    2c6c:	e0 2d       	mov	r30, r0
    2c6e:	cd 01       	movw	r24, r26
    2c70:	09 95       	icall
    2c72:	b9 81       	ldd	r27, Y+1	; 0x01
    2c74:	8b 2e       	mov	r8, r27
    2c76:	91 2c       	mov	r9, r1
    2c78:	68 9c       	mul	r6, r8
    2c7a:	c0 01       	movw	r24, r0
    2c7c:	69 9c       	mul	r6, r9
    2c7e:	90 0d       	add	r25, r0
    2c80:	78 9c       	mul	r7, r8
    2c82:	90 0d       	add	r25, r0
    2c84:	11 24       	eor	r1, r1
    2c86:	fc 01       	movw	r30, r24
    2c88:	ea 0d       	add	r30, r10
    2c8a:	fb 1d       	adc	r31, r11
    2c8c:	f9 8b       	std	Y+17, r31	; 0x11
    2c8e:	e8 8b       	std	Y+16, r30	; 0x10
    2c90:	1a 82       	std	Y+2, r1	; 0x02
    2c92:	71 2c       	mov	r7, r1
    2c94:	61 2c       	mov	r6, r1
    2c96:	e1 2f       	mov	r30, r17
    2c98:	11 0f       	add	r17, r17
    2c9a:	ff 0b       	sbc	r31, r31
    2c9c:	95 01       	movw	r18, r10
    2c9e:	2e 0f       	add	r18, r30
    2ca0:	3f 1f       	adc	r19, r31
    2ca2:	3b 87       	std	Y+11, r19	; 0x0b
    2ca4:	2a 87       	std	Y+10, r18	; 0x0a
    2ca6:	ac 0c       	add	r10, r12
    2ca8:	b1 1c       	adc	r11, r1
    2caa:	a5 01       	movw	r20, r10
    2cac:	4e 0f       	add	r20, r30
    2cae:	5f 1f       	adc	r21, r31
    2cb0:	5f 8b       	std	Y+23, r21	; 0x17
    2cb2:	4e 8b       	std	Y+22, r20	; 0x16
    2cb4:	c1 01       	movw	r24, r2
    2cb6:	8d 0d       	add	r24, r13
    2cb8:	91 1d       	adc	r25, r1
    2cba:	d7 fc       	sbrc	r13, 7
    2cbc:	9a 95       	dec	r25
    2cbe:	99 8f       	std	Y+25, r25	; 0x19
    2cc0:	88 8f       	std	Y+24, r24	; 0x18
    2cc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cc4:	69 16       	cp	r6, r25
    2cc6:	08 f0       	brcs	.+2      	; 0x2cca <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2f4>
    2cc8:	65 c0       	rjmp	.+202    	; 0x2d94 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    2cca:	86 2d       	mov	r24, r6
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	48 85       	ldd	r20, Y+8	; 0x08
    2cd0:	59 85       	ldd	r21, Y+9	; 0x09
    2cd2:	48 0f       	add	r20, r24
    2cd4:	59 1f       	adc	r21, r25
    2cd6:	48 9d       	mul	r20, r8
    2cd8:	90 01       	movw	r18, r0
    2cda:	49 9d       	mul	r20, r9
    2cdc:	30 0d       	add	r19, r0
    2cde:	58 9d       	mul	r21, r8
    2ce0:	30 0d       	add	r19, r0
    2ce2:	11 24       	eor	r1, r1
    2ce4:	d1 01       	movw	r26, r2
    2ce6:	a2 0f       	add	r26, r18
    2ce8:	b3 1f       	adc	r27, r19
    2cea:	bf 87       	std	Y+15, r27	; 0x0f
    2cec:	ae 87       	std	Y+14, r26	; 0x0e
    2cee:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cf0:	bb 84       	ldd	r11, Y+11	; 0x0b
    2cf2:	e8 89       	ldd	r30, Y+16	; 0x10
    2cf4:	f9 89       	ldd	r31, Y+17	; 0x11
    2cf6:	fd 83       	std	Y+5, r31	; 0x05
    2cf8:	ec 83       	std	Y+4, r30	; 0x04
    2cfa:	da 80       	ldd	r13, Y+2	; 0x02
    2cfc:	fa 85       	ldd	r31, Y+10	; 0x0a
    2cfe:	df 1a       	sub	r13, r31
    2d00:	28 8d       	ldd	r18, Y+24	; 0x18
    2d02:	39 8d       	ldd	r19, Y+25	; 0x19
    2d04:	28 0f       	add	r18, r24
    2d06:	39 1f       	adc	r19, r25
    2d08:	3d 8b       	std	Y+21, r19	; 0x15
    2d0a:	2c 8b       	std	Y+20, r18	; 0x14
    2d0c:	8d 2d       	mov	r24, r13
    2d0e:	8a 0d       	add	r24, r10
    2d10:	4e 89       	ldd	r20, Y+22	; 0x16
    2d12:	5f 89       	ldd	r21, Y+23	; 0x17
    2d14:	a4 16       	cp	r10, r20
    2d16:	b5 06       	cpc	r11, r21
    2d18:	c1 f1       	breq	.+112    	; 0x2d8a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3b4>
    2d1a:	87 70       	andi	r24, 0x07	; 7
    2d1c:	41 f4       	brne	.+16     	; 0x2d2e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x358>
    2d1e:	c2 01       	movw	r24, r4
    2d20:	01 96       	adiw	r24, 0x01	; 1
    2d22:	ea 89       	ldd	r30, Y+18	; 0x12
    2d24:	fb 89       	ldd	r31, Y+19	; 0x13
    2d26:	e4 0d       	add	r30, r4
    2d28:	f5 1d       	adc	r31, r5
    2d2a:	74 90       	lpm	r7, Z
    2d2c:	2c 01       	movw	r4, r24
    2d2e:	77 fe       	sbrs	r7, 7
    2d30:	21 c0       	rjmp	.+66     	; 0x2d74 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x39e>
    2d32:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2d34:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2d36:	ed 91       	ld	r30, X+
    2d38:	fc 91       	ld	r31, X
    2d3a:	b9 81       	ldd	r27, Y+1	; 0x01
    2d3c:	b1 30       	cpi	r27, 0x01	; 1
    2d3e:	61 f4       	brne	.+24     	; 0x2d58 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x382>
    2d40:	04 84       	ldd	r0, Z+12	; 0x0c
    2d42:	f5 85       	ldd	r31, Z+13	; 0x0d
    2d44:	e0 2d       	mov	r30, r0
    2d46:	2e 81       	ldd	r18, Y+6	; 0x06
    2d48:	3f 81       	ldd	r19, Y+7	; 0x07
    2d4a:	4c 89       	ldd	r20, Y+20	; 0x14
    2d4c:	5d 89       	ldd	r21, Y+21	; 0x15
    2d4e:	b5 01       	movw	r22, r10
    2d50:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d52:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d54:	09 95       	icall
    2d56:	0e c0       	rjmp	.+28     	; 0x2d74 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x39e>
    2d58:	06 84       	ldd	r0, Z+14	; 0x0e
    2d5a:	f7 85       	ldd	r31, Z+15	; 0x0f
    2d5c:	e0 2d       	mov	r30, r0
    2d5e:	ee 80       	ldd	r14, Y+6	; 0x06
    2d60:	ff 80       	ldd	r15, Y+7	; 0x07
    2d62:	84 01       	movw	r16, r8
    2d64:	94 01       	movw	r18, r8
    2d66:	4e 85       	ldd	r20, Y+14	; 0x0e
    2d68:	5f 85       	ldd	r21, Y+15	; 0x0f
    2d6a:	6c 81       	ldd	r22, Y+4	; 0x04
    2d6c:	7d 81       	ldd	r23, Y+5	; 0x05
    2d6e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d70:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d72:	09 95       	icall
    2d74:	77 0c       	add	r7, r7
    2d76:	ec 81       	ldd	r30, Y+4	; 0x04
    2d78:	fd 81       	ldd	r31, Y+5	; 0x05
    2d7a:	e8 0d       	add	r30, r8
    2d7c:	f9 1d       	adc	r31, r9
    2d7e:	fd 83       	std	Y+5, r31	; 0x05
    2d80:	ec 83       	std	Y+4, r30	; 0x04
    2d82:	ff ef       	ldi	r31, 0xFF	; 255
    2d84:	af 1a       	sub	r10, r31
    2d86:	bf 0a       	sbc	r11, r31
    2d88:	c1 cf       	rjmp	.-126    	; 0x2d0c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x336>
    2d8a:	2a 81       	ldd	r18, Y+2	; 0x02
    2d8c:	2c 0d       	add	r18, r12
    2d8e:	2a 83       	std	Y+2, r18	; 0x02
    2d90:	63 94       	inc	r6
    2d92:	97 cf       	rjmp	.-210    	; 0x2cc2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2ec>
    2d94:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2d96:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2d98:	ed 91       	ld	r30, X+
    2d9a:	fc 91       	ld	r31, X
    2d9c:	11 97       	sbiw	r26, 0x01	; 1
    2d9e:	06 88       	ldd	r0, Z+22	; 0x16
    2da0:	f7 89       	ldd	r31, Z+23	; 0x17
    2da2:	e0 2d       	mov	r30, r0
    2da4:	cd 01       	movw	r24, r26
    2da6:	6b 96       	adiw	r28, 0x1b	; 27
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	df 91       	pop	r29
    2db4:	cf 91       	pop	r28
    2db6:	1f 91       	pop	r17
    2db8:	0f 91       	pop	r16
    2dba:	ff 90       	pop	r15
    2dbc:	ef 90       	pop	r14
    2dbe:	df 90       	pop	r13
    2dc0:	cf 90       	pop	r12
    2dc2:	bf 90       	pop	r11
    2dc4:	af 90       	pop	r10
    2dc6:	9f 90       	pop	r9
    2dc8:	8f 90       	pop	r8
    2dca:	7f 90       	pop	r7
    2dcc:	6f 90       	pop	r6
    2dce:	5f 90       	pop	r5
    2dd0:	4f 90       	pop	r4
    2dd2:	3f 90       	pop	r3
    2dd4:	2f 90       	pop	r2
    2dd6:	09 94       	ijmp
    2dd8:	6b 96       	adiw	r28, 0x1b	; 27
    2dda:	0f b6       	in	r0, 0x3f	; 63
    2ddc:	f8 94       	cli
    2dde:	de bf       	out	0x3e, r29	; 62
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	cd bf       	out	0x3d, r28	; 61
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	1f 91       	pop	r17
    2dea:	0f 91       	pop	r16
    2dec:	ff 90       	pop	r15
    2dee:	ef 90       	pop	r14
    2df0:	df 90       	pop	r13
    2df2:	cf 90       	pop	r12
    2df4:	bf 90       	pop	r11
    2df6:	af 90       	pop	r10
    2df8:	9f 90       	pop	r9
    2dfa:	8f 90       	pop	r8
    2dfc:	7f 90       	pop	r7
    2dfe:	6f 90       	pop	r6
    2e00:	5f 90       	pop	r5
    2e02:	4f 90       	pop	r4
    2e04:	3f 90       	pop	r3
    2e06:	2f 90       	pop	r2
    2e08:	08 95       	ret

00002e0a <_ZN12Adafruit_GFX5writeEh>:
    2e0a:	af 92       	push	r10
    2e0c:	bf 92       	push	r11
    2e0e:	cf 92       	push	r12
    2e10:	ef 92       	push	r14
    2e12:	ff 92       	push	r15
    2e14:	0f 93       	push	r16
    2e16:	1f 93       	push	r17
    2e18:	cf 93       	push	r28
    2e1a:	df 93       	push	r29
    2e1c:	ec 01       	movw	r28, r24
    2e1e:	26 2f       	mov	r18, r22
    2e20:	88 8d       	ldd	r24, Y+24	; 0x18
    2e22:	99 8d       	ldd	r25, Y+25	; 0x19
    2e24:	00 97       	sbiw	r24, 0x00	; 0
    2e26:	09 f0       	breq	.+2      	; 0x2e2a <_ZN12Adafruit_GFX5writeEh+0x20>
    2e28:	40 c0       	rjmp	.+128    	; 0x2eaa <_ZN12Adafruit_GFX5writeEh+0xa0>
    2e2a:	6a 30       	cpi	r22, 0x0A	; 10
    2e2c:	59 f4       	brne	.+22     	; 0x2e44 <_ZN12Adafruit_GFX5writeEh+0x3a>
    2e2e:	1d 86       	std	Y+13, r1	; 0x0d
    2e30:	1c 86       	std	Y+12, r1	; 0x0c
    2e32:	2c 89       	ldd	r18, Y+20	; 0x14
    2e34:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e36:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e38:	38 e0       	ldi	r19, 0x08	; 8
    2e3a:	23 9f       	mul	r18, r19
    2e3c:	80 0d       	add	r24, r0
    2e3e:	91 1d       	adc	r25, r1
    2e40:	11 24       	eor	r1, r1
    2e42:	41 c0       	rjmp	.+130    	; 0x2ec6 <_ZN12Adafruit_GFX5writeEh+0xbc>
    2e44:	6d 30       	cpi	r22, 0x0D	; 13
    2e46:	09 f4       	brne	.+2      	; 0x2e4a <_ZN12Adafruit_GFX5writeEh+0x40>
    2e48:	aa c0       	rjmp	.+340    	; 0x2f9e <_ZN12Adafruit_GFX5writeEh+0x194>
    2e4a:	8e 89       	ldd	r24, Y+22	; 0x16
    2e4c:	88 23       	and	r24, r24
    2e4e:	c1 f0       	breq	.+48     	; 0x2e80 <_ZN12Adafruit_GFX5writeEh+0x76>
    2e50:	3c 89       	ldd	r19, Y+20	; 0x14
    2e52:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e54:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e56:	46 e0       	ldi	r20, 0x06	; 6
    2e58:	34 9f       	mul	r19, r20
    2e5a:	80 0d       	add	r24, r0
    2e5c:	91 1d       	adc	r25, r1
    2e5e:	11 24       	eor	r1, r1
    2e60:	48 85       	ldd	r20, Y+8	; 0x08
    2e62:	59 85       	ldd	r21, Y+9	; 0x09
    2e64:	48 17       	cp	r20, r24
    2e66:	59 07       	cpc	r21, r25
    2e68:	5c f4       	brge	.+22     	; 0x2e80 <_ZN12Adafruit_GFX5writeEh+0x76>
    2e6a:	1d 86       	std	Y+13, r1	; 0x0d
    2e6c:	1c 86       	std	Y+12, r1	; 0x0c
    2e6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e70:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e72:	48 e0       	ldi	r20, 0x08	; 8
    2e74:	34 9f       	mul	r19, r20
    2e76:	80 0d       	add	r24, r0
    2e78:	91 1d       	adc	r25, r1
    2e7a:	11 24       	eor	r1, r1
    2e7c:	9f 87       	std	Y+15, r25	; 0x0f
    2e7e:	8e 87       	std	Y+14, r24	; 0x0e
    2e80:	ea 88       	ldd	r14, Y+18	; 0x12
    2e82:	fb 88       	ldd	r15, Y+19	; 0x13
    2e84:	08 89       	ldd	r16, Y+16	; 0x10
    2e86:	19 89       	ldd	r17, Y+17	; 0x11
    2e88:	4e 85       	ldd	r20, Y+14	; 0x0e
    2e8a:	5f 85       	ldd	r21, Y+15	; 0x0f
    2e8c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e8e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e90:	cc 88       	ldd	r12, Y+20	; 0x14
    2e92:	ce 01       	movw	r24, r28
    2e94:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <_ZN12Adafruit_GFX8drawCharEiihjjh>
    2e98:	2c 89       	ldd	r18, Y+20	; 0x14
    2e9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e9c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e9e:	36 e0       	ldi	r19, 0x06	; 6
    2ea0:	23 9f       	mul	r18, r19
    2ea2:	80 0d       	add	r24, r0
    2ea4:	91 1d       	adc	r25, r1
    2ea6:	11 24       	eor	r1, r1
    2ea8:	42 c0       	rjmp	.+132    	; 0x2f2e <_ZN12Adafruit_GFX5writeEh+0x124>
    2eaa:	6a 30       	cpi	r22, 0x0A	; 10
    2eac:	79 f4       	brne	.+30     	; 0x2ecc <_ZN12Adafruit_GFX5writeEh+0xc2>
    2eae:	1d 86       	std	Y+13, r1	; 0x0d
    2eb0:	1c 86       	std	Y+12, r1	; 0x0c
    2eb2:	2c 89       	ldd	r18, Y+20	; 0x14
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	36 96       	adiw	r30, 0x06	; 6
    2eb8:	e4 91       	lpm	r30, Z
    2eba:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ebc:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ebe:	2e 9f       	mul	r18, r30
    2ec0:	80 0d       	add	r24, r0
    2ec2:	91 1d       	adc	r25, r1
    2ec4:	11 24       	eor	r1, r1
    2ec6:	9f 87       	std	Y+15, r25	; 0x0f
    2ec8:	8e 87       	std	Y+14, r24	; 0x0e
    2eca:	69 c0       	rjmp	.+210    	; 0x2f9e <_ZN12Adafruit_GFX5writeEh+0x194>
    2ecc:	6d 30       	cpi	r22, 0x0D	; 13
    2ece:	09 f4       	brne	.+2      	; 0x2ed2 <_ZN12Adafruit_GFX5writeEh+0xc8>
    2ed0:	66 c0       	rjmp	.+204    	; 0x2f9e <_ZN12Adafruit_GFX5writeEh+0x194>
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	34 96       	adiw	r30, 0x04	; 4
    2ed6:	34 91       	lpm	r19, Z
    2ed8:	63 17       	cp	r22, r19
    2eda:	08 f4       	brcc	.+2      	; 0x2ede <_ZN12Adafruit_GFX5writeEh+0xd4>
    2edc:	60 c0       	rjmp	.+192    	; 0x2f9e <_ZN12Adafruit_GFX5writeEh+0x194>
    2ede:	31 96       	adiw	r30, 0x01	; 1
    2ee0:	e4 91       	lpm	r30, Z
    2ee2:	e6 17       	cp	r30, r22
    2ee4:	08 f4       	brcc	.+2      	; 0x2ee8 <_ZN12Adafruit_GFX5writeEh+0xde>
    2ee6:	5b c0       	rjmp	.+182    	; 0x2f9e <_ZN12Adafruit_GFX5writeEh+0x194>
    2ee8:	fc 01       	movw	r30, r24
    2eea:	32 96       	adiw	r30, 0x02	; 2
    2eec:	65 91       	lpm	r22, Z+
    2eee:	74 91       	lpm	r23, Z
    2ef0:	42 2f       	mov	r20, r18
    2ef2:	50 e0       	ldi	r21, 0x00	; 0
    2ef4:	43 1b       	sub	r20, r19
    2ef6:	51 09       	sbc	r21, r1
    2ef8:	37 e0       	ldi	r19, 0x07	; 7
    2efa:	34 9f       	mul	r19, r20
    2efc:	50 01       	movw	r10, r0
    2efe:	35 9f       	mul	r19, r21
    2f00:	b0 0c       	add	r11, r0
    2f02:	11 24       	eor	r1, r1
    2f04:	a6 0e       	add	r10, r22
    2f06:	b7 1e       	adc	r11, r23
    2f08:	f5 01       	movw	r30, r10
    2f0a:	32 96       	adiw	r30, 0x02	; 2
    2f0c:	34 91       	lpm	r19, Z
    2f0e:	31 96       	adiw	r30, 0x01	; 1
    2f10:	e4 91       	lpm	r30, Z
    2f12:	33 23       	and	r19, r19
    2f14:	11 f0       	breq	.+4      	; 0x2f1a <_ZN12Adafruit_GFX5writeEh+0x110>
    2f16:	e1 11       	cpse	r30, r1
    2f18:	0d c0       	rjmp	.+26     	; 0x2f34 <_ZN12Adafruit_GFX5writeEh+0x12a>
    2f1a:	f5 01       	movw	r30, r10
    2f1c:	34 96       	adiw	r30, 0x04	; 4
    2f1e:	e4 91       	lpm	r30, Z
    2f20:	2c 89       	ldd	r18, Y+20	; 0x14
    2f22:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f24:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f26:	e2 9f       	mul	r30, r18
    2f28:	80 0d       	add	r24, r0
    2f2a:	91 1d       	adc	r25, r1
    2f2c:	11 24       	eor	r1, r1
    2f2e:	9d 87       	std	Y+13, r25	; 0x0d
    2f30:	8c 87       	std	Y+12, r24	; 0x0c
    2f32:	35 c0       	rjmp	.+106    	; 0x2f9e <_ZN12Adafruit_GFX5writeEh+0x194>
    2f34:	f5 01       	movw	r30, r10
    2f36:	35 96       	adiw	r30, 0x05	; 5
    2f38:	44 91       	lpm	r20, Z
    2f3a:	5e 89       	ldd	r21, Y+22	; 0x16
    2f3c:	55 23       	and	r21, r21
    2f3e:	11 f1       	breq	.+68     	; 0x2f84 <_ZN12Adafruit_GFX5writeEh+0x17a>
    2f40:	6c 89       	ldd	r22, Y+20	; 0x14
    2f42:	e3 2f       	mov	r30, r19
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	e4 0f       	add	r30, r20
    2f48:	f1 1d       	adc	r31, r1
    2f4a:	47 fd       	sbrc	r20, 7
    2f4c:	fa 95       	dec	r31
    2f4e:	6e 9f       	mul	r22, r30
    2f50:	d0 01       	movw	r26, r0
    2f52:	6f 9f       	mul	r22, r31
    2f54:	b0 0d       	add	r27, r0
    2f56:	11 24       	eor	r1, r1
    2f58:	4c 85       	ldd	r20, Y+12	; 0x0c
    2f5a:	5d 85       	ldd	r21, Y+13	; 0x0d
    2f5c:	4a 0f       	add	r20, r26
    2f5e:	5b 1f       	adc	r21, r27
    2f60:	e8 85       	ldd	r30, Y+8	; 0x08
    2f62:	f9 85       	ldd	r31, Y+9	; 0x09
    2f64:	e4 17       	cp	r30, r20
    2f66:	f5 07       	cpc	r31, r21
    2f68:	6c f4       	brge	.+26     	; 0x2f84 <_ZN12Adafruit_GFX5writeEh+0x17a>
    2f6a:	1d 86       	std	Y+13, r1	; 0x0d
    2f6c:	1c 86       	std	Y+12, r1	; 0x0c
    2f6e:	fc 01       	movw	r30, r24
    2f70:	36 96       	adiw	r30, 0x06	; 6
    2f72:	e4 91       	lpm	r30, Z
    2f74:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f76:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f78:	6e 9f       	mul	r22, r30
    2f7a:	80 0d       	add	r24, r0
    2f7c:	91 1d       	adc	r25, r1
    2f7e:	11 24       	eor	r1, r1
    2f80:	9f 87       	std	Y+15, r25	; 0x0f
    2f82:	8e 87       	std	Y+14, r24	; 0x0e
    2f84:	ea 88       	ldd	r14, Y+18	; 0x12
    2f86:	fb 88       	ldd	r15, Y+19	; 0x13
    2f88:	08 89       	ldd	r16, Y+16	; 0x10
    2f8a:	19 89       	ldd	r17, Y+17	; 0x11
    2f8c:	4e 85       	ldd	r20, Y+14	; 0x0e
    2f8e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2f90:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f92:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f94:	cc 88       	ldd	r12, Y+20	; 0x14
    2f96:	ce 01       	movw	r24, r28
    2f98:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <_ZN12Adafruit_GFX8drawCharEiihjjh>
    2f9c:	be cf       	rjmp	.-132    	; 0x2f1a <_ZN12Adafruit_GFX5writeEh+0x110>
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	df 91       	pop	r29
    2fa4:	cf 91       	pop	r28
    2fa6:	1f 91       	pop	r17
    2fa8:	0f 91       	pop	r16
    2faa:	ff 90       	pop	r15
    2fac:	ef 90       	pop	r14
    2fae:	cf 90       	pop	r12
    2fb0:	bf 90       	pop	r11
    2fb2:	af 90       	pop	r10
    2fb4:	08 95       	ret

00002fb6 <_ZN12Adafruit_GFX9setCursorEii>:
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	75 87       	std	Z+13, r23	; 0x0d
    2fba:	64 87       	std	Z+12, r22	; 0x0c
    2fbc:	57 87       	std	Z+15, r21	; 0x0f
    2fbe:	46 87       	std	Z+14, r20	; 0x0e
    2fc0:	08 95       	ret

00002fc2 <_ZN12Adafruit_GFX12setTextColorEj>:
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	73 8b       	std	Z+19, r23	; 0x13
    2fc6:	62 8b       	std	Z+18, r22	; 0x12
    2fc8:	71 8b       	std	Z+17, r23	; 0x11
    2fca:	60 8b       	std	Z+16, r22	; 0x10
    2fcc:	08 95       	ret

00002fce <_ZNK12Adafruit_GFX5widthEv>:

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) const {
    return _width;
}
    2fce:	fc 01       	movw	r30, r24
    2fd0:	80 85       	ldd	r24, Z+8	; 0x08
    2fd2:	91 85       	ldd	r25, Z+9	; 0x09
    2fd4:	08 95       	ret

00002fd6 <_ZNK12Adafruit_GFX6heightEv>:

int16_t Adafruit_GFX::height(void) const {
    return _height;
}
    2fd6:	fc 01       	movw	r30, r24
    2fd8:	82 85       	ldd	r24, Z+10	; 0x0a
    2fda:	93 85       	ldd	r25, Z+11	; 0x0b
    2fdc:	08 95       	ret

00002fde <_ZN15Adafruit_ST773510fillScreenEj>:
  CS_HIGH();

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)    SPI.endTransaction();
#endif
}
    2fde:	ef 92       	push	r14
    2fe0:	ff 92       	push	r15
    2fe2:	0f 93       	push	r16
    2fe4:	1f 93       	push	r17
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	1a 96       	adiw	r26, 0x0a	; 10
    2fea:	0d 91       	ld	r16, X+
    2fec:	1c 91       	ld	r17, X
    2fee:	1b 97       	sbiw	r26, 0x0b	; 11
    2ff0:	18 96       	adiw	r26, 0x08	; 8
    2ff2:	2d 91       	ld	r18, X+
    2ff4:	3c 91       	ld	r19, X
    2ff6:	19 97       	sbiw	r26, 0x09	; 9
    2ff8:	ed 91       	ld	r30, X+
    2ffa:	fc 91       	ld	r31, X
    2ffc:	00 a0       	ldd	r0, Z+32	; 0x20
    2ffe:	f1 a1       	ldd	r31, Z+33	; 0x21
    3000:	e0 2d       	mov	r30, r0
    3002:	7b 01       	movw	r14, r22
    3004:	40 e0       	ldi	r20, 0x00	; 0
    3006:	50 e0       	ldi	r21, 0x00	; 0
    3008:	60 e0       	ldi	r22, 0x00	; 0
    300a:	70 e0       	ldi	r23, 0x00	; 0
    300c:	09 95       	icall
    300e:	1f 91       	pop	r17
    3010:	0f 91       	pop	r16
    3012:	ff 90       	pop	r15
    3014:	ef 90       	pop	r14
    3016:	08 95       	ret

00003018 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    3018:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <_ZN8SPIClass13interruptModeE>
    301c:	22 23       	and	r18, r18
    301e:	99 f0       	breq	.+38     	; 0x3046 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    3020:	4f b7       	in	r20, 0x3f	; 63
    3022:	f8 94       	cli
    3024:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <_ZN8SPIClass13interruptModeE>
    3028:	21 30       	cpi	r18, 0x01	; 1
    302a:	59 f4       	brne	.+22     	; 0x3042 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    302c:	2d b3       	in	r18, 0x1d	; 29
    302e:	20 93 87 03 	sts	0x0387, r18	; 0x800387 <_ZN8SPIClass13interruptSaveE>
    3032:	3d b3       	in	r19, 0x1d	; 29
    3034:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <_ZN8SPIClass13interruptMaskE>
    3038:	20 95       	com	r18
    303a:	23 23       	and	r18, r19
    303c:	2d bb       	out	0x1d, r18	; 29
    303e:	4f bf       	out	0x3f, r20	; 63
    3040:	02 c0       	rjmp	.+4      	; 0x3046 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    3042:	40 93 87 03 	sts	0x0387, r20	; 0x800387 <_ZN8SPIClass13interruptSaveE>
    3046:	8c bd       	out	0x2c, r24	; 44
    3048:	9d bd       	out	0x2d, r25	; 45
    304a:	08 95       	ret

0000304c <_ZN8SPIClass14endTransactionEv>:
    304c:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <_ZN8SPIClass13interruptModeE>
    3050:	88 23       	and	r24, r24
    3052:	61 f0       	breq	.+24     	; 0x306c <_ZN8SPIClass14endTransactionEv+0x20>
    3054:	9f b7       	in	r25, 0x3f	; 63
    3056:	f8 94       	cli
    3058:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <_ZN8SPIClass13interruptModeE>
    305c:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <_ZN8SPIClass13interruptSaveE>
    3060:	21 30       	cpi	r18, 0x01	; 1
    3062:	19 f4       	brne	.+6      	; 0x306a <_ZN8SPIClass14endTransactionEv+0x1e>
    3064:	8d bb       	out	0x1d, r24	; 29
    3066:	9f bf       	out	0x3f, r25	; 63
    3068:	08 95       	ret
    306a:	8f bf       	out	0x3f, r24	; 63
    306c:	08 95       	ret

0000306e <_ZN15Adafruit_ST7735C1Eaaa>:
    306e:	ff 92       	push	r15
    3070:	0f 93       	push	r16
    3072:	1f 93       	push	r17
    3074:	cf 93       	push	r28
    3076:	df 93       	push	r29
    3078:	ec 01       	movw	r28, r24
    307a:	f6 2e       	mov	r15, r22
    307c:	04 2f       	mov	r16, r20
    307e:	12 2f       	mov	r17, r18
    3080:	40 ea       	ldi	r20, 0xA0	; 160
    3082:	50 e0       	ldi	r21, 0x00	; 0
    3084:	60 e8       	ldi	r22, 0x80	; 128
    3086:	70 e0       	ldi	r23, 0x00	; 0
    3088:	0e 94 ca 14 	call	0x2994	; 0x2994 <_ZN12Adafruit_GFXC1Eii>
    308c:	81 e7       	ldi	r24, 0x71	; 113
    308e:	91 e0       	ldi	r25, 0x01	; 1
    3090:	99 83       	std	Y+1, r25	; 0x01
    3092:	88 83       	st	Y, r24
    3094:	fc 8e       	std	Y+28, r15	; 0x1c
    3096:	0d 8f       	std	Y+29, r16	; 0x1d
    3098:	1e 8f       	std	Y+30, r17	; 0x1e
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	8b 8f       	std	Y+27, r24	; 0x1b
    309e:	8f ef       	ldi	r24, 0xFF	; 255
    30a0:	88 a3       	std	Y+32, r24	; 0x20
    30a2:	8f 8f       	std	Y+31, r24	; 0x1f
    30a4:	df 91       	pop	r29
    30a6:	cf 91       	pop	r28
    30a8:	1f 91       	pop	r17
    30aa:	0f 91       	pop	r16
    30ac:	ff 90       	pop	r15
    30ae:	08 95       	ret

000030b0 <_ZN15Adafruit_ST77358spiwriteEh>:
    30b0:	fc 01       	movw	r30, r24
    30b2:	83 8d       	ldd	r24, Z+27	; 0x1b
    30b4:	88 23       	and	r24, r24
    30b6:	39 f0       	breq	.+14     	; 0x30c6 <_ZN15Adafruit_ST77358spiwriteEh+0x16>
    30b8:	6e bd       	out	0x2e, r22	; 46
    30ba:	00 00       	nop
    30bc:	0d b4       	in	r0, 0x2d	; 45
    30be:	07 fe       	sbrs	r0, 7
    30c0:	fd cf       	rjmp	.-6      	; 0x30bc <_ZN15Adafruit_ST77358spiwriteEh+0xc>
    30c2:	8e b5       	in	r24, 0x2e	; 46
    30c4:	08 95       	ret
    30c6:	28 e0       	ldi	r18, 0x08	; 8
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	90 e8       	ldi	r25, 0x80	; 128
    30cc:	a5 a1       	ldd	r26, Z+37	; 0x25
    30ce:	b6 a1       	ldd	r27, Z+38	; 0x26
    30d0:	85 a5       	ldd	r24, Z+45	; 0x2d
    30d2:	46 2f       	mov	r20, r22
    30d4:	49 23       	and	r20, r25
    30d6:	19 f0       	breq	.+6      	; 0x30de <_ZN15Adafruit_ST77358spiwriteEh+0x2e>
    30d8:	4c 91       	ld	r20, X
    30da:	84 2b       	or	r24, r20
    30dc:	03 c0       	rjmp	.+6      	; 0x30e4 <_ZN15Adafruit_ST77358spiwriteEh+0x34>
    30de:	4c 91       	ld	r20, X
    30e0:	80 95       	com	r24
    30e2:	84 23       	and	r24, r20
    30e4:	8c 93       	st	X, r24
    30e6:	a7 a1       	ldd	r26, Z+39	; 0x27
    30e8:	b0 a5       	ldd	r27, Z+40	; 0x28
    30ea:	4c 91       	ld	r20, X
    30ec:	86 a5       	ldd	r24, Z+46	; 0x2e
    30ee:	84 2b       	or	r24, r20
    30f0:	8c 93       	st	X, r24
    30f2:	a7 a1       	ldd	r26, Z+39	; 0x27
    30f4:	b0 a5       	ldd	r27, Z+40	; 0x28
    30f6:	4c 91       	ld	r20, X
    30f8:	86 a5       	ldd	r24, Z+46	; 0x2e
    30fa:	80 95       	com	r24
    30fc:	84 23       	and	r24, r20
    30fe:	8c 93       	st	X, r24
    3100:	96 95       	lsr	r25
    3102:	21 50       	subi	r18, 0x01	; 1
    3104:	31 09       	sbc	r19, r1
    3106:	11 f7       	brne	.-60     	; 0x30cc <_ZN15Adafruit_ST77358spiwriteEh+0x1c>
    3108:	08 95       	ret

0000310a <_ZN15Adafruit_ST77357CS_HIGHEv>:
    310a:	dc 01       	movw	r26, r24
    310c:	99 96       	adiw	r26, 0x29	; 41
    310e:	ed 91       	ld	r30, X+
    3110:	fc 91       	ld	r31, X
    3112:	9a 97       	sbiw	r26, 0x2a	; 42
    3114:	90 81       	ld	r25, Z
    3116:	9f 96       	adiw	r26, 0x2f	; 47
    3118:	8c 91       	ld	r24, X
    311a:	89 2b       	or	r24, r25
    311c:	80 83       	st	Z, r24
    311e:	08 95       	ret

00003120 <_ZN15Adafruit_ST77356CS_LOWEv>:
    3120:	dc 01       	movw	r26, r24
    3122:	99 96       	adiw	r26, 0x29	; 41
    3124:	ed 91       	ld	r30, X+
    3126:	fc 91       	ld	r31, X
    3128:	9a 97       	sbiw	r26, 0x2a	; 42
    312a:	90 81       	ld	r25, Z
    312c:	9f 96       	adiw	r26, 0x2f	; 47
    312e:	8c 91       	ld	r24, X
    3130:	80 95       	com	r24
    3132:	89 23       	and	r24, r25
    3134:	80 83       	st	Z, r24
    3136:	08 95       	ret

00003138 <_ZN15Adafruit_ST773512writecommandEh>:
    3138:	1f 93       	push	r17
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
    313e:	ec 01       	movw	r28, r24
    3140:	16 2f       	mov	r17, r22
    3142:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3144:	88 23       	and	r24, r24
    3146:	31 f0       	breq	.+12     	; 0x3154 <_ZN15Adafruit_ST773512writecommandEh+0x1c>
    3148:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZL13mySPISettings>
    314c:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <_ZL13mySPISettings+0x1>
    3150:	0e 94 0c 18 	call	0x3018	; 0x3018 <_ZN8SPIClass16beginTransactionE11SPISettings>
    3154:	eb a5       	ldd	r30, Y+43	; 0x2b
    3156:	fc a5       	ldd	r31, Y+44	; 0x2c
    3158:	90 81       	ld	r25, Z
    315a:	88 a9       	ldd	r24, Y+48	; 0x30
    315c:	80 95       	com	r24
    315e:	89 23       	and	r24, r25
    3160:	80 83       	st	Z, r24
    3162:	ce 01       	movw	r24, r28
    3164:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN15Adafruit_ST77356CS_LOWEv>
    3168:	61 2f       	mov	r22, r17
    316a:	ce 01       	movw	r24, r28
    316c:	0e 94 58 18 	call	0x30b0	; 0x30b0 <_ZN15Adafruit_ST77358spiwriteEh>
    3170:	ce 01       	movw	r24, r28
    3172:	0e 94 85 18 	call	0x310a	; 0x310a <_ZN15Adafruit_ST77357CS_HIGHEv>
    3176:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3178:	88 23       	and	r24, r24
    317a:	29 f0       	breq	.+10     	; 0x3186 <_ZN15Adafruit_ST773512writecommandEh+0x4e>
    317c:	df 91       	pop	r29
    317e:	cf 91       	pop	r28
    3180:	1f 91       	pop	r17
    3182:	0c 94 26 18 	jmp	0x304c	; 0x304c <_ZN8SPIClass14endTransactionEv>
    3186:	df 91       	pop	r29
    3188:	cf 91       	pop	r28
    318a:	1f 91       	pop	r17
    318c:	08 95       	ret

0000318e <_ZN15Adafruit_ST773513invertDisplayEb>:
    318e:	61 11       	cpse	r22, r1
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <_ZN15Adafruit_ST773513invertDisplayEb+0x8>
    3192:	60 e2       	ldi	r22, 0x20	; 32
    3194:	01 c0       	rjmp	.+2      	; 0x3198 <_ZN15Adafruit_ST773513invertDisplayEb+0xa>
    3196:	61 e2       	ldi	r22, 0x21	; 33
    3198:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <_ZN15Adafruit_ST773512writecommandEh>

0000319c <_ZN15Adafruit_ST77357DC_HIGHEv>:
    319c:	dc 01       	movw	r26, r24
    319e:	9b 96       	adiw	r26, 0x2b	; 43
    31a0:	ed 91       	ld	r30, X+
    31a2:	fc 91       	ld	r31, X
    31a4:	9c 97       	sbiw	r26, 0x2c	; 44
    31a6:	90 81       	ld	r25, Z
    31a8:	d0 96       	adiw	r26, 0x30	; 48
    31aa:	8c 91       	ld	r24, X
    31ac:	89 2b       	or	r24, r25
    31ae:	80 83       	st	Z, r24
    31b0:	08 95       	ret

000031b2 <_ZN15Adafruit_ST77359writedataEh>:
    31b2:	1f 93       	push	r17
    31b4:	cf 93       	push	r28
    31b6:	df 93       	push	r29
    31b8:	ec 01       	movw	r28, r24
    31ba:	16 2f       	mov	r17, r22
    31bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31be:	88 23       	and	r24, r24
    31c0:	31 f0       	breq	.+12     	; 0x31ce <_ZN15Adafruit_ST77359writedataEh+0x1c>
    31c2:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZL13mySPISettings>
    31c6:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <_ZL13mySPISettings+0x1>
    31ca:	0e 94 0c 18 	call	0x3018	; 0x3018 <_ZN8SPIClass16beginTransactionE11SPISettings>
    31ce:	ce 01       	movw	r24, r28
    31d0:	0e 94 ce 18 	call	0x319c	; 0x319c <_ZN15Adafruit_ST77357DC_HIGHEv>
    31d4:	ce 01       	movw	r24, r28
    31d6:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN15Adafruit_ST77356CS_LOWEv>
    31da:	61 2f       	mov	r22, r17
    31dc:	ce 01       	movw	r24, r28
    31de:	0e 94 58 18 	call	0x30b0	; 0x30b0 <_ZN15Adafruit_ST77358spiwriteEh>
    31e2:	ce 01       	movw	r24, r28
    31e4:	0e 94 85 18 	call	0x310a	; 0x310a <_ZN15Adafruit_ST77357CS_HIGHEv>
    31e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31ea:	88 23       	and	r24, r24
    31ec:	29 f0       	breq	.+10     	; 0x31f8 <_ZN15Adafruit_ST77359writedataEh+0x46>
    31ee:	df 91       	pop	r29
    31f0:	cf 91       	pop	r28
    31f2:	1f 91       	pop	r17
    31f4:	0c 94 26 18 	jmp	0x304c	; 0x304c <_ZN8SPIClass14endTransactionEv>
    31f8:	df 91       	pop	r29
    31fa:	cf 91       	pop	r28
    31fc:	1f 91       	pop	r17
    31fe:	08 95       	ret

00003200 <_ZN15Adafruit_ST773511commandListEPKh>:
    3200:	af 92       	push	r10
    3202:	bf 92       	push	r11
    3204:	cf 92       	push	r12
    3206:	df 92       	push	r13
    3208:	ef 92       	push	r14
    320a:	ff 92       	push	r15
    320c:	0f 93       	push	r16
    320e:	1f 93       	push	r17
    3210:	cf 93       	push	r28
    3212:	df 93       	push	r29
    3214:	8c 01       	movw	r16, r24
    3216:	eb 01       	movw	r28, r22
    3218:	21 96       	adiw	r28, 0x01	; 1
    321a:	fb 01       	movw	r30, r22
    321c:	d4 90       	lpm	r13, Z
    321e:	dd 20       	and	r13, r13
    3220:	09 f4       	brne	.+2      	; 0x3224 <_ZN15Adafruit_ST773511commandListEPKh+0x24>
    3222:	37 c0       	rjmp	.+110    	; 0x3292 <_ZN15Adafruit_ST773511commandListEPKh+0x92>
    3224:	fe 01       	movw	r30, r28
    3226:	64 91       	lpm	r22, Z
    3228:	c8 01       	movw	r24, r16
    322a:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN15Adafruit_ST773512writecommandEh>
    322e:	7e 01       	movw	r14, r28
    3230:	f2 e0       	ldi	r31, 0x02	; 2
    3232:	ef 0e       	add	r14, r31
    3234:	f1 1c       	adc	r15, r1
    3236:	fe 01       	movw	r30, r28
    3238:	31 96       	adiw	r30, 0x01	; 1
    323a:	c4 91       	lpm	r28, Z
    323c:	8c 2f       	mov	r24, r28
    323e:	80 78       	andi	r24, 0x80	; 128
    3240:	c8 2e       	mov	r12, r24
    3242:	cf 77       	andi	r28, 0x7F	; 127
    3244:	57 01       	movw	r10, r14
    3246:	dc 2f       	mov	r29, r28
    3248:	d1 50       	subi	r29, 0x01	; 1
    324a:	48 f0       	brcs	.+18     	; 0x325e <_ZN15Adafruit_ST773511commandListEPKh+0x5e>
    324c:	f5 01       	movw	r30, r10
    324e:	64 91       	lpm	r22, Z
    3250:	c8 01       	movw	r24, r16
    3252:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN15Adafruit_ST77359writedataEh>
    3256:	ff ef       	ldi	r31, 0xFF	; 255
    3258:	af 1a       	sub	r10, r31
    325a:	bf 0a       	sbc	r11, r31
    325c:	f5 cf       	rjmp	.-22     	; 0x3248 <_ZN15Adafruit_ST773511commandListEPKh+0x48>
    325e:	c7 01       	movw	r24, r14
    3260:	8c 0f       	add	r24, r28
    3262:	91 1d       	adc	r25, r1
    3264:	ec 01       	movw	r28, r24
    3266:	c1 10       	cpse	r12, r1
    3268:	02 c0       	rjmp	.+4      	; 0x326e <_ZN15Adafruit_ST773511commandListEPKh+0x6e>
    326a:	da 94       	dec	r13
    326c:	d8 cf       	rjmp	.-80     	; 0x321e <_ZN15Adafruit_ST773511commandListEPKh+0x1e>
    326e:	7c 01       	movw	r14, r24
    3270:	9f ef       	ldi	r25, 0xFF	; 255
    3272:	e9 1a       	sub	r14, r25
    3274:	f9 0a       	sbc	r15, r25
    3276:	fe 01       	movw	r30, r28
    3278:	64 91       	lpm	r22, Z
    327a:	70 e0       	ldi	r23, 0x00	; 0
    327c:	6f 3f       	cpi	r22, 0xFF	; 255
    327e:	71 05       	cpc	r23, r1
    3280:	11 f4       	brne	.+4      	; 0x3286 <_ZN15Adafruit_ST773511commandListEPKh+0x86>
    3282:	64 ef       	ldi	r22, 0xF4	; 244
    3284:	71 e0       	ldi	r23, 0x01	; 1
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	0e 94 76 10 	call	0x20ec	; 0x20ec <delay>
    328e:	e7 01       	movw	r28, r14
    3290:	ec cf       	rjmp	.-40     	; 0x326a <_ZN15Adafruit_ST773511commandListEPKh+0x6a>
    3292:	df 91       	pop	r29
    3294:	cf 91       	pop	r28
    3296:	1f 91       	pop	r17
    3298:	0f 91       	pop	r16
    329a:	ff 90       	pop	r15
    329c:	ef 90       	pop	r14
    329e:	df 90       	pop	r13
    32a0:	cf 90       	pop	r12
    32a2:	bf 90       	pop	r11
    32a4:	af 90       	pop	r10
    32a6:	08 95       	ret

000032a8 <_ZN15Adafruit_ST773510commonInitEPKh>:
    32a8:	0f 93       	push	r16
    32aa:	1f 93       	push	r17
    32ac:	cf 93       	push	r28
    32ae:	df 93       	push	r29
    32b0:	ec 01       	movw	r28, r24
    32b2:	8b 01       	movw	r16, r22
    32b4:	1a a2       	std	Y+34, r1	; 0x22
    32b6:	19 a2       	std	Y+33, r1	; 0x21
    32b8:	1b a2       	std	Y+35, r1	; 0x23
    32ba:	1c a2       	std	Y+36, r1	; 0x24
    32bc:	61 e0       	ldi	r22, 0x01	; 1
    32be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32c0:	0e 94 16 11 	call	0x222c	; 0x222c <pinMode>
    32c4:	61 e0       	ldi	r22, 0x01	; 1
    32c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32c8:	0e 94 16 11 	call	0x222c	; 0x222c <pinMode>
    32cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32ce:	08 2e       	mov	r0, r24
    32d0:	00 0c       	add	r0, r0
    32d2:	99 0b       	sbc	r25, r25
    32d4:	fc 01       	movw	r30, r24
    32d6:	e4 52       	subi	r30, 0x24	; 36
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	e4 91       	lpm	r30, Z
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	ee 0f       	add	r30, r30
    32e0:	ff 1f       	adc	r31, r31
    32e2:	e0 51       	subi	r30, 0x10	; 16
    32e4:	ff 4f       	sbci	r31, 0xFF	; 255
    32e6:	25 91       	lpm	r18, Z+
    32e8:	34 91       	lpm	r19, Z
    32ea:	3a a7       	std	Y+42, r19	; 0x2a
    32ec:	29 a7       	std	Y+41, r18	; 0x29
    32ee:	2d 8d       	ldd	r18, Y+29	; 0x1d
    32f0:	02 2e       	mov	r0, r18
    32f2:	00 0c       	add	r0, r0
    32f4:	33 0b       	sbc	r19, r19
    32f6:	f9 01       	movw	r30, r18
    32f8:	e4 52       	subi	r30, 0x24	; 36
    32fa:	ff 4f       	sbci	r31, 0xFF	; 255
    32fc:	e4 91       	lpm	r30, Z
    32fe:	f0 e0       	ldi	r31, 0x00	; 0
    3300:	ee 0f       	add	r30, r30
    3302:	ff 1f       	adc	r31, r31
    3304:	e0 51       	subi	r30, 0x10	; 16
    3306:	ff 4f       	sbci	r31, 0xFF	; 255
    3308:	45 91       	lpm	r20, Z+
    330a:	54 91       	lpm	r21, Z
    330c:	5c a7       	std	Y+44, r21	; 0x2c
    330e:	4b a7       	std	Y+43, r20	; 0x2b
    3310:	fc 01       	movw	r30, r24
    3312:	e8 53       	subi	r30, 0x38	; 56
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	e4 91       	lpm	r30, Z
    3318:	ef a7       	std	Y+47, r30	; 0x2f
    331a:	f9 01       	movw	r30, r18
    331c:	e8 53       	subi	r30, 0x38	; 56
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	e4 91       	lpm	r30, Z
    3322:	e8 ab       	std	Y+48, r30	; 0x30
    3324:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3326:	88 23       	and	r24, r24
    3328:	49 f0       	breq	.+18     	; 0x333c <_ZN15Adafruit_ST773510commonInitEPKh+0x94>
    332a:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN8SPIClass5beginEv>
    332e:	80 e5       	ldi	r24, 0x50	; 80
    3330:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <_ZL13mySPISettings>
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <_ZL13mySPISettings+0x1>
    333a:	3c c0       	rjmp	.+120    	; 0x33b4 <_ZN15Adafruit_ST773510commonInitEPKh+0x10c>
    333c:	61 e0       	ldi	r22, 0x01	; 1
    333e:	88 a1       	ldd	r24, Y+32	; 0x20
    3340:	0e 94 16 11 	call	0x222c	; 0x222c <pinMode>
    3344:	61 e0       	ldi	r22, 0x01	; 1
    3346:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3348:	0e 94 16 11 	call	0x222c	; 0x222c <pinMode>
    334c:	60 e0       	ldi	r22, 0x00	; 0
    334e:	88 a1       	ldd	r24, Y+32	; 0x20
    3350:	0e 94 52 11 	call	0x22a4	; 0x22a4 <digitalWrite>
    3354:	60 e0       	ldi	r22, 0x00	; 0
    3356:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3358:	0e 94 52 11 	call	0x22a4	; 0x22a4 <digitalWrite>
    335c:	88 a1       	ldd	r24, Y+32	; 0x20
    335e:	08 2e       	mov	r0, r24
    3360:	00 0c       	add	r0, r0
    3362:	99 0b       	sbc	r25, r25
    3364:	fc 01       	movw	r30, r24
    3366:	e4 52       	subi	r30, 0x24	; 36
    3368:	ff 4f       	sbci	r31, 0xFF	; 255
    336a:	e4 91       	lpm	r30, Z
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	ee 0f       	add	r30, r30
    3370:	ff 1f       	adc	r31, r31
    3372:	e0 51       	subi	r30, 0x10	; 16
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	25 91       	lpm	r18, Z+
    3378:	34 91       	lpm	r19, Z
    337a:	38 a7       	std	Y+40, r19	; 0x28
    337c:	2f a3       	std	Y+39, r18	; 0x27
    337e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3380:	02 2e       	mov	r0, r18
    3382:	00 0c       	add	r0, r0
    3384:	33 0b       	sbc	r19, r19
    3386:	f9 01       	movw	r30, r18
    3388:	e4 52       	subi	r30, 0x24	; 36
    338a:	ff 4f       	sbci	r31, 0xFF	; 255
    338c:	e4 91       	lpm	r30, Z
    338e:	f0 e0       	ldi	r31, 0x00	; 0
    3390:	ee 0f       	add	r30, r30
    3392:	ff 1f       	adc	r31, r31
    3394:	e0 51       	subi	r30, 0x10	; 16
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	45 91       	lpm	r20, Z+
    339a:	54 91       	lpm	r21, Z
    339c:	5e a3       	std	Y+38, r21	; 0x26
    339e:	4d a3       	std	Y+37, r20	; 0x25
    33a0:	fc 01       	movw	r30, r24
    33a2:	e8 53       	subi	r30, 0x38	; 56
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	e4 91       	lpm	r30, Z
    33a8:	ee a7       	std	Y+46, r30	; 0x2e
    33aa:	f9 01       	movw	r30, r18
    33ac:	e8 53       	subi	r30, 0x38	; 56
    33ae:	ff 4f       	sbci	r31, 0xFF	; 255
    33b0:	e4 91       	lpm	r30, Z
    33b2:	ed a7       	std	Y+45, r30	; 0x2d
    33b4:	ce 01       	movw	r24, r28
    33b6:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN15Adafruit_ST77356CS_LOWEv>
    33ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33bc:	8f 3f       	cpi	r24, 0xFF	; 255
    33be:	09 f1       	breq	.+66     	; 0x3402 <_ZN15Adafruit_ST773510commonInitEPKh+0x15a>
    33c0:	61 e0       	ldi	r22, 0x01	; 1
    33c2:	0e 94 16 11 	call	0x222c	; 0x222c <pinMode>
    33c6:	61 e0       	ldi	r22, 0x01	; 1
    33c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33ca:	0e 94 52 11 	call	0x22a4	; 0x22a4 <digitalWrite>
    33ce:	64 ef       	ldi	r22, 0xF4	; 244
    33d0:	71 e0       	ldi	r23, 0x01	; 1
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	0e 94 76 10 	call	0x20ec	; 0x20ec <delay>
    33da:	60 e0       	ldi	r22, 0x00	; 0
    33dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33de:	0e 94 52 11 	call	0x22a4	; 0x22a4 <digitalWrite>
    33e2:	64 ef       	ldi	r22, 0xF4	; 244
    33e4:	71 e0       	ldi	r23, 0x01	; 1
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	0e 94 76 10 	call	0x20ec	; 0x20ec <delay>
    33ee:	61 e0       	ldi	r22, 0x01	; 1
    33f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33f2:	0e 94 52 11 	call	0x22a4	; 0x22a4 <digitalWrite>
    33f6:	64 ef       	ldi	r22, 0xF4	; 244
    33f8:	71 e0       	ldi	r23, 0x01	; 1
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	0e 94 76 10 	call	0x20ec	; 0x20ec <delay>
    3402:	01 15       	cp	r16, r1
    3404:	11 05       	cpc	r17, r1
    3406:	41 f0       	breq	.+16     	; 0x3418 <_ZN15Adafruit_ST773510commonInitEPKh+0x170>
    3408:	b8 01       	movw	r22, r16
    340a:	ce 01       	movw	r24, r28
    340c:	df 91       	pop	r29
    340e:	cf 91       	pop	r28
    3410:	1f 91       	pop	r17
    3412:	0f 91       	pop	r16
    3414:	0c 94 00 19 	jmp	0x3200	; 0x3200 <_ZN15Adafruit_ST773511commandListEPKh>
    3418:	df 91       	pop	r29
    341a:	cf 91       	pop	r28
    341c:	1f 91       	pop	r17
    341e:	0f 91       	pop	r16
    3420:	08 95       	ret

00003422 <_ZN15Adafruit_ST77355initREh>:
    3422:	1f 93       	push	r17
    3424:	cf 93       	push	r28
    3426:	df 93       	push	r29
    3428:	ec 01       	movw	r28, r24
    342a:	16 2f       	mov	r17, r22
    342c:	63 e6       	ldi	r22, 0x63	; 99
    342e:	76 e0       	ldi	r23, 0x06	; 6
    3430:	0e 94 54 19 	call	0x32a8	; 0x32a8 <_ZN15Adafruit_ST773510commonInitEPKh>
    3434:	11 11       	cpse	r17, r1
    3436:	09 c0       	rjmp	.+18     	; 0x344a <_ZN15Adafruit_ST77355initREh+0x28>
    3438:	66 e5       	ldi	r22, 0x56	; 86
    343a:	76 e0       	ldi	r23, 0x06	; 6
    343c:	ce 01       	movw	r24, r28
    343e:	0e 94 00 19 	call	0x3200	; 0x3200 <_ZN15Adafruit_ST773511commandListEPKh>
    3442:	82 e0       	ldi	r24, 0x02	; 2
    3444:	89 a3       	std	Y+33, r24	; 0x21
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	10 c0       	rjmp	.+32     	; 0x346a <_ZN15Adafruit_ST77355initREh+0x48>
    344a:	11 30       	cpi	r17, 0x01	; 1
    344c:	81 f4       	brne	.+32     	; 0x346e <_ZN15Adafruit_ST77355initREh+0x4c>
    344e:	80 e8       	ldi	r24, 0x80	; 128
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	9b 87       	std	Y+11, r25	; 0x0b
    3454:	8a 87       	std	Y+10, r24	; 0x0a
    3456:	99 87       	std	Y+9, r25	; 0x09
    3458:	88 87       	std	Y+8, r24	; 0x08
    345a:	6c e3       	ldi	r22, 0x3C	; 60
    345c:	76 e0       	ldi	r23, 0x06	; 6
    345e:	ce 01       	movw	r24, r28
    3460:	0e 94 00 19 	call	0x3200	; 0x3200 <_ZN15Adafruit_ST773511commandListEPKh>
    3464:	82 e0       	ldi	r24, 0x02	; 2
    3466:	89 a3       	std	Y+33, r24	; 0x21
    3468:	83 e0       	ldi	r24, 0x03	; 3
    346a:	8a a3       	std	Y+34, r24	; 0x22
    346c:	18 c0       	rjmp	.+48     	; 0x349e <_ZN15Adafruit_ST77355initREh+0x7c>
    346e:	14 30       	cpi	r17, 0x04	; 4
    3470:	89 f4       	brne	.+34     	; 0x3494 <_ZN15Adafruit_ST77355initREh+0x72>
    3472:	80 ea       	ldi	r24, 0xA0	; 160
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	9b 87       	std	Y+11, r25	; 0x0b
    3478:	8a 87       	std	Y+10, r24	; 0x0a
    347a:	80 e5       	ldi	r24, 0x50	; 80
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	99 87       	std	Y+9, r25	; 0x09
    3480:	88 87       	std	Y+8, r24	; 0x08
    3482:	6f e2       	ldi	r22, 0x2F	; 47
    3484:	76 e0       	ldi	r23, 0x06	; 6
    3486:	ce 01       	movw	r24, r28
    3488:	0e 94 00 19 	call	0x3200	; 0x3200 <_ZN15Adafruit_ST773511commandListEPKh>
    348c:	88 e1       	ldi	r24, 0x18	; 24
    348e:	89 a3       	std	Y+33, r24	; 0x21
    3490:	1a a2       	std	Y+34, r1	; 0x22
    3492:	05 c0       	rjmp	.+10     	; 0x349e <_ZN15Adafruit_ST77355initREh+0x7c>
    3494:	69 e4       	ldi	r22, 0x49	; 73
    3496:	76 e0       	ldi	r23, 0x06	; 6
    3498:	ce 01       	movw	r24, r28
    349a:	0e 94 00 19 	call	0x3200	; 0x3200 <_ZN15Adafruit_ST773511commandListEPKh>
    349e:	64 e0       	ldi	r22, 0x04	; 4
    34a0:	76 e0       	ldi	r23, 0x06	; 6
    34a2:	ce 01       	movw	r24, r28
    34a4:	0e 94 00 19 	call	0x3200	; 0x3200 <_ZN15Adafruit_ST773511commandListEPKh>
    34a8:	12 30       	cpi	r17, 0x02	; 2
    34aa:	11 f0       	breq	.+4      	; 0x34b0 <_ZN15Adafruit_ST77355initREh+0x8e>
    34ac:	14 30       	cpi	r17, 0x04	; 4
    34ae:	41 f4       	brne	.+16     	; 0x34c0 <_ZN15Adafruit_ST77355initREh+0x9e>
    34b0:	66 e3       	ldi	r22, 0x36	; 54
    34b2:	ce 01       	movw	r24, r28
    34b4:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN15Adafruit_ST773512writecommandEh>
    34b8:	60 ec       	ldi	r22, 0xC0	; 192
    34ba:	ce 01       	movw	r24, r28
    34bc:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN15Adafruit_ST77359writedataEh>
    34c0:	1a 8f       	std	Y+26, r17	; 0x1a
    34c2:	e8 81       	ld	r30, Y
    34c4:	f9 81       	ldd	r31, Y+1	; 0x01
    34c6:	00 8c       	ldd	r0, Z+24	; 0x18
    34c8:	f1 8d       	ldd	r31, Z+25	; 0x19
    34ca:	e0 2d       	mov	r30, r0
    34cc:	60 e0       	ldi	r22, 0x00	; 0
    34ce:	ce 01       	movw	r24, r28
    34d0:	df 91       	pop	r29
    34d2:	cf 91       	pop	r28
    34d4:	1f 91       	pop	r17
    34d6:	09 94       	ijmp

000034d8 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>:
    34d8:	ef 92       	push	r14
    34da:	ff 92       	push	r15
    34dc:	0f 93       	push	r16
    34de:	1f 93       	push	r17
    34e0:	cf 93       	push	r28
    34e2:	df 93       	push	r29
    34e4:	ec 01       	movw	r28, r24
    34e6:	e6 2e       	mov	r14, r22
    34e8:	14 2f       	mov	r17, r20
    34ea:	f2 2e       	mov	r15, r18
    34ec:	6a e2       	ldi	r22, 0x2A	; 42
    34ee:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN15Adafruit_ST773512writecommandEh>
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	ce 01       	movw	r24, r28
    34f6:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN15Adafruit_ST77359writedataEh>
    34fa:	6b a1       	ldd	r22, Y+35	; 0x23
    34fc:	6e 0d       	add	r22, r14
    34fe:	ce 01       	movw	r24, r28
    3500:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN15Adafruit_ST77359writedataEh>
    3504:	60 e0       	ldi	r22, 0x00	; 0
    3506:	ce 01       	movw	r24, r28
    3508:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN15Adafruit_ST77359writedataEh>
    350c:	6b a1       	ldd	r22, Y+35	; 0x23
    350e:	6f 0d       	add	r22, r15
    3510:	ce 01       	movw	r24, r28
    3512:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN15Adafruit_ST77359writedataEh>
    3516:	6b e2       	ldi	r22, 0x2B	; 43
    3518:	ce 01       	movw	r24, r28
    351a:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN15Adafruit_ST773512writecommandEh>
    351e:	60 e0       	ldi	r22, 0x00	; 0
    3520:	ce 01       	movw	r24, r28
    3522:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN15Adafruit_ST77359writedataEh>
    3526:	6c a1       	ldd	r22, Y+36	; 0x24
    3528:	61 0f       	add	r22, r17
    352a:	ce 01       	movw	r24, r28
    352c:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN15Adafruit_ST77359writedataEh>
    3530:	60 e0       	ldi	r22, 0x00	; 0
    3532:	ce 01       	movw	r24, r28
    3534:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN15Adafruit_ST77359writedataEh>
    3538:	6c a1       	ldd	r22, Y+36	; 0x24
    353a:	60 0f       	add	r22, r16
    353c:	ce 01       	movw	r24, r28
    353e:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN15Adafruit_ST77359writedataEh>
    3542:	6c e2       	ldi	r22, 0x2C	; 44
    3544:	ce 01       	movw	r24, r28
    3546:	df 91       	pop	r29
    3548:	cf 91       	pop	r28
    354a:	1f 91       	pop	r17
    354c:	0f 91       	pop	r16
    354e:	ff 90       	pop	r15
    3550:	ef 90       	pop	r14
    3552:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <_ZN15Adafruit_ST773512writecommandEh>

00003556 <_ZN15Adafruit_ST773511setRotationEh>:
    3556:	1f 93       	push	r17
    3558:	cf 93       	push	r28
    355a:	df 93       	push	r29
    355c:	ec 01       	movw	r28, r24
    355e:	16 2f       	mov	r17, r22
    3560:	66 e3       	ldi	r22, 0x36	; 54
    3562:	0e 94 9c 18 	call	0x3138	; 0x3138 <_ZN15Adafruit_ST773512writecommandEh>
    3566:	61 2f       	mov	r22, r17
    3568:	63 70       	andi	r22, 0x03	; 3
    356a:	6d 8b       	std	Y+21, r22	; 0x15
    356c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    356e:	62 30       	cpi	r22, 0x02	; 2
    3570:	a1 f0       	breq	.+40     	; 0x359a <_ZN15Adafruit_ST773511setRotationEh+0x44>
    3572:	63 30       	cpi	r22, 0x03	; 3
    3574:	d1 f1       	breq	.+116    	; 0x35ea <_ZN15Adafruit_ST773511setRotationEh+0x94>
    3576:	61 30       	cpi	r22, 0x01	; 1
    3578:	41 f0       	breq	.+16     	; 0x358a <_ZN15Adafruit_ST773511setRotationEh+0x34>
    357a:	82 30       	cpi	r24, 0x02	; 2
    357c:	11 f0       	breq	.+4      	; 0x3582 <_ZN15Adafruit_ST773511setRotationEh+0x2c>
    357e:	84 30       	cpi	r24, 0x04	; 4
    3580:	11 f4       	brne	.+4      	; 0x3586 <_ZN15Adafruit_ST773511setRotationEh+0x30>
    3582:	60 ec       	ldi	r22, 0xC0	; 192
    3584:	11 c0       	rjmp	.+34     	; 0x35a8 <_ZN15Adafruit_ST773511setRotationEh+0x52>
    3586:	68 ec       	ldi	r22, 0xC8	; 200
    3588:	0f c0       	rjmp	.+30     	; 0x35a8 <_ZN15Adafruit_ST773511setRotationEh+0x52>
    358a:	82 30       	cpi	r24, 0x02	; 2
    358c:	11 f0       	breq	.+4      	; 0x3592 <_ZN15Adafruit_ST773511setRotationEh+0x3c>
    358e:	84 30       	cpi	r24, 0x04	; 4
    3590:	11 f4       	brne	.+4      	; 0x3596 <_ZN15Adafruit_ST773511setRotationEh+0x40>
    3592:	60 ea       	ldi	r22, 0xA0	; 160
    3594:	31 c0       	rjmp	.+98     	; 0x35f8 <_ZN15Adafruit_ST773511setRotationEh+0xa2>
    3596:	68 ea       	ldi	r22, 0xA8	; 168
    3598:	2f c0       	rjmp	.+94     	; 0x35f8 <_ZN15Adafruit_ST773511setRotationEh+0xa2>
    359a:	82 30       	cpi	r24, 0x02	; 2
    359c:	11 f0       	breq	.+4      	; 0x35a2 <_ZN15Adafruit_ST773511setRotationEh+0x4c>
    359e:	84 30       	cpi	r24, 0x04	; 4
    35a0:	11 f4       	brne	.+4      	; 0x35a6 <_ZN15Adafruit_ST773511setRotationEh+0x50>
    35a2:	60 e0       	ldi	r22, 0x00	; 0
    35a4:	01 c0       	rjmp	.+2      	; 0x35a8 <_ZN15Adafruit_ST773511setRotationEh+0x52>
    35a6:	68 e0       	ldi	r22, 0x08	; 8
    35a8:	ce 01       	movw	r24, r28
    35aa:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN15Adafruit_ST77359writedataEh>
    35ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35b0:	81 30       	cpi	r24, 0x01	; 1
    35b2:	29 f4       	brne	.+10     	; 0x35be <_ZN15Adafruit_ST773511setRotationEh+0x68>
    35b4:	80 e8       	ldi	r24, 0x80	; 128
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	9b 87       	std	Y+11, r25	; 0x0b
    35ba:	8a 87       	std	Y+10, r24	; 0x0a
    35bc:	0f c0       	rjmp	.+30     	; 0x35dc <_ZN15Adafruit_ST773511setRotationEh+0x86>
    35be:	84 30       	cpi	r24, 0x04	; 4
    35c0:	39 f4       	brne	.+14     	; 0x35d0 <_ZN15Adafruit_ST773511setRotationEh+0x7a>
    35c2:	80 ea       	ldi	r24, 0xA0	; 160
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	9b 87       	std	Y+11, r25	; 0x0b
    35c8:	8a 87       	std	Y+10, r24	; 0x0a
    35ca:	80 e5       	ldi	r24, 0x50	; 80
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	06 c0       	rjmp	.+12     	; 0x35dc <_ZN15Adafruit_ST773511setRotationEh+0x86>
    35d0:	80 ea       	ldi	r24, 0xA0	; 160
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	9b 87       	std	Y+11, r25	; 0x0b
    35d6:	8a 87       	std	Y+10, r24	; 0x0a
    35d8:	80 e8       	ldi	r24, 0x80	; 128
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	99 87       	std	Y+9, r25	; 0x09
    35de:	88 87       	std	Y+8, r24	; 0x08
    35e0:	89 a1       	ldd	r24, Y+33	; 0x21
    35e2:	8b a3       	std	Y+35, r24	; 0x23
    35e4:	8a a1       	ldd	r24, Y+34	; 0x22
    35e6:	8c a3       	std	Y+36, r24	; 0x24
    35e8:	27 c0       	rjmp	.+78     	; 0x3638 <_ZN15Adafruit_ST773511setRotationEh+0xe2>
    35ea:	82 30       	cpi	r24, 0x02	; 2
    35ec:	11 f0       	breq	.+4      	; 0x35f2 <_ZN15Adafruit_ST773511setRotationEh+0x9c>
    35ee:	84 30       	cpi	r24, 0x04	; 4
    35f0:	11 f4       	brne	.+4      	; 0x35f6 <_ZN15Adafruit_ST773511setRotationEh+0xa0>
    35f2:	60 e6       	ldi	r22, 0x60	; 96
    35f4:	01 c0       	rjmp	.+2      	; 0x35f8 <_ZN15Adafruit_ST773511setRotationEh+0xa2>
    35f6:	68 e6       	ldi	r22, 0x68	; 104
    35f8:	ce 01       	movw	r24, r28
    35fa:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN15Adafruit_ST77359writedataEh>
    35fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3600:	81 30       	cpi	r24, 0x01	; 1
    3602:	29 f4       	brne	.+10     	; 0x360e <_ZN15Adafruit_ST773511setRotationEh+0xb8>
    3604:	80 e8       	ldi	r24, 0x80	; 128
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	99 87       	std	Y+9, r25	; 0x09
    360a:	88 87       	std	Y+8, r24	; 0x08
    360c:	0f c0       	rjmp	.+30     	; 0x362c <_ZN15Adafruit_ST773511setRotationEh+0xd6>
    360e:	84 30       	cpi	r24, 0x04	; 4
    3610:	39 f4       	brne	.+14     	; 0x3620 <_ZN15Adafruit_ST773511setRotationEh+0xca>
    3612:	80 ea       	ldi	r24, 0xA0	; 160
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	99 87       	std	Y+9, r25	; 0x09
    3618:	88 87       	std	Y+8, r24	; 0x08
    361a:	80 e5       	ldi	r24, 0x50	; 80
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	06 c0       	rjmp	.+12     	; 0x362c <_ZN15Adafruit_ST773511setRotationEh+0xd6>
    3620:	80 ea       	ldi	r24, 0xA0	; 160
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	99 87       	std	Y+9, r25	; 0x09
    3626:	88 87       	std	Y+8, r24	; 0x08
    3628:	80 e8       	ldi	r24, 0x80	; 128
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	9b 87       	std	Y+11, r25	; 0x0b
    362e:	8a 87       	std	Y+10, r24	; 0x0a
    3630:	89 a1       	ldd	r24, Y+33	; 0x21
    3632:	8c a3       	std	Y+36, r24	; 0x24
    3634:	8a a1       	ldd	r24, Y+34	; 0x22
    3636:	8b a3       	std	Y+35, r24	; 0x23
    3638:	df 91       	pop	r29
    363a:	cf 91       	pop	r28
    363c:	1f 91       	pop	r17
    363e:	08 95       	ret

00003640 <_ZN15Adafruit_ST773513drawFastHLineEiiij>:
#endif
}


void Adafruit_ST7735::drawFastHLine(int16_t x, int16_t y, int16_t w,
  uint16_t color) {
    3640:	df 92       	push	r13
    3642:	ef 92       	push	r14
    3644:	ff 92       	push	r15
    3646:	0f 93       	push	r16
    3648:	1f 93       	push	r17
    364a:	cf 93       	push	r28
    364c:	df 93       	push	r29
    364e:	ec 01       	movw	r28, r24
    3650:	79 01       	movw	r14, r18
    3652:	d0 2e       	mov	r13, r16

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
    3654:	88 85       	ldd	r24, Y+8	; 0x08
    3656:	99 85       	ldd	r25, Y+9	; 0x09
    3658:	68 17       	cp	r22, r24
    365a:	79 07       	cpc	r23, r25
    365c:	0c f0       	brlt	.+2      	; 0x3660 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x20>
    365e:	42 c0       	rjmp	.+132    	; 0x36e4 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xa4>
    3660:	2a 85       	ldd	r18, Y+10	; 0x0a
    3662:	3b 85       	ldd	r19, Y+11	; 0x0b
    3664:	42 17       	cp	r20, r18
    3666:	53 07       	cpc	r21, r19
    3668:	ec f5       	brge	.+122    	; 0x36e4 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xa4>
  if((x+w-1) >= _width)  w = _width-x;
    366a:	9b 01       	movw	r18, r22
    366c:	2e 0d       	add	r18, r14
    366e:	3f 1d       	adc	r19, r15
    3670:	82 17       	cp	r24, r18
    3672:	93 07       	cpc	r25, r19
    3674:	1c f4       	brge	.+6      	; 0x367c <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x3c>
    3676:	7c 01       	movw	r14, r24
    3678:	e6 1a       	sub	r14, r22
    367a:	f7 0a       	sbc	r15, r23
  setAddrWindow(x, y, x+w-1, y);
    367c:	2f ef       	ldi	r18, 0xFF	; 255
    367e:	26 0f       	add	r18, r22
    3680:	2e 0d       	add	r18, r14
    3682:	04 2f       	mov	r16, r20
    3684:	ce 01       	movw	r24, r28
    3686:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.beginTransaction(mySPISettings);
    368a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    368c:	88 23       	and	r24, r24
    368e:	31 f0       	breq	.+12     	; 0x369c <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x5c>
    3690:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZL13mySPISettings>
    3694:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <_ZL13mySPISettings+0x1>
    3698:	0e 94 0c 18 	call	0x3018	; 0x3018 <_ZN8SPIClass16beginTransactionE11SPISettings>
#endif

  DC_HIGH();
    369c:	ce 01       	movw	r24, r28
    369e:	0e 94 ce 18 	call	0x319c	; 0x319c <_ZN15Adafruit_ST77357DC_HIGHEv>
  CS_LOW();
    36a2:	ce 01       	movw	r24, r28
    36a4:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN15Adafruit_ST77356CS_LOWEv>
  while (w--) {
    36a8:	e1 14       	cp	r14, r1
    36aa:	f1 04       	cpc	r15, r1
    36ac:	61 f0       	breq	.+24     	; 0x36c6 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x86>
    spiwrite(hi);
    36ae:	61 2f       	mov	r22, r17
    36b0:	ce 01       	movw	r24, r28
    36b2:	0e 94 58 18 	call	0x30b0	; 0x30b0 <_ZN15Adafruit_ST77358spiwriteEh>
    spiwrite(lo);
    36b6:	6d 2d       	mov	r22, r13
    36b8:	ce 01       	movw	r24, r28
    36ba:	0e 94 58 18 	call	0x30b0	; 0x30b0 <_ZN15Adafruit_ST77358spiwriteEh>
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	e8 1a       	sub	r14, r24
    36c2:	f1 08       	sbc	r15, r1
  if (hwSPI)      SPI.beginTransaction(mySPISettings);
#endif

  DC_HIGH();
  CS_LOW();
  while (w--) {
    36c4:	f1 cf       	rjmp	.-30     	; 0x36a8 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x68>
    spiwrite(hi);
    spiwrite(lo);
  }
  CS_HIGH();
    36c6:	ce 01       	movw	r24, r28
    36c8:	0e 94 85 18 	call	0x310a	; 0x310a <_ZN15Adafruit_ST77357CS_HIGHEv>

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    36cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36ce:	88 23       	and	r24, r24
    36d0:	49 f0       	breq	.+18     	; 0x36e4 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xa4>
#endif
}
    36d2:	df 91       	pop	r29
    36d4:	cf 91       	pop	r28
    36d6:	1f 91       	pop	r17
    36d8:	0f 91       	pop	r16
    36da:	ff 90       	pop	r15
    36dc:	ef 90       	pop	r14
    36de:	df 90       	pop	r13
    spiwrite(lo);
  }
  CS_HIGH();

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    36e0:	0c 94 26 18 	jmp	0x304c	; 0x304c <_ZN8SPIClass14endTransactionEv>
#endif
}
    36e4:	df 91       	pop	r29
    36e6:	cf 91       	pop	r28
    36e8:	1f 91       	pop	r17
    36ea:	0f 91       	pop	r16
    36ec:	ff 90       	pop	r15
    36ee:	ef 90       	pop	r14
    36f0:	df 90       	pop	r13
    36f2:	08 95       	ret

000036f4 <_ZN15Adafruit_ST77358fillRectEiiiij>:



// fill a rectangle
void Adafruit_ST7735::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
  uint16_t color) {
    36f4:	af 92       	push	r10
    36f6:	bf 92       	push	r11
    36f8:	cf 92       	push	r12
    36fa:	df 92       	push	r13
    36fc:	ef 92       	push	r14
    36fe:	ff 92       	push	r15
    3700:	0f 93       	push	r16
    3702:	1f 93       	push	r17
    3704:	cf 93       	push	r28
    3706:	df 93       	push	r29
    3708:	ec 01       	movw	r28, r24
    370a:	59 01       	movw	r10, r18
    370c:	68 01       	movw	r12, r16

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
    370e:	28 85       	ldd	r18, Y+8	; 0x08
    3710:	39 85       	ldd	r19, Y+9	; 0x09
    3712:	62 17       	cp	r22, r18
    3714:	73 07       	cpc	r23, r19
    3716:	0c f0       	brlt	.+2      	; 0x371a <_ZN15Adafruit_ST77358fillRectEiiiij+0x26>
    3718:	58 c0       	rjmp	.+176    	; 0x37ca <_ZN15Adafruit_ST77358fillRectEiiiij+0xd6>
    371a:	8a 85       	ldd	r24, Y+10	; 0x0a
    371c:	9b 85       	ldd	r25, Y+11	; 0x0b
    371e:	48 17       	cp	r20, r24
    3720:	59 07       	cpc	r21, r25
    3722:	0c f0       	brlt	.+2      	; 0x3726 <_ZN15Adafruit_ST77358fillRectEiiiij+0x32>
    3724:	52 c0       	rjmp	.+164    	; 0x37ca <_ZN15Adafruit_ST77358fillRectEiiiij+0xd6>
  if((x + w - 1) >= _width)  w = _width  - x;
    3726:	fb 01       	movw	r30, r22
    3728:	ea 0d       	add	r30, r10
    372a:	fb 1d       	adc	r31, r11
    372c:	2e 17       	cp	r18, r30
    372e:	3f 07       	cpc	r19, r31
    3730:	1c f4       	brge	.+6      	; 0x3738 <_ZN15Adafruit_ST77358fillRectEiiiij+0x44>
    3732:	59 01       	movw	r10, r18
    3734:	a6 1a       	sub	r10, r22
    3736:	b7 0a       	sbc	r11, r23
  if((y + h - 1) >= _height) h = _height - y;
    3738:	9a 01       	movw	r18, r20
    373a:	2c 0d       	add	r18, r12
    373c:	3d 1d       	adc	r19, r13
    373e:	82 17       	cp	r24, r18
    3740:	93 07       	cpc	r25, r19
    3742:	1c f4       	brge	.+6      	; 0x374a <_ZN15Adafruit_ST77358fillRectEiiiij+0x56>
    3744:	6c 01       	movw	r12, r24
    3746:	c4 1a       	sub	r12, r20
    3748:	d5 0a       	sbc	r13, r21

  setAddrWindow(x, y, x+w-1, y+h-1);
    374a:	0f ef       	ldi	r16, 0xFF	; 255
    374c:	04 0f       	add	r16, r20
    374e:	0c 0d       	add	r16, r12
    3750:	2f ef       	ldi	r18, 0xFF	; 255
    3752:	26 0f       	add	r18, r22
    3754:	2a 0d       	add	r18, r10
    3756:	ce 01       	movw	r24, r28
    3758:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;
    
#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.beginTransaction(mySPISettings);
    375c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    375e:	88 23       	and	r24, r24
    3760:	31 f0       	breq	.+12     	; 0x376e <_ZN15Adafruit_ST77358fillRectEiiiij+0x7a>
    3762:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZL13mySPISettings>
    3766:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <_ZL13mySPISettings+0x1>
    376a:	0e 94 0c 18 	call	0x3018	; 0x3018 <_ZN8SPIClass16beginTransactionE11SPISettings>
#endif

  DC_HIGH();
    376e:	ce 01       	movw	r24, r28
    3770:	0e 94 ce 18 	call	0x319c	; 0x319c <_ZN15Adafruit_ST77357DC_HIGHEv>
  CS_LOW();
    3774:	ce 01       	movw	r24, r28
    3776:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN15Adafruit_ST77356CS_LOWEv>
  for(y=h; y>0; y--) {
    377a:	1c 14       	cp	r1, r12
    377c:	1d 04       	cpc	r1, r13
    377e:	9c f4       	brge	.+38     	; 0x37a6 <_ZN15Adafruit_ST77358fillRectEiiiij+0xb2>
    3780:	85 01       	movw	r16, r10
    for(x=w; x>0; x--) {
    3782:	10 16       	cp	r1, r16
    3784:	11 06       	cpc	r1, r17
    3786:	5c f4       	brge	.+22     	; 0x379e <_ZN15Adafruit_ST77358fillRectEiiiij+0xaa>
      spiwrite(hi);
    3788:	6f 2d       	mov	r22, r15
    378a:	ce 01       	movw	r24, r28
    378c:	0e 94 58 18 	call	0x30b0	; 0x30b0 <_ZN15Adafruit_ST77358spiwriteEh>
      spiwrite(lo);
    3790:	6e 2d       	mov	r22, r14
    3792:	ce 01       	movw	r24, r28
    3794:	0e 94 58 18 	call	0x30b0	; 0x30b0 <_ZN15Adafruit_ST77358spiwriteEh>
#endif

  DC_HIGH();
  CS_LOW();
  for(y=h; y>0; y--) {
    for(x=w; x>0; x--) {
    3798:	01 50       	subi	r16, 0x01	; 1
    379a:	11 09       	sbc	r17, r1
    379c:	f2 cf       	rjmp	.-28     	; 0x3782 <_ZN15Adafruit_ST77358fillRectEiiiij+0x8e>
  if (hwSPI)      SPI.beginTransaction(mySPISettings);
#endif

  DC_HIGH();
  CS_LOW();
  for(y=h; y>0; y--) {
    379e:	81 e0       	ldi	r24, 0x01	; 1
    37a0:	c8 1a       	sub	r12, r24
    37a2:	d1 08       	sbc	r13, r1
    37a4:	ea cf       	rjmp	.-44     	; 0x377a <_ZN15Adafruit_ST77358fillRectEiiiij+0x86>
    for(x=w; x>0; x--) {
      spiwrite(hi);
      spiwrite(lo);
    }
  }
  CS_HIGH();
    37a6:	ce 01       	movw	r24, r28
    37a8:	0e 94 85 18 	call	0x310a	; 0x310a <_ZN15Adafruit_ST77357CS_HIGHEv>

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    37ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37ae:	88 23       	and	r24, r24
    37b0:	61 f0       	breq	.+24     	; 0x37ca <_ZN15Adafruit_ST77358fillRectEiiiij+0xd6>
#endif
}
    37b2:	df 91       	pop	r29
    37b4:	cf 91       	pop	r28
    37b6:	1f 91       	pop	r17
    37b8:	0f 91       	pop	r16
    37ba:	ff 90       	pop	r15
    37bc:	ef 90       	pop	r14
    37be:	df 90       	pop	r13
    37c0:	cf 90       	pop	r12
    37c2:	bf 90       	pop	r11
    37c4:	af 90       	pop	r10
    }
  }
  CS_HIGH();

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    37c6:	0c 94 26 18 	jmp	0x304c	; 0x304c <_ZN8SPIClass14endTransactionEv>
#endif
}
    37ca:	df 91       	pop	r29
    37cc:	cf 91       	pop	r28
    37ce:	1f 91       	pop	r17
    37d0:	0f 91       	pop	r16
    37d2:	ff 90       	pop	r15
    37d4:	ef 90       	pop	r14
    37d6:	df 90       	pop	r13
    37d8:	cf 90       	pop	r12
    37da:	bf 90       	pop	r11
    37dc:	af 90       	pop	r10
    37de:	08 95       	ret

000037e0 <_ZN15Adafruit_ST773513drawFastVLineEiiij>:
#endif
}


void Adafruit_ST7735::drawFastVLine(int16_t x, int16_t y, int16_t h,
 uint16_t color) {
    37e0:	df 92       	push	r13
    37e2:	ef 92       	push	r14
    37e4:	ff 92       	push	r15
    37e6:	0f 93       	push	r16
    37e8:	1f 93       	push	r17
    37ea:	cf 93       	push	r28
    37ec:	df 93       	push	r29
    37ee:	ec 01       	movw	r28, r24
    37f0:	79 01       	movw	r14, r18
    37f2:	d0 2e       	mov	r13, r16

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
    37f4:	88 85       	ldd	r24, Y+8	; 0x08
    37f6:	99 85       	ldd	r25, Y+9	; 0x09
    37f8:	68 17       	cp	r22, r24
    37fa:	79 07       	cpc	r23, r25
    37fc:	0c f0       	brlt	.+2      	; 0x3800 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x20>
    37fe:	42 c0       	rjmp	.+132    	; 0x3884 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xa4>
    3800:	8a 85       	ldd	r24, Y+10	; 0x0a
    3802:	9b 85       	ldd	r25, Y+11	; 0x0b
    3804:	48 17       	cp	r20, r24
    3806:	59 07       	cpc	r21, r25
    3808:	ec f5       	brge	.+122    	; 0x3884 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xa4>
  if((y+h-1) >= _height) h = _height-y;
    380a:	9a 01       	movw	r18, r20
    380c:	2e 0d       	add	r18, r14
    380e:	3f 1d       	adc	r19, r15
    3810:	82 17       	cp	r24, r18
    3812:	93 07       	cpc	r25, r19
    3814:	1c f4       	brge	.+6      	; 0x381c <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x3c>
    3816:	7c 01       	movw	r14, r24
    3818:	e4 1a       	sub	r14, r20
    381a:	f5 0a       	sbc	r15, r21
  setAddrWindow(x, y, x, y+h-1);
    381c:	0f ef       	ldi	r16, 0xFF	; 255
    381e:	04 0f       	add	r16, r20
    3820:	0e 0d       	add	r16, r14
    3822:	26 2f       	mov	r18, r22
    3824:	ce 01       	movw	r24, r28
    3826:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;
    
#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.beginTransaction(mySPISettings);
    382a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    382c:	88 23       	and	r24, r24
    382e:	31 f0       	breq	.+12     	; 0x383c <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x5c>
    3830:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZL13mySPISettings>
    3834:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <_ZL13mySPISettings+0x1>
    3838:	0e 94 0c 18 	call	0x3018	; 0x3018 <_ZN8SPIClass16beginTransactionE11SPISettings>
#endif

  DC_HIGH();
    383c:	ce 01       	movw	r24, r28
    383e:	0e 94 ce 18 	call	0x319c	; 0x319c <_ZN15Adafruit_ST77357DC_HIGHEv>
  CS_LOW();
    3842:	ce 01       	movw	r24, r28
    3844:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN15Adafruit_ST77356CS_LOWEv>
  while (h--) {
    3848:	e1 14       	cp	r14, r1
    384a:	f1 04       	cpc	r15, r1
    384c:	61 f0       	breq	.+24     	; 0x3866 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x86>
    spiwrite(hi);
    384e:	61 2f       	mov	r22, r17
    3850:	ce 01       	movw	r24, r28
    3852:	0e 94 58 18 	call	0x30b0	; 0x30b0 <_ZN15Adafruit_ST77358spiwriteEh>
    spiwrite(lo);
    3856:	6d 2d       	mov	r22, r13
    3858:	ce 01       	movw	r24, r28
    385a:	0e 94 58 18 	call	0x30b0	; 0x30b0 <_ZN15Adafruit_ST77358spiwriteEh>
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	e8 1a       	sub	r14, r24
    3862:	f1 08       	sbc	r15, r1
    3864:	f1 cf       	rjmp	.-30     	; 0x3848 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x68>
  }
  CS_HIGH();
    3866:	ce 01       	movw	r24, r28
    3868:	0e 94 85 18 	call	0x310a	; 0x310a <_ZN15Adafruit_ST77357CS_HIGHEv>

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    386c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    386e:	88 23       	and	r24, r24
    3870:	49 f0       	breq	.+18     	; 0x3884 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xa4>
#endif
}
    3872:	df 91       	pop	r29
    3874:	cf 91       	pop	r28
    3876:	1f 91       	pop	r17
    3878:	0f 91       	pop	r16
    387a:	ff 90       	pop	r15
    387c:	ef 90       	pop	r14
    387e:	df 90       	pop	r13
    spiwrite(lo);
  }
  CS_HIGH();

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    3880:	0c 94 26 18 	jmp	0x304c	; 0x304c <_ZN8SPIClass14endTransactionEv>
#endif
}
    3884:	df 91       	pop	r29
    3886:	cf 91       	pop	r28
    3888:	1f 91       	pop	r17
    388a:	0f 91       	pop	r16
    388c:	ff 90       	pop	r15
    388e:	ef 90       	pop	r14
    3890:	df 90       	pop	r13
    3892:	08 95       	ret

00003894 <_ZN15Adafruit_ST77359drawPixelEiij>:
#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)    SPI.endTransaction();
#endif
}

void Adafruit_ST7735::drawPixel(int16_t x, int16_t y, uint16_t color) {
    3894:	ff 92       	push	r15
    3896:	0f 93       	push	r16
    3898:	1f 93       	push	r17
    389a:	cf 93       	push	r28
    389c:	df 93       	push	r29
    389e:	ec 01       	movw	r28, r24

  if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
    38a0:	77 fd       	sbrc	r23, 7
    38a2:	39 c0       	rjmp	.+114    	; 0x3916 <_ZN15Adafruit_ST77359drawPixelEiij+0x82>
    38a4:	88 85       	ldd	r24, Y+8	; 0x08
    38a6:	99 85       	ldd	r25, Y+9	; 0x09
    38a8:	68 17       	cp	r22, r24
    38aa:	79 07       	cpc	r23, r25
    38ac:	a4 f5       	brge	.+104    	; 0x3916 <_ZN15Adafruit_ST77359drawPixelEiij+0x82>
    38ae:	57 fd       	sbrc	r21, 7
    38b0:	32 c0       	rjmp	.+100    	; 0x3916 <_ZN15Adafruit_ST77359drawPixelEiij+0x82>
    38b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    38b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    38b6:	48 17       	cp	r20, r24
    38b8:	59 07       	cpc	r21, r25
    38ba:	6c f5       	brge	.+90     	; 0x3916 <_ZN15Adafruit_ST77359drawPixelEiij+0x82>
    38bc:	f3 2e       	mov	r15, r19
    38be:	12 2f       	mov	r17, r18

  setAddrWindow(x,y,x+1,y+1);
    38c0:	01 e0       	ldi	r16, 0x01	; 1
    38c2:	04 0f       	add	r16, r20
    38c4:	21 e0       	ldi	r18, 0x01	; 1
    38c6:	26 0f       	add	r18, r22
    38c8:	ce 01       	movw	r24, r28
    38ca:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)     SPI.beginTransaction(mySPISettings);
    38ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38d0:	88 23       	and	r24, r24
    38d2:	31 f0       	breq	.+12     	; 0x38e0 <_ZN15Adafruit_ST77359drawPixelEiij+0x4c>
    38d4:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <_ZL13mySPISettings>
    38d8:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <_ZL13mySPISettings+0x1>
    38dc:	0e 94 0c 18 	call	0x3018	; 0x3018 <_ZN8SPIClass16beginTransactionE11SPISettings>
#endif

  DC_HIGH();
    38e0:	ce 01       	movw	r24, r28
    38e2:	0e 94 ce 18 	call	0x319c	; 0x319c <_ZN15Adafruit_ST77357DC_HIGHEv>
  CS_LOW();
    38e6:	ce 01       	movw	r24, r28
    38e8:	0e 94 90 18 	call	0x3120	; 0x3120 <_ZN15Adafruit_ST77356CS_LOWEv>
  spiwrite(color >> 8);
    38ec:	6f 2d       	mov	r22, r15
    38ee:	ce 01       	movw	r24, r28
    38f0:	0e 94 58 18 	call	0x30b0	; 0x30b0 <_ZN15Adafruit_ST77358spiwriteEh>
  spiwrite(color);
    38f4:	61 2f       	mov	r22, r17
    38f6:	ce 01       	movw	r24, r28
    38f8:	0e 94 58 18 	call	0x30b0	; 0x30b0 <_ZN15Adafruit_ST77358spiwriteEh>
  CS_HIGH();
    38fc:	ce 01       	movw	r24, r28
    38fe:	0e 94 85 18 	call	0x310a	; 0x310a <_ZN15Adafruit_ST77357CS_HIGHEv>

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)     SPI.endTransaction();
    3902:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3904:	88 23       	and	r24, r24
    3906:	39 f0       	breq	.+14     	; 0x3916 <_ZN15Adafruit_ST77359drawPixelEiij+0x82>
#endif
}
    3908:	df 91       	pop	r29
    390a:	cf 91       	pop	r28
    390c:	1f 91       	pop	r17
    390e:	0f 91       	pop	r16
    3910:	ff 90       	pop	r15
  spiwrite(color >> 8);
  spiwrite(color);
  CS_HIGH();

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)     SPI.endTransaction();
    3912:	0c 94 26 18 	jmp	0x304c	; 0x304c <_ZN8SPIClass14endTransactionEv>
#endif
}
    3916:	df 91       	pop	r29
    3918:	cf 91       	pop	r28
    391a:	1f 91       	pop	r17
    391c:	0f 91       	pop	r16
    391e:	ff 90       	pop	r15
    3920:	08 95       	ret

00003922 <_GLOBAL__sub_I__ZN15Adafruit_ST7735C2Eaaaaa>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    3922:	e5 e8       	ldi	r30, 0x85	; 133
    3924:	f3 e0       	ldi	r31, 0x03	; 3
    3926:	80 e5       	ldi	r24, 0x50	; 80
    3928:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    392a:	11 82       	std	Z+1, r1	; 0x01
    392c:	08 95       	ret

0000392e <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    392e:	cf 93       	push	r28
  uint8_t sreg = SREG;
    3930:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3932:	f8 94       	cli
  if (!initialized) {
    3934:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <_ZN8SPIClass11initializedE>
    3938:	81 11       	cpse	r24, r1
    393a:	27 c0       	rjmp	.+78     	; 0x398a <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    393c:	e6 ee       	ldi	r30, 0xE6	; 230
    393e:	f0 e0       	ldi	r31, 0x00	; 0
    3940:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    3942:	e2 ed       	ldi	r30, 0xD2	; 210
    3944:	f0 e0       	ldi	r31, 0x00	; 0
    3946:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    3948:	e8 2f       	mov	r30, r24
    394a:	f0 e0       	ldi	r31, 0x00	; 0
    394c:	ee 0f       	add	r30, r30
    394e:	ff 1f       	adc	r31, r31
    3950:	e6 50       	subi	r30, 0x06	; 6
    3952:	ff 4f       	sbci	r31, 0xFF	; 255
    3954:	a5 91       	lpm	r26, Z+
    3956:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    3958:	ec 91       	ld	r30, X
    395a:	e9 23       	and	r30, r25
    395c:	21 f4       	brne	.+8      	; 0x3966 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    395e:	61 e0       	ldi	r22, 0x01	; 1
    3960:	8a e0       	ldi	r24, 0x0A	; 10
    3962:	0e 94 52 11 	call	0x22a4	; 0x22a4 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3966:	61 e0       	ldi	r22, 0x01	; 1
    3968:	8a e0       	ldi	r24, 0x0A	; 10
    396a:	0e 94 16 11 	call	0x222c	; 0x222c <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    396e:	8c b5       	in	r24, 0x2c	; 44
    3970:	80 61       	ori	r24, 0x10	; 16
    3972:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3974:	8c b5       	in	r24, 0x2c	; 44
    3976:	80 64       	ori	r24, 0x40	; 64
    3978:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    397a:	61 e0       	ldi	r22, 0x01	; 1
    397c:	8d e0       	ldi	r24, 0x0D	; 13
    397e:	0e 94 16 11 	call	0x222c	; 0x222c <pinMode>
    pinMode(MOSI, OUTPUT);
    3982:	61 e0       	ldi	r22, 0x01	; 1
    3984:	8b e0       	ldi	r24, 0x0B	; 11
    3986:	0e 94 16 11 	call	0x222c	; 0x222c <pinMode>
  }
  initialized++; // reference count
    398a:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <_ZN8SPIClass11initializedE>
    398e:	8f 5f       	subi	r24, 0xFF	; 255
    3990:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3994:	cf bf       	out	0x3f, r28	; 63
}
    3996:	cf 91       	pop	r28
    3998:	08 95       	ret

0000399a <__cxa_pure_virtual>:
    399a:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <abort>

0000399e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    399e:	08 95       	ret

000039a0 <__unordsf2>:
    39a0:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fp_cmp>
    39a4:	88 0b       	sbc	r24, r24
    39a6:	99 0b       	sbc	r25, r25
    39a8:	08 95       	ret

000039aa <__udivmodsi4>:
    39aa:	a1 e2       	ldi	r26, 0x21	; 33
    39ac:	1a 2e       	mov	r1, r26
    39ae:	aa 1b       	sub	r26, r26
    39b0:	bb 1b       	sub	r27, r27
    39b2:	fd 01       	movw	r30, r26
    39b4:	0d c0       	rjmp	.+26     	; 0x39d0 <__udivmodsi4_ep>

000039b6 <__udivmodsi4_loop>:
    39b6:	aa 1f       	adc	r26, r26
    39b8:	bb 1f       	adc	r27, r27
    39ba:	ee 1f       	adc	r30, r30
    39bc:	ff 1f       	adc	r31, r31
    39be:	a2 17       	cp	r26, r18
    39c0:	b3 07       	cpc	r27, r19
    39c2:	e4 07       	cpc	r30, r20
    39c4:	f5 07       	cpc	r31, r21
    39c6:	20 f0       	brcs	.+8      	; 0x39d0 <__udivmodsi4_ep>
    39c8:	a2 1b       	sub	r26, r18
    39ca:	b3 0b       	sbc	r27, r19
    39cc:	e4 0b       	sbc	r30, r20
    39ce:	f5 0b       	sbc	r31, r21

000039d0 <__udivmodsi4_ep>:
    39d0:	66 1f       	adc	r22, r22
    39d2:	77 1f       	adc	r23, r23
    39d4:	88 1f       	adc	r24, r24
    39d6:	99 1f       	adc	r25, r25
    39d8:	1a 94       	dec	r1
    39da:	69 f7       	brne	.-38     	; 0x39b6 <__udivmodsi4_loop>
    39dc:	60 95       	com	r22
    39de:	70 95       	com	r23
    39e0:	80 95       	com	r24
    39e2:	90 95       	com	r25
    39e4:	9b 01       	movw	r18, r22
    39e6:	ac 01       	movw	r20, r24
    39e8:	bd 01       	movw	r22, r26
    39ea:	cf 01       	movw	r24, r30
    39ec:	08 95       	ret

000039ee <__tablejump2__>:
    39ee:	ee 0f       	add	r30, r30
    39f0:	ff 1f       	adc	r31, r31
    39f2:	05 90       	lpm	r0, Z+
    39f4:	f4 91       	lpm	r31, Z
    39f6:	e0 2d       	mov	r30, r0
    39f8:	09 94       	ijmp

000039fa <malloc>:
    39fa:	0f 93       	push	r16
    39fc:	1f 93       	push	r17
    39fe:	cf 93       	push	r28
    3a00:	df 93       	push	r29
    3a02:	82 30       	cpi	r24, 0x02	; 2
    3a04:	91 05       	cpc	r25, r1
    3a06:	10 f4       	brcc	.+4      	; 0x3a0c <malloc+0x12>
    3a08:	82 e0       	ldi	r24, 0x02	; 2
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <__flp>
    3a10:	f0 91 8e 03 	lds	r31, 0x038E	; 0x80038e <__flp+0x1>
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	a0 e0       	ldi	r26, 0x00	; 0
    3a1a:	b0 e0       	ldi	r27, 0x00	; 0
    3a1c:	30 97       	sbiw	r30, 0x00	; 0
    3a1e:	19 f1       	breq	.+70     	; 0x3a66 <malloc+0x6c>
    3a20:	40 81       	ld	r20, Z
    3a22:	51 81       	ldd	r21, Z+1	; 0x01
    3a24:	02 81       	ldd	r16, Z+2	; 0x02
    3a26:	13 81       	ldd	r17, Z+3	; 0x03
    3a28:	48 17       	cp	r20, r24
    3a2a:	59 07       	cpc	r21, r25
    3a2c:	c8 f0       	brcs	.+50     	; 0x3a60 <malloc+0x66>
    3a2e:	84 17       	cp	r24, r20
    3a30:	95 07       	cpc	r25, r21
    3a32:	69 f4       	brne	.+26     	; 0x3a4e <malloc+0x54>
    3a34:	10 97       	sbiw	r26, 0x00	; 0
    3a36:	31 f0       	breq	.+12     	; 0x3a44 <malloc+0x4a>
    3a38:	12 96       	adiw	r26, 0x02	; 2
    3a3a:	0c 93       	st	X, r16
    3a3c:	12 97       	sbiw	r26, 0x02	; 2
    3a3e:	13 96       	adiw	r26, 0x03	; 3
    3a40:	1c 93       	st	X, r17
    3a42:	27 c0       	rjmp	.+78     	; 0x3a92 <malloc+0x98>
    3a44:	00 93 8d 03 	sts	0x038D, r16	; 0x80038d <__flp>
    3a48:	10 93 8e 03 	sts	0x038E, r17	; 0x80038e <__flp+0x1>
    3a4c:	22 c0       	rjmp	.+68     	; 0x3a92 <malloc+0x98>
    3a4e:	21 15       	cp	r18, r1
    3a50:	31 05       	cpc	r19, r1
    3a52:	19 f0       	breq	.+6      	; 0x3a5a <malloc+0x60>
    3a54:	42 17       	cp	r20, r18
    3a56:	53 07       	cpc	r21, r19
    3a58:	18 f4       	brcc	.+6      	; 0x3a60 <malloc+0x66>
    3a5a:	9a 01       	movw	r18, r20
    3a5c:	bd 01       	movw	r22, r26
    3a5e:	ef 01       	movw	r28, r30
    3a60:	df 01       	movw	r26, r30
    3a62:	f8 01       	movw	r30, r16
    3a64:	db cf       	rjmp	.-74     	; 0x3a1c <malloc+0x22>
    3a66:	21 15       	cp	r18, r1
    3a68:	31 05       	cpc	r19, r1
    3a6a:	f9 f0       	breq	.+62     	; 0x3aaa <malloc+0xb0>
    3a6c:	28 1b       	sub	r18, r24
    3a6e:	39 0b       	sbc	r19, r25
    3a70:	24 30       	cpi	r18, 0x04	; 4
    3a72:	31 05       	cpc	r19, r1
    3a74:	80 f4       	brcc	.+32     	; 0x3a96 <malloc+0x9c>
    3a76:	8a 81       	ldd	r24, Y+2	; 0x02
    3a78:	9b 81       	ldd	r25, Y+3	; 0x03
    3a7a:	61 15       	cp	r22, r1
    3a7c:	71 05       	cpc	r23, r1
    3a7e:	21 f0       	breq	.+8      	; 0x3a88 <malloc+0x8e>
    3a80:	fb 01       	movw	r30, r22
    3a82:	93 83       	std	Z+3, r25	; 0x03
    3a84:	82 83       	std	Z+2, r24	; 0x02
    3a86:	04 c0       	rjmp	.+8      	; 0x3a90 <malloc+0x96>
    3a88:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <__flp+0x1>
    3a8c:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <__flp>
    3a90:	fe 01       	movw	r30, r28
    3a92:	32 96       	adiw	r30, 0x02	; 2
    3a94:	44 c0       	rjmp	.+136    	; 0x3b1e <malloc+0x124>
    3a96:	fe 01       	movw	r30, r28
    3a98:	e2 0f       	add	r30, r18
    3a9a:	f3 1f       	adc	r31, r19
    3a9c:	81 93       	st	Z+, r24
    3a9e:	91 93       	st	Z+, r25
    3aa0:	22 50       	subi	r18, 0x02	; 2
    3aa2:	31 09       	sbc	r19, r1
    3aa4:	39 83       	std	Y+1, r19	; 0x01
    3aa6:	28 83       	st	Y, r18
    3aa8:	3a c0       	rjmp	.+116    	; 0x3b1e <malloc+0x124>
    3aaa:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <__brkval>
    3aae:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <__brkval+0x1>
    3ab2:	23 2b       	or	r18, r19
    3ab4:	41 f4       	brne	.+16     	; 0x3ac6 <malloc+0xcc>
    3ab6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3aba:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3abe:	30 93 8c 03 	sts	0x038C, r19	; 0x80038c <__brkval+0x1>
    3ac2:	20 93 8b 03 	sts	0x038B, r18	; 0x80038b <__brkval>
    3ac6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3aca:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3ace:	21 15       	cp	r18, r1
    3ad0:	31 05       	cpc	r19, r1
    3ad2:	41 f4       	brne	.+16     	; 0x3ae4 <malloc+0xea>
    3ad4:	2d b7       	in	r18, 0x3d	; 61
    3ad6:	3e b7       	in	r19, 0x3e	; 62
    3ad8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3adc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3ae0:	24 1b       	sub	r18, r20
    3ae2:	35 0b       	sbc	r19, r21
    3ae4:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <__brkval>
    3ae8:	f0 91 8c 03 	lds	r31, 0x038C	; 0x80038c <__brkval+0x1>
    3aec:	e2 17       	cp	r30, r18
    3aee:	f3 07       	cpc	r31, r19
    3af0:	a0 f4       	brcc	.+40     	; 0x3b1a <malloc+0x120>
    3af2:	2e 1b       	sub	r18, r30
    3af4:	3f 0b       	sbc	r19, r31
    3af6:	28 17       	cp	r18, r24
    3af8:	39 07       	cpc	r19, r25
    3afa:	78 f0       	brcs	.+30     	; 0x3b1a <malloc+0x120>
    3afc:	ac 01       	movw	r20, r24
    3afe:	4e 5f       	subi	r20, 0xFE	; 254
    3b00:	5f 4f       	sbci	r21, 0xFF	; 255
    3b02:	24 17       	cp	r18, r20
    3b04:	35 07       	cpc	r19, r21
    3b06:	48 f0       	brcs	.+18     	; 0x3b1a <malloc+0x120>
    3b08:	4e 0f       	add	r20, r30
    3b0a:	5f 1f       	adc	r21, r31
    3b0c:	50 93 8c 03 	sts	0x038C, r21	; 0x80038c <__brkval+0x1>
    3b10:	40 93 8b 03 	sts	0x038B, r20	; 0x80038b <__brkval>
    3b14:	81 93       	st	Z+, r24
    3b16:	91 93       	st	Z+, r25
    3b18:	02 c0       	rjmp	.+4      	; 0x3b1e <malloc+0x124>
    3b1a:	e0 e0       	ldi	r30, 0x00	; 0
    3b1c:	f0 e0       	ldi	r31, 0x00	; 0
    3b1e:	cf 01       	movw	r24, r30
    3b20:	df 91       	pop	r29
    3b22:	cf 91       	pop	r28
    3b24:	1f 91       	pop	r17
    3b26:	0f 91       	pop	r16
    3b28:	08 95       	ret

00003b2a <free>:
    3b2a:	cf 93       	push	r28
    3b2c:	df 93       	push	r29
    3b2e:	00 97       	sbiw	r24, 0x00	; 0
    3b30:	09 f4       	brne	.+2      	; 0x3b34 <free+0xa>
    3b32:	81 c0       	rjmp	.+258    	; 0x3c36 <free+0x10c>
    3b34:	fc 01       	movw	r30, r24
    3b36:	32 97       	sbiw	r30, 0x02	; 2
    3b38:	13 82       	std	Z+3, r1	; 0x03
    3b3a:	12 82       	std	Z+2, r1	; 0x02
    3b3c:	a0 91 8d 03 	lds	r26, 0x038D	; 0x80038d <__flp>
    3b40:	b0 91 8e 03 	lds	r27, 0x038E	; 0x80038e <__flp+0x1>
    3b44:	10 97       	sbiw	r26, 0x00	; 0
    3b46:	81 f4       	brne	.+32     	; 0x3b68 <free+0x3e>
    3b48:	20 81       	ld	r18, Z
    3b4a:	31 81       	ldd	r19, Z+1	; 0x01
    3b4c:	82 0f       	add	r24, r18
    3b4e:	93 1f       	adc	r25, r19
    3b50:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <__brkval>
    3b54:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <__brkval+0x1>
    3b58:	28 17       	cp	r18, r24
    3b5a:	39 07       	cpc	r19, r25
    3b5c:	51 f5       	brne	.+84     	; 0x3bb2 <free+0x88>
    3b5e:	f0 93 8c 03 	sts	0x038C, r31	; 0x80038c <__brkval+0x1>
    3b62:	e0 93 8b 03 	sts	0x038B, r30	; 0x80038b <__brkval>
    3b66:	67 c0       	rjmp	.+206    	; 0x3c36 <free+0x10c>
    3b68:	ed 01       	movw	r28, r26
    3b6a:	20 e0       	ldi	r18, 0x00	; 0
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	ce 17       	cp	r28, r30
    3b70:	df 07       	cpc	r29, r31
    3b72:	40 f4       	brcc	.+16     	; 0x3b84 <free+0x5a>
    3b74:	4a 81       	ldd	r20, Y+2	; 0x02
    3b76:	5b 81       	ldd	r21, Y+3	; 0x03
    3b78:	9e 01       	movw	r18, r28
    3b7a:	41 15       	cp	r20, r1
    3b7c:	51 05       	cpc	r21, r1
    3b7e:	f1 f0       	breq	.+60     	; 0x3bbc <free+0x92>
    3b80:	ea 01       	movw	r28, r20
    3b82:	f5 cf       	rjmp	.-22     	; 0x3b6e <free+0x44>
    3b84:	d3 83       	std	Z+3, r29	; 0x03
    3b86:	c2 83       	std	Z+2, r28	; 0x02
    3b88:	40 81       	ld	r20, Z
    3b8a:	51 81       	ldd	r21, Z+1	; 0x01
    3b8c:	84 0f       	add	r24, r20
    3b8e:	95 1f       	adc	r25, r21
    3b90:	c8 17       	cp	r28, r24
    3b92:	d9 07       	cpc	r29, r25
    3b94:	59 f4       	brne	.+22     	; 0x3bac <free+0x82>
    3b96:	88 81       	ld	r24, Y
    3b98:	99 81       	ldd	r25, Y+1	; 0x01
    3b9a:	84 0f       	add	r24, r20
    3b9c:	95 1f       	adc	r25, r21
    3b9e:	02 96       	adiw	r24, 0x02	; 2
    3ba0:	91 83       	std	Z+1, r25	; 0x01
    3ba2:	80 83       	st	Z, r24
    3ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba8:	93 83       	std	Z+3, r25	; 0x03
    3baa:	82 83       	std	Z+2, r24	; 0x02
    3bac:	21 15       	cp	r18, r1
    3bae:	31 05       	cpc	r19, r1
    3bb0:	29 f4       	brne	.+10     	; 0x3bbc <free+0x92>
    3bb2:	f0 93 8e 03 	sts	0x038E, r31	; 0x80038e <__flp+0x1>
    3bb6:	e0 93 8d 03 	sts	0x038D, r30	; 0x80038d <__flp>
    3bba:	3d c0       	rjmp	.+122    	; 0x3c36 <free+0x10c>
    3bbc:	e9 01       	movw	r28, r18
    3bbe:	fb 83       	std	Y+3, r31	; 0x03
    3bc0:	ea 83       	std	Y+2, r30	; 0x02
    3bc2:	49 91       	ld	r20, Y+
    3bc4:	59 91       	ld	r21, Y+
    3bc6:	c4 0f       	add	r28, r20
    3bc8:	d5 1f       	adc	r29, r21
    3bca:	ec 17       	cp	r30, r28
    3bcc:	fd 07       	cpc	r31, r29
    3bce:	61 f4       	brne	.+24     	; 0x3be8 <free+0xbe>
    3bd0:	80 81       	ld	r24, Z
    3bd2:	91 81       	ldd	r25, Z+1	; 0x01
    3bd4:	84 0f       	add	r24, r20
    3bd6:	95 1f       	adc	r25, r21
    3bd8:	02 96       	adiw	r24, 0x02	; 2
    3bda:	e9 01       	movw	r28, r18
    3bdc:	99 83       	std	Y+1, r25	; 0x01
    3bde:	88 83       	st	Y, r24
    3be0:	82 81       	ldd	r24, Z+2	; 0x02
    3be2:	93 81       	ldd	r25, Z+3	; 0x03
    3be4:	9b 83       	std	Y+3, r25	; 0x03
    3be6:	8a 83       	std	Y+2, r24	; 0x02
    3be8:	e0 e0       	ldi	r30, 0x00	; 0
    3bea:	f0 e0       	ldi	r31, 0x00	; 0
    3bec:	12 96       	adiw	r26, 0x02	; 2
    3bee:	8d 91       	ld	r24, X+
    3bf0:	9c 91       	ld	r25, X
    3bf2:	13 97       	sbiw	r26, 0x03	; 3
    3bf4:	00 97       	sbiw	r24, 0x00	; 0
    3bf6:	19 f0       	breq	.+6      	; 0x3bfe <free+0xd4>
    3bf8:	fd 01       	movw	r30, r26
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	f7 cf       	rjmp	.-18     	; 0x3bec <free+0xc2>
    3bfe:	8d 91       	ld	r24, X+
    3c00:	9c 91       	ld	r25, X
    3c02:	11 97       	sbiw	r26, 0x01	; 1
    3c04:	9d 01       	movw	r18, r26
    3c06:	2e 5f       	subi	r18, 0xFE	; 254
    3c08:	3f 4f       	sbci	r19, 0xFF	; 255
    3c0a:	82 0f       	add	r24, r18
    3c0c:	93 1f       	adc	r25, r19
    3c0e:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <__brkval>
    3c12:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <__brkval+0x1>
    3c16:	28 17       	cp	r18, r24
    3c18:	39 07       	cpc	r19, r25
    3c1a:	69 f4       	brne	.+26     	; 0x3c36 <free+0x10c>
    3c1c:	30 97       	sbiw	r30, 0x00	; 0
    3c1e:	29 f4       	brne	.+10     	; 0x3c2a <free+0x100>
    3c20:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <__flp+0x1>
    3c24:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <__flp>
    3c28:	02 c0       	rjmp	.+4      	; 0x3c2e <free+0x104>
    3c2a:	13 82       	std	Z+3, r1	; 0x03
    3c2c:	12 82       	std	Z+2, r1	; 0x02
    3c2e:	b0 93 8c 03 	sts	0x038C, r27	; 0x80038c <__brkval+0x1>
    3c32:	a0 93 8b 03 	sts	0x038B, r26	; 0x80038b <__brkval>
    3c36:	df 91       	pop	r29
    3c38:	cf 91       	pop	r28
    3c3a:	08 95       	ret

00003c3c <realloc>:
    3c3c:	a0 e0       	ldi	r26, 0x00	; 0
    3c3e:	b0 e0       	ldi	r27, 0x00	; 0
    3c40:	e4 e2       	ldi	r30, 0x24	; 36
    3c42:	fe e1       	ldi	r31, 0x1E	; 30
    3c44:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <__prologue_saves__+0x8>
    3c48:	ec 01       	movw	r28, r24
    3c4a:	00 97       	sbiw	r24, 0x00	; 0
    3c4c:	21 f4       	brne	.+8      	; 0x3c56 <realloc+0x1a>
    3c4e:	cb 01       	movw	r24, r22
    3c50:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <malloc>
    3c54:	b4 c0       	rjmp	.+360    	; 0x3dbe <realloc+0x182>
    3c56:	fc 01       	movw	r30, r24
    3c58:	e6 0f       	add	r30, r22
    3c5a:	f7 1f       	adc	r31, r23
    3c5c:	9c 01       	movw	r18, r24
    3c5e:	22 50       	subi	r18, 0x02	; 2
    3c60:	31 09       	sbc	r19, r1
    3c62:	e2 17       	cp	r30, r18
    3c64:	f3 07       	cpc	r31, r19
    3c66:	08 f4       	brcc	.+2      	; 0x3c6a <realloc+0x2e>
    3c68:	a8 c0       	rjmp	.+336    	; 0x3dba <realloc+0x17e>
    3c6a:	d9 01       	movw	r26, r18
    3c6c:	0d 91       	ld	r16, X+
    3c6e:	1c 91       	ld	r17, X
    3c70:	11 97       	sbiw	r26, 0x01	; 1
    3c72:	06 17       	cp	r16, r22
    3c74:	17 07       	cpc	r17, r23
    3c76:	b0 f0       	brcs	.+44     	; 0x3ca4 <realloc+0x68>
    3c78:	05 30       	cpi	r16, 0x05	; 5
    3c7a:	11 05       	cpc	r17, r1
    3c7c:	08 f4       	brcc	.+2      	; 0x3c80 <realloc+0x44>
    3c7e:	9b c0       	rjmp	.+310    	; 0x3db6 <realloc+0x17a>
    3c80:	c8 01       	movw	r24, r16
    3c82:	04 97       	sbiw	r24, 0x04	; 4
    3c84:	86 17       	cp	r24, r22
    3c86:	97 07       	cpc	r25, r23
    3c88:	08 f4       	brcc	.+2      	; 0x3c8c <realloc+0x50>
    3c8a:	95 c0       	rjmp	.+298    	; 0x3db6 <realloc+0x17a>
    3c8c:	02 50       	subi	r16, 0x02	; 2
    3c8e:	11 09       	sbc	r17, r1
    3c90:	06 1b       	sub	r16, r22
    3c92:	17 0b       	sbc	r17, r23
    3c94:	01 93       	st	Z+, r16
    3c96:	11 93       	st	Z+, r17
    3c98:	6d 93       	st	X+, r22
    3c9a:	7c 93       	st	X, r23
    3c9c:	cf 01       	movw	r24, r30
    3c9e:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <free>
    3ca2:	89 c0       	rjmp	.+274    	; 0x3db6 <realloc+0x17a>
    3ca4:	5b 01       	movw	r10, r22
    3ca6:	a0 1a       	sub	r10, r16
    3ca8:	b1 0a       	sbc	r11, r17
    3caa:	4c 01       	movw	r8, r24
    3cac:	80 0e       	add	r8, r16
    3cae:	91 1e       	adc	r9, r17
    3cb0:	a0 91 8d 03 	lds	r26, 0x038D	; 0x80038d <__flp>
    3cb4:	b0 91 8e 03 	lds	r27, 0x038E	; 0x80038e <__flp+0x1>
    3cb8:	61 2c       	mov	r6, r1
    3cba:	71 2c       	mov	r7, r1
    3cbc:	e1 2c       	mov	r14, r1
    3cbe:	f1 2c       	mov	r15, r1
    3cc0:	10 97       	sbiw	r26, 0x00	; 0
    3cc2:	09 f4       	brne	.+2      	; 0x3cc6 <realloc+0x8a>
    3cc4:	46 c0       	rjmp	.+140    	; 0x3d52 <realloc+0x116>
    3cc6:	8d 91       	ld	r24, X+
    3cc8:	9c 91       	ld	r25, X
    3cca:	11 97       	sbiw	r26, 0x01	; 1
    3ccc:	a8 15       	cp	r26, r8
    3cce:	b9 05       	cpc	r27, r9
    3cd0:	b1 f5       	brne	.+108    	; 0x3d3e <realloc+0x102>
    3cd2:	6c 01       	movw	r12, r24
    3cd4:	42 e0       	ldi	r20, 0x02	; 2
    3cd6:	c4 0e       	add	r12, r20
    3cd8:	d1 1c       	adc	r13, r1
    3cda:	ca 14       	cp	r12, r10
    3cdc:	db 04       	cpc	r13, r11
    3cde:	78 f1       	brcs	.+94     	; 0x3d3e <realloc+0x102>
    3ce0:	4c 01       	movw	r8, r24
    3ce2:	8a 18       	sub	r8, r10
    3ce4:	9b 08       	sbc	r9, r11
    3ce6:	64 01       	movw	r12, r8
    3ce8:	42 e0       	ldi	r20, 0x02	; 2
    3cea:	c4 0e       	add	r12, r20
    3cec:	d1 1c       	adc	r13, r1
    3cee:	12 96       	adiw	r26, 0x02	; 2
    3cf0:	bc 90       	ld	r11, X
    3cf2:	12 97       	sbiw	r26, 0x02	; 2
    3cf4:	13 96       	adiw	r26, 0x03	; 3
    3cf6:	ac 91       	ld	r26, X
    3cf8:	b5 e0       	ldi	r27, 0x05	; 5
    3cfa:	cb 16       	cp	r12, r27
    3cfc:	d1 04       	cpc	r13, r1
    3cfe:	40 f0       	brcs	.+16     	; 0x3d10 <realloc+0xd4>
    3d00:	b2 82       	std	Z+2, r11	; 0x02
    3d02:	a3 83       	std	Z+3, r26	; 0x03
    3d04:	91 82       	std	Z+1, r9	; 0x01
    3d06:	80 82       	st	Z, r8
    3d08:	d9 01       	movw	r26, r18
    3d0a:	6d 93       	st	X+, r22
    3d0c:	7c 93       	st	X, r23
    3d0e:	09 c0       	rjmp	.+18     	; 0x3d22 <realloc+0xe6>
    3d10:	0e 5f       	subi	r16, 0xFE	; 254
    3d12:	1f 4f       	sbci	r17, 0xFF	; 255
    3d14:	80 0f       	add	r24, r16
    3d16:	91 1f       	adc	r25, r17
    3d18:	f9 01       	movw	r30, r18
    3d1a:	91 83       	std	Z+1, r25	; 0x01
    3d1c:	80 83       	st	Z, r24
    3d1e:	eb 2d       	mov	r30, r11
    3d20:	fa 2f       	mov	r31, r26
    3d22:	e1 14       	cp	r14, r1
    3d24:	f1 04       	cpc	r15, r1
    3d26:	31 f0       	breq	.+12     	; 0x3d34 <realloc+0xf8>
    3d28:	d7 01       	movw	r26, r14
    3d2a:	13 96       	adiw	r26, 0x03	; 3
    3d2c:	fc 93       	st	X, r31
    3d2e:	ee 93       	st	-X, r30
    3d30:	12 97       	sbiw	r26, 0x02	; 2
    3d32:	41 c0       	rjmp	.+130    	; 0x3db6 <realloc+0x17a>
    3d34:	f0 93 8e 03 	sts	0x038E, r31	; 0x80038e <__flp+0x1>
    3d38:	e0 93 8d 03 	sts	0x038D, r30	; 0x80038d <__flp>
    3d3c:	3c c0       	rjmp	.+120    	; 0x3db6 <realloc+0x17a>
    3d3e:	68 16       	cp	r6, r24
    3d40:	79 06       	cpc	r7, r25
    3d42:	08 f4       	brcc	.+2      	; 0x3d46 <realloc+0x10a>
    3d44:	3c 01       	movw	r6, r24
    3d46:	7d 01       	movw	r14, r26
    3d48:	12 96       	adiw	r26, 0x02	; 2
    3d4a:	0d 90       	ld	r0, X+
    3d4c:	bc 91       	ld	r27, X
    3d4e:	a0 2d       	mov	r26, r0
    3d50:	b7 cf       	rjmp	.-146    	; 0x3cc0 <realloc+0x84>
    3d52:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <__brkval>
    3d56:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <__brkval+0x1>
    3d5a:	88 16       	cp	r8, r24
    3d5c:	99 06       	cpc	r9, r25
    3d5e:	e1 f4       	brne	.+56     	; 0x3d98 <realloc+0x15c>
    3d60:	66 16       	cp	r6, r22
    3d62:	77 06       	cpc	r7, r23
    3d64:	c8 f4       	brcc	.+50     	; 0x3d98 <realloc+0x15c>
    3d66:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3d6a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3d6e:	00 97       	sbiw	r24, 0x00	; 0
    3d70:	41 f4       	brne	.+16     	; 0x3d82 <realloc+0x146>
    3d72:	8d b7       	in	r24, 0x3d	; 61
    3d74:	9e b7       	in	r25, 0x3e	; 62
    3d76:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3d7a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3d7e:	84 1b       	sub	r24, r20
    3d80:	95 0b       	sbc	r25, r21
    3d82:	e8 17       	cp	r30, r24
    3d84:	f9 07       	cpc	r31, r25
    3d86:	c8 f4       	brcc	.+50     	; 0x3dba <realloc+0x17e>
    3d88:	f0 93 8c 03 	sts	0x038C, r31	; 0x80038c <__brkval+0x1>
    3d8c:	e0 93 8b 03 	sts	0x038B, r30	; 0x80038b <__brkval>
    3d90:	f9 01       	movw	r30, r18
    3d92:	71 83       	std	Z+1, r23	; 0x01
    3d94:	60 83       	st	Z, r22
    3d96:	0f c0       	rjmp	.+30     	; 0x3db6 <realloc+0x17a>
    3d98:	cb 01       	movw	r24, r22
    3d9a:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <malloc>
    3d9e:	7c 01       	movw	r14, r24
    3da0:	00 97       	sbiw	r24, 0x00	; 0
    3da2:	59 f0       	breq	.+22     	; 0x3dba <realloc+0x17e>
    3da4:	a8 01       	movw	r20, r16
    3da6:	be 01       	movw	r22, r28
    3da8:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <memcpy>
    3dac:	ce 01       	movw	r24, r28
    3dae:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <free>
    3db2:	c7 01       	movw	r24, r14
    3db4:	04 c0       	rjmp	.+8      	; 0x3dbe <realloc+0x182>
    3db6:	ce 01       	movw	r24, r28
    3db8:	02 c0       	rjmp	.+4      	; 0x3dbe <realloc+0x182>
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	cd b7       	in	r28, 0x3d	; 61
    3dc0:	de b7       	in	r29, 0x3e	; 62
    3dc2:	ee e0       	ldi	r30, 0x0E	; 14
    3dc4:	0c 94 59 1f 	jmp	0x3eb2	; 0x3eb2 <__epilogue_restores__+0x8>

00003dc8 <abort>:
    3dc8:	81 e0       	ldi	r24, 0x01	; 1
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	f8 94       	cli
    3dce:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <_exit>

00003dd2 <memcpy>:
    3dd2:	fb 01       	movw	r30, r22
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	02 c0       	rjmp	.+4      	; 0x3ddc <memcpy+0xa>
    3dd8:	01 90       	ld	r0, Z+
    3dda:	0d 92       	st	X+, r0
    3ddc:	41 50       	subi	r20, 0x01	; 1
    3dde:	50 40       	sbci	r21, 0x00	; 0
    3de0:	d8 f7       	brcc	.-10     	; 0x3dd8 <memcpy+0x6>
    3de2:	08 95       	ret

00003de4 <strcpy>:
    3de4:	fb 01       	movw	r30, r22
    3de6:	dc 01       	movw	r26, r24
    3de8:	01 90       	ld	r0, Z+
    3dea:	0d 92       	st	X+, r0
    3dec:	00 20       	and	r0, r0
    3dee:	e1 f7       	brne	.-8      	; 0x3de8 <strcpy+0x4>
    3df0:	08 95       	ret

00003df2 <itoa>:
    3df2:	45 32       	cpi	r20, 0x25	; 37
    3df4:	51 05       	cpc	r21, r1
    3df6:	20 f4       	brcc	.+8      	; 0x3e00 <itoa+0xe>
    3df8:	42 30       	cpi	r20, 0x02	; 2
    3dfa:	10 f0       	brcs	.+4      	; 0x3e00 <itoa+0xe>
    3dfc:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__itoa_ncheck>
    3e00:	fb 01       	movw	r30, r22
    3e02:	10 82       	st	Z, r1
    3e04:	cb 01       	movw	r24, r22
    3e06:	08 95       	ret

00003e08 <__itoa_ncheck>:
    3e08:	bb 27       	eor	r27, r27
    3e0a:	4a 30       	cpi	r20, 0x0A	; 10
    3e0c:	31 f4       	brne	.+12     	; 0x3e1a <__itoa_ncheck+0x12>
    3e0e:	99 23       	and	r25, r25
    3e10:	22 f4       	brpl	.+8      	; 0x3e1a <__itoa_ncheck+0x12>
    3e12:	bd e2       	ldi	r27, 0x2D	; 45
    3e14:	90 95       	com	r25
    3e16:	81 95       	neg	r24
    3e18:	9f 4f       	sbci	r25, 0xFF	; 255
    3e1a:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__utoa_common>

00003e1e <__utoa_ncheck>:
    3e1e:	bb 27       	eor	r27, r27

00003e20 <__utoa_common>:
    3e20:	fb 01       	movw	r30, r22
    3e22:	55 27       	eor	r21, r21
    3e24:	aa 27       	eor	r26, r26
    3e26:	88 0f       	add	r24, r24
    3e28:	99 1f       	adc	r25, r25
    3e2a:	aa 1f       	adc	r26, r26
    3e2c:	a4 17       	cp	r26, r20
    3e2e:	10 f0       	brcs	.+4      	; 0x3e34 <__utoa_common+0x14>
    3e30:	a4 1b       	sub	r26, r20
    3e32:	83 95       	inc	r24
    3e34:	50 51       	subi	r21, 0x10	; 16
    3e36:	b9 f7       	brne	.-18     	; 0x3e26 <__utoa_common+0x6>
    3e38:	a0 5d       	subi	r26, 0xD0	; 208
    3e3a:	aa 33       	cpi	r26, 0x3A	; 58
    3e3c:	08 f0       	brcs	.+2      	; 0x3e40 <__utoa_common+0x20>
    3e3e:	a9 5d       	subi	r26, 0xD9	; 217
    3e40:	a1 93       	st	Z+, r26
    3e42:	00 97       	sbiw	r24, 0x00	; 0
    3e44:	79 f7       	brne	.-34     	; 0x3e24 <__utoa_common+0x4>
    3e46:	b1 11       	cpse	r27, r1
    3e48:	b1 93       	st	Z+, r27
    3e4a:	11 92       	st	Z+, r1
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <strrev>

00003e52 <strrev>:
    3e52:	dc 01       	movw	r26, r24
    3e54:	fc 01       	movw	r30, r24
    3e56:	67 2f       	mov	r22, r23
    3e58:	71 91       	ld	r23, Z+
    3e5a:	77 23       	and	r23, r23
    3e5c:	e1 f7       	brne	.-8      	; 0x3e56 <strrev+0x4>
    3e5e:	32 97       	sbiw	r30, 0x02	; 2
    3e60:	04 c0       	rjmp	.+8      	; 0x3e6a <strrev+0x18>
    3e62:	7c 91       	ld	r23, X
    3e64:	6d 93       	st	X+, r22
    3e66:	70 83       	st	Z, r23
    3e68:	62 91       	ld	r22, -Z
    3e6a:	ae 17       	cp	r26, r30
    3e6c:	bf 07       	cpc	r27, r31
    3e6e:	c8 f3       	brcs	.-14     	; 0x3e62 <strrev+0x10>
    3e70:	08 95       	ret

00003e72 <__prologue_saves__>:
    3e72:	2f 92       	push	r2
    3e74:	3f 92       	push	r3
    3e76:	4f 92       	push	r4
    3e78:	5f 92       	push	r5
    3e7a:	6f 92       	push	r6
    3e7c:	7f 92       	push	r7
    3e7e:	8f 92       	push	r8
    3e80:	9f 92       	push	r9
    3e82:	af 92       	push	r10
    3e84:	bf 92       	push	r11
    3e86:	cf 92       	push	r12
    3e88:	df 92       	push	r13
    3e8a:	ef 92       	push	r14
    3e8c:	ff 92       	push	r15
    3e8e:	0f 93       	push	r16
    3e90:	1f 93       	push	r17
    3e92:	cf 93       	push	r28
    3e94:	df 93       	push	r29
    3e96:	cd b7       	in	r28, 0x3d	; 61
    3e98:	de b7       	in	r29, 0x3e	; 62
    3e9a:	ca 1b       	sub	r28, r26
    3e9c:	db 0b       	sbc	r29, r27
    3e9e:	0f b6       	in	r0, 0x3f	; 63
    3ea0:	f8 94       	cli
    3ea2:	de bf       	out	0x3e, r29	; 62
    3ea4:	0f be       	out	0x3f, r0	; 63
    3ea6:	cd bf       	out	0x3d, r28	; 61
    3ea8:	09 94       	ijmp

00003eaa <__epilogue_restores__>:
    3eaa:	2a 88       	ldd	r2, Y+18	; 0x12
    3eac:	39 88       	ldd	r3, Y+17	; 0x11
    3eae:	48 88       	ldd	r4, Y+16	; 0x10
    3eb0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3eb2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3eb4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3eb6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3eb8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3eba:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ebc:	b9 84       	ldd	r11, Y+9	; 0x09
    3ebe:	c8 84       	ldd	r12, Y+8	; 0x08
    3ec0:	df 80       	ldd	r13, Y+7	; 0x07
    3ec2:	ee 80       	ldd	r14, Y+6	; 0x06
    3ec4:	fd 80       	ldd	r15, Y+5	; 0x05
    3ec6:	0c 81       	ldd	r16, Y+4	; 0x04
    3ec8:	1b 81       	ldd	r17, Y+3	; 0x03
    3eca:	aa 81       	ldd	r26, Y+2	; 0x02
    3ecc:	b9 81       	ldd	r27, Y+1	; 0x01
    3ece:	ce 0f       	add	r28, r30
    3ed0:	d1 1d       	adc	r29, r1
    3ed2:	0f b6       	in	r0, 0x3f	; 63
    3ed4:	f8 94       	cli
    3ed6:	de bf       	out	0x3e, r29	; 62
    3ed8:	0f be       	out	0x3f, r0	; 63
    3eda:	cd bf       	out	0x3d, r28	; 61
    3edc:	ed 01       	movw	r28, r26
    3ede:	08 95       	ret

00003ee0 <_exit>:
    3ee0:	f8 94       	cli

00003ee2 <__stop_program>:
    3ee2:	ff cf       	rjmp	.-2      	; 0x3ee2 <__stop_program>
