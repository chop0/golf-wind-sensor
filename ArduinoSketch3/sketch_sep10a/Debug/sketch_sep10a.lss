
sketch_sep10a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00003fca  0000405e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003fca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001dd  00800196  00800196  000040f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000040f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004124  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009a8  00000000  00000000  00004164  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00016234  00000000  00000000  00004b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e9e  00000000  00000000  0001ad40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005e55  00000000  00000000  0001dbde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000029fc  00000000  00000000  00023a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003ef4  00000000  00000000  00026430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001287f  00000000  00000000  0002a324  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b58  00000000  00000000  0003cba3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__ctors_end>
       4:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
       8:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
       c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      10:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      14:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      18:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      1c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      20:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      24:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      28:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      2c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      30:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      34:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      38:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      3c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      40:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__vector_16>
      44:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      48:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__vector_18>
      4c:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__vector_19>
      50:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      54:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      58:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      5c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      60:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      64:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 05       	cpc	r19, r15
      96:	a8 4c       	sbci	r26, 0xC8	; 200
      98:	cd b2       	in	r12, 0x1d	; 29
      9a:	d4 4e       	sbci	r29, 0xE4	; 228
      9c:	b9 38       	cpi	r27, 0x89	; 137
      9e:	36 a9       	ldd	r19, Z+54	; 0x36
      a0:	02 0c       	add	r0, r2
      a2:	50 b9       	out	0x00, r21	; 0
      a4:	91 86       	std	Z+9, r9	; 0x09
      a6:	88 08       	sbc	r8, r8
      a8:	3c a6       	std	Y+44, r3	; 0x2c
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	2a be       	out	0x3a, r2	; 58
      ae:	00 00       	nop
      b0:	00 80       	ld	r0, Z
      b2:	3f 00       	.word	0x003f	; ????

000000b4 <__trampolines_end>:
      b4:	00 00       	nop
      b6:	00 08       	sbc	r0, r0
      b8:	00 02       	muls	r16, r16
      ba:	01 00       	.word	0x0001	; ????
      bc:	00 03       	mulsu	r16, r16
      be:	04 07       	cpc	r16, r20
	...

000000c8 <digital_pin_to_bit_mask_PGM>:
      c8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d8:	04 08 10 20                                         ... 

000000dc <digital_pin_to_port_PGM>:
      dc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ec:	03 03 03 03                                         ....

000000f0 <port_to_output_PGM>:
      f0:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000fa <port_to_mode_PGM>:
      fa:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000104 <_ZL4font>:
     104:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     114:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     124:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     134:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     144:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     154:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     164:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     174:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     184:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     194:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     1a4:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1b4:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     1c4:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     1d4:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     1e4:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     1f4:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     204:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     214:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     224:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     234:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     244:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     254:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     264:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     274:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     284:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     294:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     2a4:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     2b4:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     2c4:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     2d4:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     2e4:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     2f4:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     304:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     314:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     324:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     334:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     344:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     354:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     364:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     374:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     384:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     394:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     3a4:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     3b4:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     3c4:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     3d4:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     3e4:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     3f4:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     404:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     414:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     424:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     434:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     444:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     454:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     464:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     474:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     484:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     494:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     4a4:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     4b4:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     4c4:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     4d4:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     4e4:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     4f4:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     504:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     514:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     524:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     534:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     544:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     554:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     564:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     574:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     584:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     594:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     5a4:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     5b4:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     5c4:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     5d4:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     5e4:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     5f4:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000604 <_ZL5Rcmd3>:
     604:	04 e0 10 02 1c 07 12 37 32 29 2d 29 25 2b 39 00     .......72)-)%+9.
     614:	01 03 10 e1 10 03 1d 07 06 2e 2c 29 2d 2e 2e 37     ..........,)-..7
     624:	3f 00 00 02 10 13 80 0a 29 80 64                    ?.......).d

0000062f <_ZL16Rcmd2green160x80>:
     62f:	02 2a 04 00 00 00 7f 2b 04 00 00 00 9f              .*.....+.....

0000063c <_ZL13Rcmd2green144>:
     63c:	02 2a 04 00 00 00 7f 2b 04 00 00 00 7f              .*.....+.....

00000649 <_ZL8Rcmd2red>:
     649:	02 2a 04 00 00 00 7f 2b 04 00 00 00 9f              .*.....+.....

00000656 <_ZL10Rcmd2green>:
     656:	02 2a 04 00 02 00 81 2b 04 00 01 00 a0              .*.....+.....

00000663 <_ZL5Rcmd1>:
     663:	0f 01 80 96 11 80 ff b1 03 01 2c 2d b2 03 01 2c     ..........,-...,
     673:	2d b3 06 01 2c 2d 01 2c 2d b4 01 07 c0 03 a2 02     -...,-.,-.......
     683:	84 c1 01 c5 c2 02 0a 00 c3 02 8a 2a c4 02 8a ee     ...........*....
     693:	c5 01 0e 20 00 36 01 c8 3a 01 05                    ... .6..:..

0000069e <__ctors_start>:
     69e:	cd 06       	cpc	r12, r29
     6a0:	69 0e       	add	r6, r25
     6a2:	04 1d       	adc	r16, r4

000006a4 <__ctors_end>:
     6a4:	11 24       	eor	r1, r1
     6a6:	1f be       	out	0x3f, r1	; 63
     6a8:	cf ef       	ldi	r28, 0xFF	; 255
     6aa:	d8 e0       	ldi	r29, 0x08	; 8
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	cd bf       	out	0x3d, r28	; 61

000006b0 <__do_copy_data>:
     6b0:	11 e0       	ldi	r17, 0x01	; 1
     6b2:	a0 e0       	ldi	r26, 0x00	; 0
     6b4:	b1 e0       	ldi	r27, 0x01	; 1
     6b6:	ea ec       	ldi	r30, 0xCA	; 202
     6b8:	ff e3       	ldi	r31, 0x3F	; 63
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <__do_copy_data+0x10>
     6bc:	05 90       	lpm	r0, Z+
     6be:	0d 92       	st	X+, r0
     6c0:	a6 39       	cpi	r26, 0x96	; 150
     6c2:	b1 07       	cpc	r27, r17
     6c4:	d9 f7       	brne	.-10     	; 0x6bc <__do_copy_data+0xc>

000006c6 <__do_clear_bss>:
     6c6:	23 e0       	ldi	r18, 0x03	; 3
     6c8:	a6 e9       	ldi	r26, 0x96	; 150
     6ca:	b1 e0       	ldi	r27, 0x01	; 1
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <.do_clear_bss_start>

000006ce <.do_clear_bss_loop>:
     6ce:	1d 92       	st	X+, r1

000006d0 <.do_clear_bss_start>:
     6d0:	a3 37       	cpi	r26, 0x73	; 115
     6d2:	b2 07       	cpc	r27, r18
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <.do_clear_bss_loop>

000006d6 <__do_global_ctors>:
     6d6:	13 e0       	ldi	r17, 0x03	; 3
     6d8:	c2 e5       	ldi	r28, 0x52	; 82
     6da:	d3 e0       	ldi	r29, 0x03	; 3
     6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <__do_global_ctors+0x10>
     6de:	21 97       	sbiw	r28, 0x01	; 1
     6e0:	fe 01       	movw	r30, r28
     6e2:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <__tablejump2__>
     6e6:	cf 34       	cpi	r28, 0x4F	; 79
     6e8:	d1 07       	cpc	r29, r17
     6ea:	c9 f7       	brne	.-14     	; 0x6de <__do_global_ctors+0x8>
     6ec:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <main>
     6f0:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <_exit>

000006f4 <__bad_interrupt>:
     6f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006f8 <_Z4set2v>:
float flows94[15][2];

void set2() {
  flows94[0][0] = -15.00;
     6f8:	eb e4       	ldi	r30, 0x4B	; 75
     6fa:	f2 e0       	ldi	r31, 0x02	; 2
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	a0 e7       	ldi	r26, 0x70	; 112
     702:	b1 ec       	ldi	r27, 0xC1	; 193
     704:	80 83       	st	Z, r24
     706:	91 83       	std	Z+1, r25	; 0x01
     708:	a2 83       	std	Z+2, r26	; 0x02
     70a:	b3 83       	std	Z+3, r27	; 0x03
  flows94[0][1] = 0.561;
     70c:	82 eb       	ldi	r24, 0xB2	; 178
     70e:	9d e9       	ldi	r25, 0x9D	; 157
     710:	af e0       	ldi	r26, 0x0F	; 15
     712:	bf e3       	ldi	r27, 0x3F	; 63
     714:	84 83       	std	Z+4, r24	; 0x04
     716:	95 83       	std	Z+5, r25	; 0x05
     718:	a6 83       	std	Z+6, r26	; 0x06
     71a:	b7 83       	std	Z+7, r27	; 0x07
  flows94[1][0] = -12.50;
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	a8 e4       	ldi	r26, 0x48	; 72
     722:	b1 ec       	ldi	r27, 0xC1	; 193
     724:	80 87       	std	Z+8, r24	; 0x08
     726:	91 87       	std	Z+9, r25	; 0x09
     728:	a2 87       	std	Z+10, r26	; 0x0a
     72a:	b3 87       	std	Z+11, r27	; 0x0b
  flows94[1][1] = 0.620;
     72c:	82 e5       	ldi	r24, 0x52	; 82
     72e:	98 eb       	ldi	r25, 0xB8	; 184
     730:	ae e1       	ldi	r26, 0x1E	; 30
     732:	bf e3       	ldi	r27, 0x3F	; 63
     734:	84 87       	std	Z+12, r24	; 0x0c
     736:	95 87       	std	Z+13, r25	; 0x0d
     738:	a6 87       	std	Z+14, r26	; 0x0e
     73a:	b7 87       	std	Z+15, r27	; 0x0f
  flows94[2][0] = -10.00;
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	a0 e2       	ldi	r26, 0x20	; 32
     742:	b1 ec       	ldi	r27, 0xC1	; 193
     744:	80 8b       	std	Z+16, r24	; 0x10
     746:	91 8b       	std	Z+17, r25	; 0x11
     748:	a2 8b       	std	Z+18, r26	; 0x12
     74a:	b3 8b       	std	Z+19, r27	; 0x13
  flows94[2][1] = 0.691;
     74c:	80 e6       	ldi	r24, 0x60	; 96
     74e:	95 ee       	ldi	r25, 0xE5	; 229
     750:	a0 e3       	ldi	r26, 0x30	; 48
     752:	bf e3       	ldi	r27, 0x3F	; 63
     754:	84 8b       	std	Z+20, r24	; 0x14
     756:	95 8b       	std	Z+21, r25	; 0x15
     758:	a6 8b       	std	Z+22, r26	; 0x16
     75a:	b7 8b       	std	Z+23, r27	; 0x17
  flows94[3][0] = -7.50;
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	a0 ef       	ldi	r26, 0xF0	; 240
     762:	b0 ec       	ldi	r27, 0xC0	; 192
     764:	80 8f       	std	Z+24, r24	; 0x18
     766:	91 8f       	std	Z+25, r25	; 0x19
     768:	a2 8f       	std	Z+26, r26	; 0x1a
     76a:	b3 8f       	std	Z+27, r27	; 0x1b
  flows94[3][1] = 0.787;
     76c:	85 ed       	ldi	r24, 0xD5	; 213
     76e:	98 e7       	ldi	r25, 0x78	; 120
     770:	a9 e4       	ldi	r26, 0x49	; 73
     772:	bf e3       	ldi	r27, 0x3F	; 63
     774:	84 8f       	std	Z+28, r24	; 0x1c
     776:	95 8f       	std	Z+29, r25	; 0x1d
     778:	a6 8f       	std	Z+30, r26	; 0x1e
     77a:	b7 8f       	std	Z+31, r27	; 0x1f
  flows94[4][0] = -5.00;
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	a0 ea       	ldi	r26, 0xA0	; 160
     782:	b0 ec       	ldi	r27, 0xC0	; 192
     784:	80 a3       	std	Z+32, r24	; 0x20
     786:	91 a3       	std	Z+33, r25	; 0x21
     788:	a2 a3       	std	Z+34, r26	; 0x22
     78a:	b3 a3       	std	Z+35, r27	; 0x23
  flows94[4][1] = 0.919;
     78c:	86 e9       	ldi	r24, 0x96	; 150
     78e:	93 e4       	ldi	r25, 0x43	; 67
     790:	ab e6       	ldi	r26, 0x6B	; 107
     792:	bf e3       	ldi	r27, 0x3F	; 63
     794:	84 a3       	std	Z+36, r24	; 0x24
     796:	95 a3       	std	Z+37, r25	; 0x25
     798:	a6 a3       	std	Z+38, r26	; 0x26
     79a:	b7 a3       	std	Z+39, r27	; 0x27
  flows94[5][0] = -2.50;
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	a0 e2       	ldi	r26, 0x20	; 32
     7a2:	b0 ec       	ldi	r27, 0xC0	; 192
     7a4:	80 a7       	std	Z+40, r24	; 0x28
     7a6:	91 a7       	std	Z+41, r25	; 0x29
     7a8:	a2 a7       	std	Z+42, r26	; 0x2a
     7aa:	b3 a7       	std	Z+43, r27	; 0x2b
  flows94[5][1] = 1.132;
     7ac:	80 e6       	ldi	r24, 0x60	; 96
     7ae:	95 ee       	ldi	r25, 0xE5	; 229
     7b0:	a0 e9       	ldi	r26, 0x90	; 144
     7b2:	bf e3       	ldi	r27, 0x3F	; 63
     7b4:	84 a7       	std	Z+44, r24	; 0x2c
     7b6:	95 a7       	std	Z+45, r25	; 0x2d
     7b8:	a6 a7       	std	Z+46, r26	; 0x2e
     7ba:	b7 a7       	std	Z+47, r27	; 0x2f
  flows94[6][0] = -1.25;
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	a0 ea       	ldi	r26, 0xA0	; 160
     7c2:	bf eb       	ldi	r27, 0xBF	; 191
     7c4:	80 ab       	std	Z+48, r24	; 0x30
     7c6:	91 ab       	std	Z+49, r25	; 0x31
     7c8:	a2 ab       	std	Z+50, r26	; 0x32
     7ca:	b3 ab       	std	Z+51, r27	; 0x33
  flows94[6][1] = 1.308;
     7cc:	8b e8       	ldi	r24, 0x8B	; 139
     7ce:	9c e6       	ldi	r25, 0x6C	; 108
     7d0:	a7 ea       	ldi	r26, 0xA7	; 167
     7d2:	bf e3       	ldi	r27, 0x3F	; 63
     7d4:	84 ab       	std	Z+52, r24	; 0x34
     7d6:	95 ab       	std	Z+53, r25	; 0x35
     7d8:	a6 ab       	std	Z+54, r26	; 0x36
     7da:	b7 ab       	std	Z+55, r27	; 0x37
  flows94[7][0] = 0.00;
     7dc:	10 ae       	std	Z+56, r1	; 0x38
     7de:	11 ae       	std	Z+57, r1	; 0x39
     7e0:	12 ae       	std	Z+58, r1	; 0x3a
     7e2:	13 ae       	std	Z+59, r1	; 0x3b
  flows94[7][1] = 1.652;
     7e4:	8c eb       	ldi	r24, 0xBC	; 188
     7e6:	94 e7       	ldi	r25, 0x74	; 116
     7e8:	a3 ed       	ldi	r26, 0xD3	; 211
     7ea:	bf e3       	ldi	r27, 0x3F	; 63
     7ec:	84 af       	std	Z+60, r24	; 0x3c
     7ee:	95 af       	std	Z+61, r25	; 0x3d
     7f0:	a6 af       	std	Z+62, r26	; 0x3e
     7f2:	b7 af       	std	Z+63, r27	; 0x3f
  flows94[8][0] = 1.25;
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	a0 ea       	ldi	r26, 0xA0	; 160
     7fa:	bf e3       	ldi	r27, 0x3F	; 63
     7fc:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <flows94+0x40>
     800:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <flows94+0x41>
     804:	a0 93 8d 02 	sts	0x028D, r26	; 0x80028d <flows94+0x42>
     808:	b0 93 8e 02 	sts	0x028E, r27	; 0x80028e <flows94+0x43>
  flows94[8][1] = 2.001;
     80c:	82 e6       	ldi	r24, 0x62	; 98
     80e:	90 e1       	ldi	r25, 0x10	; 16
     810:	a0 e0       	ldi	r26, 0x00	; 0
     812:	b0 e4       	ldi	r27, 0x40	; 64
     814:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <flows94+0x44>
     818:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <flows94+0x45>
     81c:	a0 93 91 02 	sts	0x0291, r26	; 0x800291 <flows94+0x46>
     820:	b0 93 92 02 	sts	0x0292, r27	; 0x800292 <flows94+0x47>
  flows94[9][0] = 2.50;
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	a0 e2       	ldi	r26, 0x20	; 32
     82a:	b0 e4       	ldi	r27, 0x40	; 64
     82c:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <flows94+0x48>
     830:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <flows94+0x49>
     834:	a0 93 95 02 	sts	0x0295, r26	; 0x800295 <flows94+0x4a>
     838:	b0 93 96 02 	sts	0x0296, r27	; 0x800296 <flows94+0x4b>
  flows94[9][1] = 2.186;
     83c:	8d e6       	ldi	r24, 0x6D	; 109
     83e:	97 ee       	ldi	r25, 0xE7	; 231
     840:	ab e0       	ldi	r26, 0x0B	; 11
     842:	b0 e4       	ldi	r27, 0x40	; 64
     844:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <flows94+0x4c>
     848:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <flows94+0x4d>
     84c:	a0 93 99 02 	sts	0x0299, r26	; 0x800299 <flows94+0x4e>
     850:	b0 93 9a 02 	sts	0x029A, r27	; 0x80029a <flows94+0x4f>
  flows94[10][0] = 5.00;
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 ea       	ldi	r26, 0xA0	; 160
     85a:	b0 e4       	ldi	r27, 0x40	; 64
     85c:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <flows94+0x50>
     860:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <flows94+0x51>
     864:	a0 93 9d 02 	sts	0x029D, r26	; 0x80029d <flows94+0x52>
     868:	b0 93 9e 02 	sts	0x029E, r27	; 0x80029e <flows94+0x53>
  flows94[10][1] = 2.411;
     86c:	83 ed       	ldi	r24, 0xD3	; 211
     86e:	9d e4       	ldi	r25, 0x4D	; 77
     870:	aa e1       	ldi	r26, 0x1A	; 26
     872:	b0 e4       	ldi	r27, 0x40	; 64
     874:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <flows94+0x54>
     878:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <flows94+0x55>
     87c:	a0 93 a1 02 	sts	0x02A1, r26	; 0x8002a1 <flows94+0x56>
     880:	b0 93 a2 02 	sts	0x02A2, r27	; 0x8002a2 <flows94+0x57>
  flows94[11][0] = 7.50;
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 ef       	ldi	r26, 0xF0	; 240
     88a:	b0 e4       	ldi	r27, 0x40	; 64
     88c:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <flows94+0x58>
     890:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <flows94+0x59>
     894:	a0 93 a5 02 	sts	0x02A5, r26	; 0x8002a5 <flows94+0x5a>
     898:	b0 93 a6 02 	sts	0x02A6, r27	; 0x8002a6 <flows94+0x5b>
  flows94[11][1] = 2.553;
     89c:	8a e5       	ldi	r24, 0x5A	; 90
     89e:	94 e6       	ldi	r25, 0x64	; 100
     8a0:	a3 e2       	ldi	r26, 0x23	; 35
     8a2:	b0 e4       	ldi	r27, 0x40	; 64
     8a4:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <flows94+0x5c>
     8a8:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <flows94+0x5d>
     8ac:	a0 93 a9 02 	sts	0x02A9, r26	; 0x8002a9 <flows94+0x5e>
     8b0:	b0 93 aa 02 	sts	0x02AA, r27	; 0x8002aa <flows94+0x5f>
  flows94[12][0] = 10.00;
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a0 e2       	ldi	r26, 0x20	; 32
     8ba:	b1 e4       	ldi	r27, 0x41	; 65
     8bc:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <flows94+0x60>
     8c0:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <flows94+0x61>
     8c4:	a0 93 ad 02 	sts	0x02AD, r26	; 0x8002ad <flows94+0x62>
     8c8:	b0 93 ae 02 	sts	0x02AE, r27	; 0x8002ae <flows94+0x63>
  flows94[12][1] = 2.660;
     8cc:	81 e7       	ldi	r24, 0x71	; 113
     8ce:	9d e3       	ldi	r25, 0x3D	; 61
     8d0:	aa e2       	ldi	r26, 0x2A	; 42
     8d2:	b0 e4       	ldi	r27, 0x40	; 64
     8d4:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <flows94+0x64>
     8d8:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <flows94+0x65>
     8dc:	a0 93 b1 02 	sts	0x02B1, r26	; 0x8002b1 <flows94+0x66>
     8e0:	b0 93 b2 02 	sts	0x02B2, r27	; 0x8002b2 <flows94+0x67>
  flows94[13][0] = 12.50;
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	a8 e4       	ldi	r26, 0x48	; 72
     8ea:	b1 e4       	ldi	r27, 0x41	; 65
     8ec:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <flows94+0x68>
     8f0:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <flows94+0x69>
     8f4:	a0 93 b5 02 	sts	0x02B5, r26	; 0x8002b5 <flows94+0x6a>
     8f8:	b0 93 b6 02 	sts	0x02B6, r27	; 0x8002b6 <flows94+0x6b>
  flows94[13][1] = 2.740;
     8fc:	89 e2       	ldi	r24, 0x29	; 41
     8fe:	9c e5       	ldi	r25, 0x5C	; 92
     900:	af e2       	ldi	r26, 0x2F	; 47
     902:	b0 e4       	ldi	r27, 0x40	; 64
     904:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <flows94+0x6c>
     908:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <flows94+0x6d>
     90c:	a0 93 b9 02 	sts	0x02B9, r26	; 0x8002b9 <flows94+0x6e>
     910:	b0 93 ba 02 	sts	0x02BA, r27	; 0x8002ba <flows94+0x6f>
  flows94[14][0] = 15.00;
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	a0 e7       	ldi	r26, 0x70	; 112
     91a:	b1 e4       	ldi	r27, 0x41	; 65
     91c:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <flows94+0x70>
     920:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <flows94+0x71>
     924:	a0 93 bd 02 	sts	0x02BD, r26	; 0x8002bd <flows94+0x72>
     928:	b0 93 be 02 	sts	0x02BE, r27	; 0x8002be <flows94+0x73>
  flows94[14][1] = 2.813;
     92c:	81 e3       	ldi	r24, 0x31	; 49
     92e:	98 e0       	ldi	r25, 0x08	; 8
     930:	a4 e3       	ldi	r26, 0x34	; 52
     932:	b0 e4       	ldi	r27, 0x40	; 64
     934:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <flows94+0x74>
     938:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <flows94+0x75>
     93c:	a0 93 c1 02 	sts	0x02C1, r26	; 0x8002c1 <flows94+0x76>
     940:	b0 93 c2 02 	sts	0x02C2, r27	; 0x8002c2 <flows94+0x77>
     944:	08 95       	ret

00000946 <_Z3setv>:


float flows95[15][2];

void set() {
  flows95[0][0] = -15.00;
     946:	e3 ed       	ldi	r30, 0xD3	; 211
     948:	f1 e0       	ldi	r31, 0x01	; 1
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	a0 e7       	ldi	r26, 0x70	; 112
     950:	b1 ec       	ldi	r27, 0xC1	; 193
     952:	80 83       	st	Z, r24
     954:	91 83       	std	Z+1, r25	; 0x01
     956:	a2 83       	std	Z+2, r26	; 0x02
     958:	b3 83       	std	Z+3, r27	; 0x03
  flows95[0][1] = 0.471;
     95a:	89 ee       	ldi	r24, 0xE9	; 233
     95c:	96 e2       	ldi	r25, 0x26	; 38
     95e:	a1 ef       	ldi	r26, 0xF1	; 241
     960:	be e3       	ldi	r27, 0x3E	; 62
     962:	84 83       	std	Z+4, r24	; 0x04
     964:	95 83       	std	Z+5, r25	; 0x05
     966:	a6 83       	std	Z+6, r26	; 0x06
     968:	b7 83       	std	Z+7, r27	; 0x07
  flows95[1][0] = -12.50;
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	a8 e4       	ldi	r26, 0x48	; 72
     970:	b1 ec       	ldi	r27, 0xC1	; 193
     972:	80 87       	std	Z+8, r24	; 0x08
     974:	91 87       	std	Z+9, r25	; 0x09
     976:	a2 87       	std	Z+10, r26	; 0x0a
     978:	b3 87       	std	Z+11, r27	; 0x0b
  flows95[1][1] = 0.538;
     97a:	8e e5       	ldi	r24, 0x5E	; 94
     97c:	9a eb       	ldi	r25, 0xBA	; 186
     97e:	a9 e0       	ldi	r26, 0x09	; 9
     980:	bf e3       	ldi	r27, 0x3F	; 63
     982:	84 87       	std	Z+12, r24	; 0x0c
     984:	95 87       	std	Z+13, r25	; 0x0d
     986:	a6 87       	std	Z+14, r26	; 0x0e
     988:	b7 87       	std	Z+15, r27	; 0x0f
  flows95[2][0] = -10.00;
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	a0 e2       	ldi	r26, 0x20	; 32
     990:	b1 ec       	ldi	r27, 0xC1	; 193
     992:	80 8b       	std	Z+16, r24	; 0x10
     994:	91 8b       	std	Z+17, r25	; 0x11
     996:	a2 8b       	std	Z+18, r26	; 0x12
     998:	b3 8b       	std	Z+19, r27	; 0x13
  flows95[2][1] = 0.621;
     99a:	8b ed       	ldi	r24, 0xDB	; 219
     99c:	99 ef       	ldi	r25, 0xF9	; 249
     99e:	ae e1       	ldi	r26, 0x1E	; 30
     9a0:	bf e3       	ldi	r27, 0x3F	; 63
     9a2:	84 8b       	std	Z+20, r24	; 0x14
     9a4:	95 8b       	std	Z+21, r25	; 0x15
     9a6:	a6 8b       	std	Z+22, r26	; 0x16
     9a8:	b7 8b       	std	Z+23, r27	; 0x17
  flows95[3][0] = -7.50;
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 ef       	ldi	r26, 0xF0	; 240
     9b0:	b0 ec       	ldi	r27, 0xC0	; 192
     9b2:	80 8f       	std	Z+24, r24	; 0x18
     9b4:	91 8f       	std	Z+25, r25	; 0x19
     9b6:	a2 8f       	std	Z+26, r26	; 0x1a
     9b8:	b3 8f       	std	Z+27, r27	; 0x1b
  flows95[3][1] = 0.735;
     9ba:	86 ef       	ldi	r24, 0xF6	; 246
     9bc:	98 e2       	ldi	r25, 0x28	; 40
     9be:	ac e3       	ldi	r26, 0x3C	; 60
     9c0:	bf e3       	ldi	r27, 0x3F	; 63
     9c2:	84 8f       	std	Z+28, r24	; 0x1c
     9c4:	95 8f       	std	Z+29, r25	; 0x1d
     9c6:	a6 8f       	std	Z+30, r26	; 0x1e
     9c8:	b7 8f       	std	Z+31, r27	; 0x1f
  flows95[4][0] = -5.00;
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	a0 ea       	ldi	r26, 0xA0	; 160
     9d0:	b0 ec       	ldi	r27, 0xC0	; 192
     9d2:	80 a3       	std	Z+32, r24	; 0x20
     9d4:	91 a3       	std	Z+33, r25	; 0x21
     9d6:	a2 a3       	std	Z+34, r26	; 0x22
     9d8:	b3 a3       	std	Z+35, r27	; 0x23
  flows95[4][1] = 0.891;
     9da:	83 e9       	ldi	r24, 0x93	; 147
     9dc:	98 e1       	ldi	r25, 0x18	; 24
     9de:	a4 e6       	ldi	r26, 0x64	; 100
     9e0:	bf e3       	ldi	r27, 0x3F	; 63
     9e2:	84 a3       	std	Z+36, r24	; 0x24
     9e4:	95 a3       	std	Z+37, r25	; 0x25
     9e6:	a6 a3       	std	Z+38, r26	; 0x26
     9e8:	b7 a3       	std	Z+39, r27	; 0x27
  flows95[5][0] = -2.50;
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	a0 e2       	ldi	r26, 0x20	; 32
     9f0:	b0 ec       	ldi	r27, 0xC0	; 192
     9f2:	80 a7       	std	Z+40, r24	; 0x28
     9f4:	91 a7       	std	Z+41, r25	; 0x29
     9f6:	a2 a7       	std	Z+42, r26	; 0x2a
     9f8:	b3 a7       	std	Z+43, r27	; 0x2b
  flows95[5][1] = 1.142;
     9fa:	8e e0       	ldi	r24, 0x0E	; 14
     9fc:	9d e2       	ldi	r25, 0x2D	; 45
     9fe:	a2 e9       	ldi	r26, 0x92	; 146
     a00:	bf e3       	ldi	r27, 0x3F	; 63
     a02:	84 a7       	std	Z+44, r24	; 0x2c
     a04:	95 a7       	std	Z+45, r25	; 0x2d
     a06:	a6 a7       	std	Z+46, r26	; 0x2e
     a08:	b7 a7       	std	Z+47, r27	; 0x2f
  flows95[6][0] = -1.25;
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 ea       	ldi	r26, 0xA0	; 160
     a10:	bf eb       	ldi	r27, 0xBF	; 191
     a12:	80 ab       	std	Z+48, r24	; 0x30
     a14:	91 ab       	std	Z+49, r25	; 0x31
     a16:	a2 ab       	std	Z+50, r26	; 0x32
     a18:	b3 ab       	std	Z+51, r27	; 0x33
  flows95[6][1] = 1.351;
     a1a:	81 e9       	ldi	r24, 0x91	; 145
     a1c:	9d ee       	ldi	r25, 0xED	; 237
     a1e:	ac ea       	ldi	r26, 0xAC	; 172
     a20:	bf e3       	ldi	r27, 0x3F	; 63
     a22:	84 ab       	std	Z+52, r24	; 0x34
     a24:	95 ab       	std	Z+53, r25	; 0x35
     a26:	a6 ab       	std	Z+54, r26	; 0x36
     a28:	b7 ab       	std	Z+55, r27	; 0x37
  flows95[7][0] = 0.00;
     a2a:	10 ae       	std	Z+56, r1	; 0x38
     a2c:	11 ae       	std	Z+57, r1	; 0x39
     a2e:	12 ae       	std	Z+58, r1	; 0x3a
     a30:	13 ae       	std	Z+59, r1	; 0x3b
  flows95[7][1] = 1.751;
     a32:	85 ec       	ldi	r24, 0xC5	; 197
     a34:	90 e2       	ldi	r25, 0x20	; 32
     a36:	a0 ee       	ldi	r26, 0xE0	; 224
     a38:	bf e3       	ldi	r27, 0x3F	; 63
     a3a:	84 af       	std	Z+60, r24	; 0x3c
     a3c:	95 af       	std	Z+61, r25	; 0x3d
     a3e:	a6 af       	std	Z+62, r26	; 0x3e
     a40:	b7 af       	std	Z+63, r27	; 0x3f
  flows95[8][0] = 1.25;
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	a0 ea       	ldi	r26, 0xA0	; 160
     a48:	bf e3       	ldi	r27, 0x3F	; 63
     a4a:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <flows95+0x40>
     a4e:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <flows95+0x41>
     a52:	a0 93 15 02 	sts	0x0215, r26	; 0x800215 <flows95+0x42>
     a56:	b0 93 16 02 	sts	0x0216, r27	; 0x800216 <flows95+0x43>
  flows95[8][1] = 2.143;
     a5a:	89 ee       	ldi	r24, 0xE9	; 233
     a5c:	96 e2       	ldi	r25, 0x26	; 38
     a5e:	a9 e0       	ldi	r26, 0x09	; 9
     a60:	b0 e4       	ldi	r27, 0x40	; 64
     a62:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <flows95+0x44>
     a66:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <flows95+0x45>
     a6a:	a0 93 19 02 	sts	0x0219, r26	; 0x800219 <flows95+0x46>
     a6e:	b0 93 1a 02 	sts	0x021A, r27	; 0x80021a <flows95+0x47>
  flows95[9][0] = 2.50;
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	a0 e2       	ldi	r26, 0x20	; 32
     a78:	b0 e4       	ldi	r27, 0x40	; 64
     a7a:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <flows95+0x48>
     a7e:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <flows95+0x49>
     a82:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <flows95+0x4a>
     a86:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <flows95+0x4b>
  flows95[9][1] = 2.356;
     a8a:	84 eb       	ldi	r24, 0xB4	; 180
     a8c:	98 ec       	ldi	r25, 0xC8	; 200
     a8e:	a6 e1       	ldi	r26, 0x16	; 22
     a90:	b0 e4       	ldi	r27, 0x40	; 64
     a92:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <flows95+0x4c>
     a96:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <flows95+0x4d>
     a9a:	a0 93 21 02 	sts	0x0221, r26	; 0x800221 <flows95+0x4e>
     a9e:	b0 93 22 02 	sts	0x0222, r27	; 0x800222 <flows95+0x4f>
  flows95[10][0] = 5.00;
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	a0 ea       	ldi	r26, 0xA0	; 160
     aa8:	b0 e4       	ldi	r27, 0x40	; 64
     aaa:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <flows95+0x50>
     aae:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <flows95+0x51>
     ab2:	a0 93 25 02 	sts	0x0225, r26	; 0x800225 <flows95+0x52>
     ab6:	b0 93 26 02 	sts	0x0226, r27	; 0x800226 <flows95+0x53>
  flows95[10][1] = 2.615;
     aba:	89 e2       	ldi	r24, 0x29	; 41
     abc:	9c e5       	ldi	r25, 0x5C	; 92
     abe:	a7 e2       	ldi	r26, 0x27	; 39
     ac0:	b0 e4       	ldi	r27, 0x40	; 64
     ac2:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <flows95+0x54>
     ac6:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <flows95+0x55>
     aca:	a0 93 29 02 	sts	0x0229, r26	; 0x800229 <flows95+0x56>
     ace:	b0 93 2a 02 	sts	0x022A, r27	; 0x80022a <flows95+0x57>
  flows95[11][0] = 7.50;
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	a0 ef       	ldi	r26, 0xF0	; 240
     ad8:	b0 e4       	ldi	r27, 0x40	; 64
     ada:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <flows95+0x58>
     ade:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <flows95+0x59>
     ae2:	a0 93 2d 02 	sts	0x022D, r26	; 0x80022d <flows95+0x5a>
     ae6:	b0 93 2e 02 	sts	0x022E, r27	; 0x80022e <flows95+0x5b>
  flows95[11][1] = 2.785;
     aea:	81 e7       	ldi	r24, 0x71	; 113
     aec:	9d e3       	ldi	r25, 0x3D	; 61
     aee:	a2 e3       	ldi	r26, 0x32	; 50
     af0:	b0 e4       	ldi	r27, 0x40	; 64
     af2:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <flows95+0x5c>
     af6:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <flows95+0x5d>
     afa:	a0 93 31 02 	sts	0x0231, r26	; 0x800231 <flows95+0x5e>
     afe:	b0 93 32 02 	sts	0x0232, r27	; 0x800232 <flows95+0x5f>
  flows95[12][0] = 10.00;
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	a0 e2       	ldi	r26, 0x20	; 32
     b08:	b1 e4       	ldi	r27, 0x41	; 65
     b0a:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <flows95+0x60>
     b0e:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <flows95+0x61>
     b12:	a0 93 35 02 	sts	0x0235, r26	; 0x800235 <flows95+0x62>
     b16:	b0 93 36 02 	sts	0x0236, r27	; 0x800236 <flows95+0x63>
  flows95[12][1] = 2.911;
     b1a:	83 ed       	ldi	r24, 0xD3	; 211
     b1c:	9d e4       	ldi	r25, 0x4D	; 77
     b1e:	aa e3       	ldi	r26, 0x3A	; 58
     b20:	b0 e4       	ldi	r27, 0x40	; 64
     b22:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <flows95+0x64>
     b26:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <flows95+0x65>
     b2a:	a0 93 39 02 	sts	0x0239, r26	; 0x800239 <flows95+0x66>
     b2e:	b0 93 3a 02 	sts	0x023A, r27	; 0x80023a <flows95+0x67>
  flows95[13][0] = 12.50;
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	a8 e4       	ldi	r26, 0x48	; 72
     b38:	b1 e4       	ldi	r27, 0x41	; 65
     b3a:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <flows95+0x68>
     b3e:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <flows95+0x69>
     b42:	a0 93 3d 02 	sts	0x023D, r26	; 0x80023d <flows95+0x6a>
     b46:	b0 93 3e 02 	sts	0x023E, r27	; 0x80023e <flows95+0x6b>
  flows95[13][1] = 3.008;
     b4a:	82 e1       	ldi	r24, 0x12	; 18
     b4c:	93 e8       	ldi	r25, 0x83	; 131
     b4e:	a0 e4       	ldi	r26, 0x40	; 64
     b50:	b0 e4       	ldi	r27, 0x40	; 64
     b52:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <flows95+0x6c>
     b56:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <flows95+0x6d>
     b5a:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <flows95+0x6e>
     b5e:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <flows95+0x6f>
  flows95[14][0] = 15.00;
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e7       	ldi	r26, 0x70	; 112
     b68:	b1 e4       	ldi	r27, 0x41	; 65
     b6a:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <flows95+0x70>
     b6e:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <flows95+0x71>
     b72:	a0 93 45 02 	sts	0x0245, r26	; 0x800245 <flows95+0x72>
     b76:	b0 93 46 02 	sts	0x0246, r27	; 0x800246 <flows95+0x73>
  flows95[14][1] = 3.096;
     b7a:	8d ed       	ldi	r24, 0xDD	; 221
     b7c:	94 e2       	ldi	r25, 0x24	; 36
     b7e:	a6 e4       	ldi	r26, 0x46	; 70
     b80:	b0 e4       	ldi	r27, 0x40	; 64
     b82:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <flows95+0x74>
     b86:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <flows95+0x75>
     b8a:	a0 93 49 02 	sts	0x0249, r26	; 0x800249 <flows95+0x76>
     b8e:	b0 93 4a 02 	sts	0x024A, r27	; 0x80024a <flows95+0x77>
  set2();
     b92:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <_Z4set2v>

00000b96 <_Z11interpolatePA2_ff>:
}




float interpolate(float values[15][2], float val) {
     b96:	2f 92       	push	r2
     b98:	3f 92       	push	r3
     b9a:	4f 92       	push	r4
     b9c:	5f 92       	push	r5
     b9e:	6f 92       	push	r6
     ba0:	7f 92       	push	r7
     ba2:	8f 92       	push	r8
     ba4:	9f 92       	push	r9
     ba6:	af 92       	push	r10
     ba8:	bf 92       	push	r11
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	28 97       	sbiw	r28, 0x08	; 8
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	98 87       	std	Y+8, r25	; 0x08
     bcc:	8f 83       	std	Y+7, r24	; 0x07
     bce:	4a 01       	movw	r8, r20
     bd0:	5b 01       	movw	r10, r22
  float lastVal; // S small
  float currentVal; // S big
  float lastKey; // F small
  float currentKey; // F big
  if (val >= 3.096) {
     bd2:	2d ed       	ldi	r18, 0xDD	; 221
     bd4:	34 e2       	ldi	r19, 0x24	; 36
     bd6:	46 e4       	ldi	r20, 0x46	; 70
     bd8:	50 e4       	ldi	r21, 0x40	; 64
     bda:	c5 01       	movw	r24, r10
     bdc:	b4 01       	movw	r22, r8
     bde:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__gesf2>
//    Serial.println("-------------\ninterpolation error: value to large");
//    Serial.println(val);
    
    return values[14][1];
     be2:	2f 81       	ldd	r18, Y+7	; 0x07
     be4:	38 85       	ldd	r19, Y+8	; 0x08
float interpolate(float values[15][2], float val) {
  float lastVal; // S small
  float currentVal; // S big
  float lastKey; // F small
  float currentKey; // F big
  if (val >= 3.096) {
     be6:	87 fd       	sbrc	r24, 7
     be8:	08 c0       	rjmp	.+16     	; 0xbfa <_Z11interpolatePA2_ff+0x64>
//    Serial.println("-------------\ninterpolation error: value to large");
//    Serial.println(val);
    
    return values[14][1];
     bea:	20 59       	subi	r18, 0x90	; 144
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	f9 01       	movw	r30, r18
     bf0:	64 81       	ldd	r22, Z+4	; 0x04
     bf2:	75 81       	ldd	r23, Z+5	; 0x05
     bf4:	86 81       	ldd	r24, Z+6	; 0x06
     bf6:	97 81       	ldd	r25, Z+7	; 0x07
     bf8:	59 c0       	rjmp	.+178    	; 0xcac <_Z11interpolatePA2_ff+0x116>
     bfa:	28 58       	subi	r18, 0x88	; 136
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
     bfe:	3e 83       	std	Y+6, r19	; 0x06
     c00:	2d 83       	std	Y+5, r18	; 0x05
  }

  for (int i = 0; i <= 14; i++) {
    currentVal = values[i][1];
     c02:	ef 81       	ldd	r30, Y+7	; 0x07
     c04:	f8 85       	ldd	r31, Y+8	; 0x08
     c06:	e4 80       	ldd	r14, Z+4	; 0x04
     c08:	f5 80       	ldd	r15, Z+5	; 0x05
     c0a:	06 81       	ldd	r16, Z+6	; 0x06
     c0c:	17 81       	ldd	r17, Z+7	; 0x07
    currentKey = values[i][0];
     c0e:	70 80       	ld	r7, Z
     c10:	c1 80       	ldd	r12, Z+1	; 0x01
     c12:	d2 80       	ldd	r13, Z+2	; 0x02
     c14:	23 80       	ldd	r2, Z+3	; 0x03
    if (!(val >= currentVal))
     c16:	97 01       	movw	r18, r14
     c18:	a8 01       	movw	r20, r16
     c1a:	c5 01       	movw	r24, r10
     c1c:	b4 01       	movw	r22, r8
     c1e:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__gesf2>
     c22:	87 fd       	sbrc	r24, 7
     c24:	13 c0       	rjmp	.+38     	; 0xc4c <_Z11interpolatePA2_ff+0xb6>
     c26:	2f 81       	ldd	r18, Y+7	; 0x07
     c28:	38 85       	ldd	r19, Y+8	; 0x08
     c2a:	28 5f       	subi	r18, 0xF8	; 248
     c2c:	3f 4f       	sbci	r19, 0xFF	; 255
     c2e:	38 87       	std	Y+8, r19	; 0x08
     c30:	2f 83       	std	Y+7, r18	; 0x07
    
    return values[14][1];
  }

  for (int i = 0; i <= 14; i++) {
    currentVal = values[i][1];
     c32:	3e 2c       	mov	r3, r14
     c34:	4f 2c       	mov	r4, r15
     c36:	50 2e       	mov	r5, r16
     c38:	61 2e       	mov	r6, r17
    currentKey = values[i][0];
     c3a:	79 82       	std	Y+1, r7	; 0x01
     c3c:	ca 82       	std	Y+2, r12	; 0x02
     c3e:	db 82       	std	Y+3, r13	; 0x03
     c40:	2c 82       	std	Y+4, r2	; 0x04
//    Serial.println(val);
    
    return values[14][1];
  }

  for (int i = 0; i <= 14; i++) {
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	28 17       	cp	r18, r24
     c48:	39 07       	cpc	r19, r25
     c4a:	d9 f6       	brne	.-74     	; 0xc02 <_Z11interpolatePA2_ff+0x6c>
    if (!(val >= currentVal))
      break;
    lastVal = currentVal;
    lastKey = currentKey;
  }
  float out = (((val - lastVal) / (currentVal - lastVal)) * (currentKey - lastKey)) + lastKey;
     c4c:	23 2d       	mov	r18, r3
     c4e:	34 2d       	mov	r19, r4
     c50:	45 2d       	mov	r20, r5
     c52:	56 2d       	mov	r21, r6
     c54:	c5 01       	movw	r24, r10
     c56:	b4 01       	movw	r22, r8
     c58:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__subsf3>
     c5c:	4b 01       	movw	r8, r22
     c5e:	5c 01       	movw	r10, r24
     c60:	23 2d       	mov	r18, r3
     c62:	34 2d       	mov	r19, r4
     c64:	45 2d       	mov	r20, r5
     c66:	56 2d       	mov	r21, r6
     c68:	b7 01       	movw	r22, r14
     c6a:	c8 01       	movw	r24, r16
     c6c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__subsf3>
     c70:	9b 01       	movw	r18, r22
     c72:	ac 01       	movw	r20, r24
     c74:	c5 01       	movw	r24, r10
     c76:	b4 01       	movw	r22, r8
     c78:	0e 94 14 0a 	call	0x1428	; 0x1428 <__divsf3>
     c7c:	4b 01       	movw	r8, r22
     c7e:	5c 01       	movw	r10, r24
     c80:	29 81       	ldd	r18, Y+1	; 0x01
     c82:	3a 81       	ldd	r19, Y+2	; 0x02
     c84:	4b 81       	ldd	r20, Y+3	; 0x03
     c86:	5c 81       	ldd	r21, Y+4	; 0x04
     c88:	67 2d       	mov	r22, r7
     c8a:	7c 2d       	mov	r23, r12
     c8c:	8d 2d       	mov	r24, r13
     c8e:	92 2d       	mov	r25, r2
     c90:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__subsf3>
     c94:	9b 01       	movw	r18, r22
     c96:	ac 01       	movw	r20, r24
     c98:	c5 01       	movw	r24, r10
     c9a:	b4 01       	movw	r22, r8
     c9c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     ca0:	29 81       	ldd	r18, Y+1	; 0x01
     ca2:	3a 81       	ldd	r19, Y+2	; 0x02
     ca4:	4b 81       	ldd	r20, Y+3	; 0x03
     ca6:	5c 81       	ldd	r21, Y+4	; 0x04
     ca8:	0e 94 6f 09 	call	0x12de	; 0x12de <__addsf3>
    Serial.println();
    Serial.println(val);
  */
  return out;

}
     cac:	28 96       	adiw	r28, 0x08	; 8
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	df 90       	pop	r13
     cc6:	cf 90       	pop	r12
     cc8:	bf 90       	pop	r11
     cca:	af 90       	pop	r10
     ccc:	9f 90       	pop	r9
     cce:	8f 90       	pop	r8
     cd0:	7f 90       	pop	r7
     cd2:	6f 90       	pop	r6
     cd4:	5f 90       	pop	r5
     cd6:	4f 90       	pop	r4
     cd8:	3f 90       	pop	r3
     cda:	2f 90       	pop	r2
     cdc:	08 95       	ret

00000cde <_Z12getTotalWindff>:
  tft.fillRect(0, 0, tft.width() , tft.height(), 0x0001);

}


float getTotalWind(float WSy, float WSx) {
     cde:	8f 92       	push	r8
     ce0:	9f 92       	push	r9
     ce2:	af 92       	push	r10
     ce4:	bf 92       	push	r11
     ce6:	cf 92       	push	r12
     ce8:	df 92       	push	r13
     cea:	ef 92       	push	r14
     cec:	ff 92       	push	r15
     cee:	6b 01       	movw	r12, r22
     cf0:	7c 01       	movw	r14, r24
     cf2:	ca 01       	movw	r24, r20
     cf4:	b9 01       	movw	r22, r18

  return sqrt(sq(WSx) + sq(WSy));
     cf6:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     cfa:	4b 01       	movw	r8, r22
     cfc:	5c 01       	movw	r10, r24
     cfe:	a7 01       	movw	r20, r14
     d00:	96 01       	movw	r18, r12
     d02:	c7 01       	movw	r24, r14
     d04:	b6 01       	movw	r22, r12
     d06:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     d0a:	9b 01       	movw	r18, r22
     d0c:	ac 01       	movw	r20, r24
     d0e:	c5 01       	movw	r24, r10
     d10:	b4 01       	movw	r22, r8
     d12:	0e 94 6f 09 	call	0x12de	; 0x12de <__addsf3>
}
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	df 90       	pop	r13
     d1c:	cf 90       	pop	r12
     d1e:	bf 90       	pop	r11
     d20:	af 90       	pop	r10
     d22:	9f 90       	pop	r9
     d24:	8f 90       	pop	r8
}


float getTotalWind(float WSy, float WSx) {

  return sqrt(sq(WSx) + sq(WSy));
     d26:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <sqrt>

00000d2a <_Z12getWindAngleff>:
}

float getWindAngle(float WSy, float WSx) {
     d2a:	8f 92       	push	r8
     d2c:	9f 92       	push	r9
     d2e:	af 92       	push	r10
     d30:	bf 92       	push	r11
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	6b 01       	movw	r12, r22
     d3c:	7c 01       	movw	r14, r24
     d3e:	49 01       	movw	r8, r18
     d40:	5a 01       	movw	r10, r20

  if (WSy == 0)
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	a9 01       	movw	r20, r18
     d48:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__cmpsf2>
     d4c:	81 11       	cpse	r24, r1
     d4e:	06 c0       	rjmp	.+12     	; 0xd5c <_Z12getWindAngleff+0x32>
    WSy = 1;  if (WSy == 0)
     d50:	c1 2c       	mov	r12, r1
     d52:	d1 2c       	mov	r13, r1
     d54:	90 e8       	ldi	r25, 0x80	; 128
     d56:	e9 2e       	mov	r14, r25
     d58:	9f e3       	ldi	r25, 0x3F	; 63
     d5a:	f9 2e       	mov	r15, r25
    WSy = 1;
  if (WSx == 0)
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	a9 01       	movw	r20, r18
     d62:	c5 01       	movw	r24, r10
     d64:	b4 01       	movw	r22, r8
     d66:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__cmpsf2>
     d6a:	81 11       	cpse	r24, r1
     d6c:	06 c0       	rjmp	.+12     	; 0xd7a <_Z12getWindAngleff+0x50>
    WSx = 1;
     d6e:	81 2c       	mov	r8, r1
     d70:	91 2c       	mov	r9, r1
     d72:	80 e8       	ldi	r24, 0x80	; 128
     d74:	a8 2e       	mov	r10, r24
     d76:	8f e3       	ldi	r24, 0x3F	; 63
     d78:	b8 2e       	mov	r11, r24
    WSx = 1;

  //// Serial.println("------");
  //// Serial.println(WSy);
  //  // Serial.println(WSx);
  return atan(WSy / WSx);
     d7a:	a5 01       	movw	r20, r10
     d7c:	94 01       	movw	r18, r8
     d7e:	c7 01       	movw	r24, r14
     d80:	b6 01       	movw	r22, r12
     d82:	0e 94 14 0a 	call	0x1428	; 0x1428 <__divsf3>

}
     d86:	ff 90       	pop	r15
     d88:	ef 90       	pop	r14
     d8a:	df 90       	pop	r13
     d8c:	cf 90       	pop	r12
     d8e:	bf 90       	pop	r11
     d90:	af 90       	pop	r10
     d92:	9f 90       	pop	r9
     d94:	8f 90       	pop	r8
    WSx = 1;

  //// Serial.println("------");
  //// Serial.println(WSy);
  //  // Serial.println(WSx);
  return atan(WSy / WSx);
     d96:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <atan>

00000d9a <_GLOBAL__sub_I_flows94>:

#define TFT_CS     10
#define TFT_RST    9
#define TFT_DC     8

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);
     d9a:	29 e0       	ldi	r18, 0x09	; 9
     d9c:	48 e0       	ldi	r20, 0x08	; 8
     d9e:	6a e0       	ldi	r22, 0x0A	; 10
     da0:	82 ea       	ldi	r24, 0xA2	; 162
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	0c 94 aa 18 	jmp	0x3154	; 0x3154 <_ZN15Adafruit_ST7735C1Eaaa>

00000da8 <_Z8plotLineiifi>:

int lastX1;
int lastY1;
float lastAngle;

void plotLine(int x0, int y0, float angle, int length = 50) {
     da8:	2f 92       	push	r2
     daa:	3f 92       	push	r3
     dac:	4f 92       	push	r4
     dae:	5f 92       	push	r5
     db0:	6f 92       	push	r6
     db2:	7f 92       	push	r7
     db4:	8f 92       	push	r8
     db6:	9f 92       	push	r9
     db8:	af 92       	push	r10
     dba:	bf 92       	push	r11
     dbc:	cf 92       	push	r12
     dbe:	df 92       	push	r13
     dc0:	ef 92       	push	r14
     dc2:	ff 92       	push	r15
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	00 d0       	rcall	.+0      	; 0xdce <_Z8plotLineiifi+0x26>
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <_Z8plotLineiifi+0x28>
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <_Z8plotLineiifi+0x2a>
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	1c 01       	movw	r2, r24
     dd8:	7e 83       	std	Y+6, r23	; 0x06
     dda:	6d 83       	std	Y+5, r22	; 0x05
     ddc:	69 01       	movw	r12, r18
     dde:	7a 01       	movw	r14, r20
  if (angle == 0) return;
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	a9 01       	movw	r20, r18
     de6:	c7 01       	movw	r24, r14
     de8:	b6 01       	movw	r22, r12
     dea:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__cmpsf2>
     dee:	88 23       	and	r24, r24
     df0:	09 f4       	brne	.+2      	; 0xdf4 <_Z8plotLineiifi+0x4c>
     df2:	61 c0       	rjmp	.+194    	; 0xeb6 <_Z8plotLineiifi+0x10e>

  int x1 = x0 + (length * cos(angle));
     df4:	b8 01       	movw	r22, r16
     df6:	11 0f       	add	r17, r17
     df8:	88 0b       	sbc	r24, r24
     dfa:	99 0b       	sbc	r25, r25
     dfc:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatsisf>
     e00:	4b 01       	movw	r8, r22
     e02:	5c 01       	movw	r10, r24
     e04:	c7 01       	movw	r24, r14
     e06:	b6 01       	movw	r22, r12
     e08:	0e 94 0f 0a 	call	0x141e	; 0x141e <cos>
     e0c:	69 83       	std	Y+1, r22	; 0x01
     e0e:	7a 83       	std	Y+2, r23	; 0x02
     e10:	8b 83       	std	Y+3, r24	; 0x03
     e12:	9c 83       	std	Y+4, r25	; 0x04
     e14:	b1 01       	movw	r22, r2
     e16:	03 2c       	mov	r0, r3
     e18:	00 0c       	add	r0, r0
     e1a:	88 0b       	sbc	r24, r24
     e1c:	99 0b       	sbc	r25, r25
     e1e:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatsisf>
     e22:	2b 01       	movw	r4, r22
     e24:	3c 01       	movw	r6, r24
     e26:	29 81       	ldd	r18, Y+1	; 0x01
     e28:	3a 81       	ldd	r19, Y+2	; 0x02
     e2a:	4b 81       	ldd	r20, Y+3	; 0x03
     e2c:	5c 81       	ldd	r21, Y+4	; 0x04
     e2e:	c5 01       	movw	r24, r10
     e30:	b4 01       	movw	r22, r8
     e32:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     e36:	9b 01       	movw	r18, r22
     e38:	ac 01       	movw	r20, r24
     e3a:	c3 01       	movw	r24, r6
     e3c:	b2 01       	movw	r22, r4
     e3e:	0e 94 6f 09 	call	0x12de	; 0x12de <__addsf3>
     e42:	0e 94 86 0a 	call	0x150c	; 0x150c <__fixsfsi>
     e46:	69 83       	std	Y+1, r22	; 0x01
     e48:	7a 83       	std	Y+2, r23	; 0x02
     e4a:	8b 83       	std	Y+3, r24	; 0x03
     e4c:	9c 83       	std	Y+4, r25	; 0x04
  int y1 = y0 + (length * sin(angle));
     e4e:	c7 01       	movw	r24, r14
     e50:	b6 01       	movw	r22, r12
     e52:	0e 94 4e 0c 	call	0x189c	; 0x189c <sin>
     e56:	2b 01       	movw	r4, r22
     e58:	3c 01       	movw	r6, r24
     e5a:	2d 81       	ldd	r18, Y+5	; 0x05
     e5c:	3e 81       	ldd	r19, Y+6	; 0x06
     e5e:	b9 01       	movw	r22, r18
     e60:	33 0f       	add	r19, r19
     e62:	88 0b       	sbc	r24, r24
     e64:	99 0b       	sbc	r25, r25
     e66:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatsisf>
     e6a:	6b 01       	movw	r12, r22
     e6c:	7c 01       	movw	r14, r24
     e6e:	a3 01       	movw	r20, r6
     e70:	92 01       	movw	r18, r4
     e72:	c5 01       	movw	r24, r10
     e74:	b4 01       	movw	r22, r8
     e76:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     e7a:	9b 01       	movw	r18, r22
     e7c:	ac 01       	movw	r20, r24
     e7e:	c7 01       	movw	r24, r14
     e80:	b6 01       	movw	r22, r12
     e82:	0e 94 6f 09 	call	0x12de	; 0x12de <__addsf3>
     e86:	0e 94 86 0a 	call	0x150c	; 0x150c <__fixsfsi>
  lastX1 = x1;
     e8a:	29 81       	ldd	r18, Y+1	; 0x01
     e8c:	3a 81       	ldd	r19, Y+2	; 0x02
     e8e:	30 93 a1 01 	sts	0x01A1, r19	; 0x8001a1 <lastX1+0x1>
     e92:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <lastX1>
  lastY1 = y1;
     e96:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <lastY1+0x1>
     e9a:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <lastY1>
  tft.drawLine(x0, y0, x1, y1, 0xF81F);
     e9e:	8f e1       	ldi	r24, 0x1F	; 31
     ea0:	e8 2e       	mov	r14, r24
     ea2:	88 ef       	ldi	r24, 0xF8	; 248
     ea4:	f8 2e       	mov	r15, r24
     ea6:	8b 01       	movw	r16, r22
     ea8:	4d 81       	ldd	r20, Y+5	; 0x05
     eaa:	5e 81       	ldd	r21, Y+6	; 0x06
     eac:	b1 01       	movw	r22, r2
     eae:	82 ea       	ldi	r24, 0xA2	; 162
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZN12Adafruit_GFX8drawLineEiiiij>
}
     eb6:	26 96       	adiw	r28, 0x06	; 6
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	ff 90       	pop	r15
     ecc:	ef 90       	pop	r14
     ece:	df 90       	pop	r13
     ed0:	cf 90       	pop	r12
     ed2:	bf 90       	pop	r11
     ed4:	af 90       	pop	r10
     ed6:	9f 90       	pop	r9
     ed8:	8f 90       	pop	r8
     eda:	7f 90       	pop	r7
     edc:	6f 90       	pop	r6
     ede:	5f 90       	pop	r5
     ee0:	4f 90       	pop	r4
     ee2:	3f 90       	pop	r3
     ee4:	2f 90       	pop	r2
     ee6:	08 95       	ret

00000ee8 <setup>:

void setup() {
     ee8:	ef 92       	push	r14
     eea:	ff 92       	push	r15
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
  tft.initR(INITR_BLACKTAB);
     ef0:	62 e0       	ldi	r22, 0x02	; 2
     ef2:	82 ea       	ldi	r24, 0xA2	; 162
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	0e 94 84 1a 	call	0x3508	; 0x3508 <_ZN15Adafruit_ST77355initREh>
  pinMode(LED_BUILTIN, OUTPUT);
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	8d e0       	ldi	r24, 0x0D	; 13
     efe:	0e 94 89 11 	call	0x2312	; 0x2312 <pinMode>

  pinMode(2, OUTPUT);
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	0e 94 89 11 	call	0x2312	; 0x2312 <pinMode>
  pinMode(A0, INPUT);
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	8e e0       	ldi	r24, 0x0E	; 14
     f0e:	0e 94 89 11 	call	0x2312	; 0x2312 <pinMode>
  pinMode(A1, INPUT);
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	8f e0       	ldi	r24, 0x0F	; 15
     f16:	0e 94 89 11 	call	0x2312	; 0x2312 <pinMode>
  pinMode(A2, INPUT);
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	80 e1       	ldi	r24, 0x10	; 16
     f1e:	0e 94 89 11 	call	0x2312	; 0x2312 <pinMode>
  pinMode(6, OUTPUT);
     f22:	61 e0       	ldi	r22, 0x01	; 1
     f24:	86 e0       	ldi	r24, 0x06	; 6
     f26:	0e 94 89 11 	call	0x2312	; 0x2312 <pinMode>
  digitalWrite(6, HIGH);
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	86 e0       	ldi	r24, 0x06	; 6
     f2e:	0e 94 c5 11 	call	0x238a	; 0x238a <digitalWrite>
  digitalWrite(7, HIGH);
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	87 e0       	ldi	r24, 0x07	; 7
     f36:	0e 94 c5 11 	call	0x238a	; 0x238a <digitalWrite>
  digitalWrite(5, LOW);
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	85 e0       	ldi	r24, 0x05	; 5
     f3e:	0e 94 c5 11 	call	0x238a	; 0x238a <digitalWrite>
  digitalWrite(2, HIGH);
     f42:	61 e0       	ldi	r22, 0x01	; 1
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	0e 94 c5 11 	call	0x238a	; 0x238a <digitalWrite>


  set();
     f4a:	0e 94 a3 04 	call	0x946	; 0x946 <_Z3setv>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     f4e:	26 e0       	ldi	r18, 0x06	; 6
     f50:	40 e8       	ldi	r20, 0x80	; 128
     f52:	55 e2       	ldi	r21, 0x25	; 37
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	83 ec       	ldi	r24, 0xC3	; 195
     f5a:	92 e0       	ldi	r25, 0x02	; 2
     f5c:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <_ZN14HardwareSerial5beginEmh>
  Serial.begin(9600);
  tft.fillRect(0, 0, tft.width() , tft.height(), 0x0001);
     f60:	82 ea       	ldi	r24, 0xA2	; 162
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	0e 94 5e 18 	call	0x30bc	; 0x30bc <_ZNK12Adafruit_GFX6heightEv>
     f68:	8c 01       	movw	r16, r24
     f6a:	82 ea       	ldi	r24, 0xA2	; 162
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <_ZNK12Adafruit_GFX5widthEv>
     f72:	ee 24       	eor	r14, r14
     f74:	e3 94       	inc	r14
     f76:	f1 2c       	mov	r15, r1
     f78:	9c 01       	movw	r18, r24
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	82 ea       	ldi	r24, 0xA2	; 162
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	0e 94 ed 1b 	call	0x37da	; 0x37da <_ZN15Adafruit_ST77358fillRectEiiiij>

}
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	08 95       	ret

00000f94 <loop>:

int c = 0;
float lastSpeed = 0;


void loop() {
     f94:	8f 92       	push	r8
     f96:	9f 92       	push	r9
     f98:	af 92       	push	r10
     f9a:	bf 92       	push	r11
     f9c:	cf 92       	push	r12
     f9e:	df 92       	push	r13
     fa0:	ef 92       	push	r14
     fa2:	ff 92       	push	r15
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	00 d0       	rcall	.+0      	; 0xfae <loop+0x1a>
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <loop+0x1c>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <loop+0x1e>
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
     fb6:	61 e0       	ldi	r22, 0x01	; 1
     fb8:	8d e0       	ldi	r24, 0x0D	; 13
     fba:	0e 94 c5 11 	call	0x238a	; 0x238a <digitalWrite>

  float raw0 = analogRead(A0);
     fbe:	8e e0       	ldi	r24, 0x0E	; 14
     fc0:	0e 94 43 11 	call	0x2286	; 0x2286 <analogRead>
     fc4:	8c 01       	movw	r16, r24
  float raw1 = analogRead(A2);
     fc6:	80 e1       	ldi	r24, 0x10	; 16
     fc8:	0e 94 43 11 	call	0x2286	; 0x2286 <analogRead>

  //  plotLine(x0, y0, PI/2);
  float Ywind = interpolate(flows95, (raw1 / 1023.0) * 5.0);
     fcc:	bc 01       	movw	r22, r24
     fce:	99 0f       	add	r25, r25
     fd0:	88 0b       	sbc	r24, r24
     fd2:	99 0b       	sbc	r25, r25
     fd4:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatsisf>
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 ec       	ldi	r19, 0xC0	; 192
     fdc:	4f e7       	ldi	r20, 0x7F	; 127
     fde:	54 e4       	ldi	r21, 0x44	; 68
     fe0:	0e 94 14 0a 	call	0x1428	; 0x1428 <__divsf3>
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 ea       	ldi	r20, 0xA0	; 160
     fea:	50 e4       	ldi	r21, 0x40	; 64
     fec:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
     ff0:	ab 01       	movw	r20, r22
     ff2:	bc 01       	movw	r22, r24
     ff4:	83 ed       	ldi	r24, 0xD3	; 211
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	0e 94 cb 05 	call	0xb96	; 0xb96 <_Z11interpolatePA2_ff>
     ffc:	6b 01       	movw	r12, r22
     ffe:	7c 01       	movw	r14, r24
  float Xwind = interpolate(flows94, (raw0 / 1023.0) * 5.0);
    1000:	b8 01       	movw	r22, r16
    1002:	11 0f       	add	r17, r17
    1004:	88 0b       	sbc	r24, r24
    1006:	99 0b       	sbc	r25, r25
    1008:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatsisf>
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 ec       	ldi	r19, 0xC0	; 192
    1010:	4f e7       	ldi	r20, 0x7F	; 127
    1012:	54 e4       	ldi	r21, 0x44	; 68
    1014:	0e 94 14 0a 	call	0x1428	; 0x1428 <__divsf3>
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 ea       	ldi	r20, 0xA0	; 160
    101e:	50 e4       	ldi	r21, 0x40	; 64
    1020:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
    1024:	ab 01       	movw	r20, r22
    1026:	bc 01       	movw	r22, r24
    1028:	8b e4       	ldi	r24, 0x4B	; 75
    102a:	92 e0       	ldi	r25, 0x02	; 2
    102c:	0e 94 cb 05 	call	0xb96	; 0xb96 <_Z11interpolatePA2_ff>
    1030:	9b 01       	movw	r18, r22
    1032:	ac 01       	movw	r20, r24
  float totalWind = getTotalWind(Ywind, Xwind);
    1034:	c7 01       	movw	r24, r14
    1036:	b6 01       	movw	r22, r12
    1038:	0e 94 6f 06 	call	0xcde	; 0xcde <_Z12getTotalWindff>
    103c:	6b 01       	movw	r12, r22
    103e:	7c 01       	movw	r14, r24
  // Serial.println(Xwind);
  // Serial.println("Ywind");
  // Serial.println(Ywind);
  // Serial.println("totalwind:");
  //   Serial.println(totalWind);
  if (totalWind >= 1) {
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e8       	ldi	r20, 0x80	; 128
    1046:	5f e3       	ldi	r21, 0x3F	; 63
    1048:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__gesf2>
    104c:	87 fd       	sbrc	r24, 7
    104e:	33 c1       	rjmp	.+614    	; 0x12b6 <loop+0x322>
    tft.setRotation(2);
    1050:	62 e0       	ldi	r22, 0x02	; 2
    1052:	82 ea       	ldi	r24, 0xA2	; 162
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	0e 94 1e 1b 	call	0x363c	; 0x363c <_ZN15Adafruit_ST773511setRotationEh>
    tft.setCursor(64, 10);
    105a:	4a e0       	ldi	r20, 0x0A	; 10
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	60 e4       	ldi	r22, 0x40	; 64
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	82 ea       	ldi	r24, 0xA2	; 162
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	0e 94 4e 18 	call	0x309c	; 0x309c <_ZN12Adafruit_GFX9setCursorEii>
    tft.setTextColor(0);
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	82 ea       	ldi	r24, 0xA2	; 162
    1070:	91 e0       	ldi	r25, 0x01	; 1
    1072:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN12Adafruit_GFX12setTextColorEj>
    tft.print(lastSpeed);
    1076:	40 91 96 01 	lds	r20, 0x0196	; 0x800196 <__data_end>
    107a:	50 91 97 01 	lds	r21, 0x0197	; 0x800197 <__data_end+0x1>
    107e:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <__data_end+0x2>
    1082:	70 91 99 01 	lds	r23, 0x0199	; 0x800199 <__data_end+0x3>
    1086:	22 e0       	ldi	r18, 0x02	; 2
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	82 ea       	ldi	r24, 0xA2	; 162
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	0e 94 49 10 	call	0x2092	; 0x2092 <_ZN5Print5printEdi>
    tft.setCursor(64, 10);
    1092:	4a e0       	ldi	r20, 0x0A	; 10
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	60 e4       	ldi	r22, 0x40	; 64
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	82 ea       	ldi	r24, 0xA2	; 162
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	0e 94 4e 18 	call	0x309c	; 0x309c <_ZN12Adafruit_GFX9setCursorEii>

    tft.setTextColor(0xFFFFF);
    10a2:	6f ef       	ldi	r22, 0xFF	; 255
    10a4:	7f ef       	ldi	r23, 0xFF	; 255
    10a6:	82 ea       	ldi	r24, 0xA2	; 162
    10a8:	91 e0       	ldi	r25, 0x01	; 1
    10aa:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN12Adafruit_GFX12setTextColorEj>
    int windKMh = totalWind * 3.6;
    10ae:	26 e6       	ldi	r18, 0x66	; 102
    10b0:	36 e6       	ldi	r19, 0x66	; 102
    10b2:	46 e6       	ldi	r20, 0x66	; 102
    10b4:	50 e4       	ldi	r21, 0x40	; 64
    10b6:	c7 01       	movw	r24, r14
    10b8:	b6 01       	movw	r22, r12
    10ba:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
    10be:	0e 94 86 0a 	call	0x150c	; 0x150c <__fixsfsi>
    10c2:	6b 01       	movw	r12, r22
    10c4:	7c 01       	movw	r14, r24
    tft.print(String(windKMh));
    10c6:	4a e0       	ldi	r20, 0x0A	; 10
    10c8:	ce 01       	movw	r24, r28
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	0e 94 79 12 	call	0x24f2	; 0x24f2 <_ZN6StringC1Eih>
    10d0:	be 01       	movw	r22, r28
    10d2:	6f 5f       	subi	r22, 0xFF	; 255
    10d4:	7f 4f       	sbci	r23, 0xFF	; 255
    10d6:	82 ea       	ldi	r24, 0xA2	; 162
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_ZN5Print5printERK6String>
    10de:	ce 01       	movw	r24, r28
    10e0:	01 96       	adiw	r24, 0x01	; 1
    10e2:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_ZN6StringD1Ev>
    tft.print(" km/h");
    10e6:	6b e0       	ldi	r22, 0x0B	; 11
    10e8:	71 e0       	ldi	r23, 0x01	; 1
    10ea:	82 ea       	ldi	r24, 0xA2	; 162
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_ZN5Print5printEPKc>
    lastSpeed = windKMh;
    10f2:	b6 01       	movw	r22, r12
    10f4:	dd 0c       	add	r13, r13
    10f6:	88 0b       	sbc	r24, r24
    10f8:	99 0b       	sbc	r25, r25
    10fa:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatsisf>
    10fe:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <__data_end>
    1102:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <__data_end+0x1>
    1106:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end+0x2>
    110a:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <__data_end+0x3>

    raw0 = analogRead(A0);
    110e:	8e e0       	ldi	r24, 0x0E	; 14
    1110:	0e 94 43 11 	call	0x2286	; 0x2286 <analogRead>
    1114:	7c 01       	movw	r14, r24
    raw1 = analogRead(A2);
    1116:	80 e1       	ldi	r24, 0x10	; 16
    1118:	0e 94 43 11 	call	0x2286	; 0x2286 <analogRead>
    111c:	8c 01       	movw	r16, r24

    Serial.println(raw0 / 1023.0 * 5);
    111e:	b7 01       	movw	r22, r14
    1120:	ff 0c       	add	r15, r15
    1122:	88 0b       	sbc	r24, r24
    1124:	99 0b       	sbc	r25, r25
    1126:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatsisf>
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 ec       	ldi	r19, 0xC0	; 192
    112e:	4f e7       	ldi	r20, 0x7F	; 127
    1130:	54 e4       	ldi	r21, 0x44	; 68
    1132:	0e 94 14 0a 	call	0x1428	; 0x1428 <__divsf3>
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 ea       	ldi	r20, 0xA0	; 160
    113c:	50 e4       	ldi	r21, 0x40	; 64
    113e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
    1142:	4b 01       	movw	r8, r22
    1144:	5c 01       	movw	r10, r24
    1146:	22 e0       	ldi	r18, 0x02	; 2
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	ab 01       	movw	r20, r22
    114c:	bc 01       	movw	r22, r24
    114e:	83 ec       	ldi	r24, 0xC3	; 195
    1150:	92 e0       	ldi	r25, 0x02	; 2
    1152:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZN5Print7printlnEdi>
    Serial.println(raw1 / 1023.0 * 5);
    1156:	b8 01       	movw	r22, r16
    1158:	11 0f       	add	r17, r17
    115a:	88 0b       	sbc	r24, r24
    115c:	99 0b       	sbc	r25, r25
    115e:	0e 94 be 0a 	call	0x157c	; 0x157c <__floatsisf>
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 ec       	ldi	r19, 0xC0	; 192
    1166:	4f e7       	ldi	r20, 0x7F	; 127
    1168:	54 e4       	ldi	r21, 0x44	; 68
    116a:	0e 94 14 0a 	call	0x1428	; 0x1428 <__divsf3>
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 ea       	ldi	r20, 0xA0	; 160
    1174:	50 e4       	ldi	r21, 0x40	; 64
    1176:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
    117a:	6b 01       	movw	r12, r22
    117c:	7c 01       	movw	r14, r24
    117e:	22 e0       	ldi	r18, 0x02	; 2
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	ab 01       	movw	r20, r22
    1184:	bc 01       	movw	r22, r24
    1186:	83 ec       	ldi	r24, 0xC3	; 195
    1188:	92 e0       	ldi	r25, 0x02	; 2
    118a:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZN5Print7printlnEdi>
    Serial.println("--------");
    118e:	64 e1       	ldi	r22, 0x14	; 20
    1190:	71 e0       	ldi	r23, 0x01	; 1
    1192:	83 ec       	ldi	r24, 0xC3	; 195
    1194:	92 e0       	ldi	r25, 0x02	; 2
    1196:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN5Print7printlnEPKc>

    float angle = getWindAngle(interpolate(flows95, (raw1 / 1023.0) * 5), interpolate(flows94, (raw0 / 1023.0) * 5) ) + 3 * (PI / 2);
    119a:	b5 01       	movw	r22, r10
    119c:	a4 01       	movw	r20, r8
    119e:	8b e4       	ldi	r24, 0x4B	; 75
    11a0:	92 e0       	ldi	r25, 0x02	; 2
    11a2:	0e 94 cb 05 	call	0xb96	; 0xb96 <_Z11interpolatePA2_ff>
    11a6:	4b 01       	movw	r8, r22
    11a8:	5c 01       	movw	r10, r24
    11aa:	b7 01       	movw	r22, r14
    11ac:	a6 01       	movw	r20, r12
    11ae:	83 ed       	ldi	r24, 0xD3	; 211
    11b0:	91 e0       	ldi	r25, 0x01	; 1
    11b2:	0e 94 cb 05 	call	0xb96	; 0xb96 <_Z11interpolatePA2_ff>
    11b6:	a5 01       	movw	r20, r10
    11b8:	94 01       	movw	r18, r8
    11ba:	0e 94 95 06 	call	0xd2a	; 0xd2a <_Z12getWindAngleff>
    11be:	24 ee       	ldi	r18, 0xE4	; 228
    11c0:	3b ec       	ldi	r19, 0xCB	; 203
    11c2:	46 e9       	ldi	r20, 0x96	; 150
    11c4:	50 e4       	ldi	r21, 0x40	; 64
    11c6:	0e 94 6f 09 	call	0x12de	; 0x12de <__addsf3>
    11ca:	4b 01       	movw	r8, r22
    11cc:	5c 01       	movw	r10, r24
    Xwind = interpolate(flows95, (raw1 / 1023.0) * 5);
    Ywind = interpolate(flows94, (raw0 / 1023.0) * 5);
    totalWind = getTotalWind(Ywind, Xwind);


    tft.drawLine(x0, y0, lastX1, lastY1, 0x0);
    11ce:	00 91 9e 01 	lds	r16, 0x019E	; 0x80019e <lastY1>
    11d2:	10 91 9f 01 	lds	r17, 0x019F	; 0x80019f <lastY1+0x1>
    11d6:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <lastX1>
    11da:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <lastX1+0x1>
    11de:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <y0>
    11e2:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <y0+0x1>
    11e6:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <x0>
    11ea:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <x0+0x1>
    11ee:	e1 2c       	mov	r14, r1
    11f0:	f1 2c       	mov	r15, r1
    11f2:	82 ea       	ldi	r24, 0xA2	; 162
    11f4:	91 e0       	ldi	r25, 0x01	; 1
    11f6:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZN12Adafruit_GFX8drawLineEiiiij>
    tft.drawLine(x0, y0, lastX1, lastY1 + 1, 0x0);
    11fa:	00 91 9e 01 	lds	r16, 0x019E	; 0x80019e <lastY1>
    11fe:	10 91 9f 01 	lds	r17, 0x019F	; 0x80019f <lastY1+0x1>
    1202:	0f 5f       	subi	r16, 0xFF	; 255
    1204:	1f 4f       	sbci	r17, 0xFF	; 255
    1206:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <lastX1>
    120a:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <lastX1+0x1>
    120e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <y0>
    1212:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <y0+0x1>
    1216:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <x0>
    121a:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <x0+0x1>
    121e:	82 ea       	ldi	r24, 0xA2	; 162
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZN12Adafruit_GFX8drawLineEiiiij>
    tft.drawLine(x0, y0, lastX1, lastY1 - 1  , 0x0);
    1226:	00 91 9e 01 	lds	r16, 0x019E	; 0x80019e <lastY1>
    122a:	10 91 9f 01 	lds	r17, 0x019F	; 0x80019f <lastY1+0x1>
    122e:	01 50       	subi	r16, 0x01	; 1
    1230:	11 09       	sbc	r17, r1
    1232:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <lastX1>
    1236:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <lastX1+0x1>
    123a:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <y0>
    123e:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <y0+0x1>
    1242:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <x0>
    1246:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <x0+0x1>
    124a:	82 ea       	ldi	r24, 0xA2	; 162
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZN12Adafruit_GFX8drawLineEiiiij>

    plotLine (x0, y0, angle, 50);
    1252:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <y0>
    1256:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <y0+0x1>
    125a:	02 e3       	ldi	r16, 0x32	; 50
    125c:	10 e0       	ldi	r17, 0x00	; 0
    125e:	a5 01       	movw	r20, r10
    1260:	94 01       	movw	r18, r8
    1262:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <x0>
    1266:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <x0+0x1>
    126a:	0e 94 d4 06 	call	0xda8	; 0xda8 <_Z8plotLineiifi>
    Serial.println(angle * (180 / PI));
    126e:	20 ee       	ldi	r18, 0xE0	; 224
    1270:	3e e2       	ldi	r19, 0x2E	; 46
    1272:	45 e6       	ldi	r20, 0x65	; 101
    1274:	52 e4       	ldi	r21, 0x42	; 66
    1276:	c5 01       	movw	r24, r10
    1278:	b4 01       	movw	r22, r8
    127a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
    127e:	ab 01       	movw	r20, r22
    1280:	bc 01       	movw	r22, r24
    1282:	22 e0       	ldi	r18, 0x02	; 2
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	83 ec       	ldi	r24, 0xC3	; 195
    1288:	92 e0       	ldi	r25, 0x02	; 2
    128a:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZN5Print7printlnEdi>
    Serial.println("-----------");
    128e:	61 e1       	ldi	r22, 0x11	; 17
    1290:	71 e0       	ldi	r23, 0x01	; 1
    1292:	83 ec       	ldi	r24, 0xC3	; 195
    1294:	92 e0       	ldi	r25, 0x02	; 2
    1296:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN5Print7printlnEPKc>
    lastAngle = angle;
    129a:	80 92 9a 01 	sts	0x019A, r8	; 0x80019a <lastAngle>
    129e:	90 92 9b 01 	sts	0x019B, r9	; 0x80019b <lastAngle+0x1>
    12a2:	a0 92 9c 01 	sts	0x019C, r10	; 0x80019c <lastAngle+0x2>
    12a6:	b0 92 9d 01 	sts	0x019D, r11	; 0x80019d <lastAngle+0x3>

    delay(100);
    12aa:	64 e6       	ldi	r22, 0x64	; 100
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	0e 94 cc 10 	call	0x2198	; 0x2198 <delay>

  }

}
    12b6:	26 96       	adiw	r28, 0x06	; 6
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	bf 90       	pop	r11
    12d4:	af 90       	pop	r10
    12d6:	9f 90       	pop	r9
    12d8:	8f 90       	pop	r8
    12da:	08 95       	ret

000012dc <__subsf3>:
    12dc:	50 58       	subi	r21, 0x80	; 128

000012de <__addsf3>:
    12de:	bb 27       	eor	r27, r27
    12e0:	aa 27       	eor	r26, r26
    12e2:	0e 94 86 09 	call	0x130c	; 0x130c <__addsf3x>
    12e6:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_round>
    12ea:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fp_pscA>
    12ee:	38 f0       	brcs	.+14     	; 0x12fe <__addsf3+0x20>
    12f0:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fp_pscB>
    12f4:	20 f0       	brcs	.+8      	; 0x12fe <__addsf3+0x20>
    12f6:	39 f4       	brne	.+14     	; 0x1306 <__addsf3+0x28>
    12f8:	9f 3f       	cpi	r25, 0xFF	; 255
    12fa:	19 f4       	brne	.+6      	; 0x1302 <__addsf3+0x24>
    12fc:	26 f4       	brtc	.+8      	; 0x1306 <__addsf3+0x28>
    12fe:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_nan>
    1302:	0e f4       	brtc	.+2      	; 0x1306 <__addsf3+0x28>
    1304:	e0 95       	com	r30
    1306:	e7 fb       	bst	r30, 7
    1308:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_inf>

0000130c <__addsf3x>:
    130c:	e9 2f       	mov	r30, r25
    130e:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__fp_split3>
    1312:	58 f3       	brcs	.-42     	; 0x12ea <__addsf3+0xc>
    1314:	ba 17       	cp	r27, r26
    1316:	62 07       	cpc	r22, r18
    1318:	73 07       	cpc	r23, r19
    131a:	84 07       	cpc	r24, r20
    131c:	95 07       	cpc	r25, r21
    131e:	20 f0       	brcs	.+8      	; 0x1328 <__addsf3x+0x1c>
    1320:	79 f4       	brne	.+30     	; 0x1340 <__addsf3x+0x34>
    1322:	a6 f5       	brtc	.+104    	; 0x138c <__addsf3x+0x80>
    1324:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_zero>
    1328:	0e f4       	brtc	.+2      	; 0x132c <__addsf3x+0x20>
    132a:	e0 95       	com	r30
    132c:	0b 2e       	mov	r0, r27
    132e:	ba 2f       	mov	r27, r26
    1330:	a0 2d       	mov	r26, r0
    1332:	0b 01       	movw	r0, r22
    1334:	b9 01       	movw	r22, r18
    1336:	90 01       	movw	r18, r0
    1338:	0c 01       	movw	r0, r24
    133a:	ca 01       	movw	r24, r20
    133c:	a0 01       	movw	r20, r0
    133e:	11 24       	eor	r1, r1
    1340:	ff 27       	eor	r31, r31
    1342:	59 1b       	sub	r21, r25
    1344:	99 f0       	breq	.+38     	; 0x136c <__addsf3x+0x60>
    1346:	59 3f       	cpi	r21, 0xF9	; 249
    1348:	50 f4       	brcc	.+20     	; 0x135e <__addsf3x+0x52>
    134a:	50 3e       	cpi	r21, 0xE0	; 224
    134c:	68 f1       	brcs	.+90     	; 0x13a8 <__addsf3x+0x9c>
    134e:	1a 16       	cp	r1, r26
    1350:	f0 40       	sbci	r31, 0x00	; 0
    1352:	a2 2f       	mov	r26, r18
    1354:	23 2f       	mov	r18, r19
    1356:	34 2f       	mov	r19, r20
    1358:	44 27       	eor	r20, r20
    135a:	58 5f       	subi	r21, 0xF8	; 248
    135c:	f3 cf       	rjmp	.-26     	; 0x1344 <__addsf3x+0x38>
    135e:	46 95       	lsr	r20
    1360:	37 95       	ror	r19
    1362:	27 95       	ror	r18
    1364:	a7 95       	ror	r26
    1366:	f0 40       	sbci	r31, 0x00	; 0
    1368:	53 95       	inc	r21
    136a:	c9 f7       	brne	.-14     	; 0x135e <__addsf3x+0x52>
    136c:	7e f4       	brtc	.+30     	; 0x138c <__addsf3x+0x80>
    136e:	1f 16       	cp	r1, r31
    1370:	ba 0b       	sbc	r27, r26
    1372:	62 0b       	sbc	r22, r18
    1374:	73 0b       	sbc	r23, r19
    1376:	84 0b       	sbc	r24, r20
    1378:	ba f0       	brmi	.+46     	; 0x13a8 <__addsf3x+0x9c>
    137a:	91 50       	subi	r25, 0x01	; 1
    137c:	a1 f0       	breq	.+40     	; 0x13a6 <__addsf3x+0x9a>
    137e:	ff 0f       	add	r31, r31
    1380:	bb 1f       	adc	r27, r27
    1382:	66 1f       	adc	r22, r22
    1384:	77 1f       	adc	r23, r23
    1386:	88 1f       	adc	r24, r24
    1388:	c2 f7       	brpl	.-16     	; 0x137a <__addsf3x+0x6e>
    138a:	0e c0       	rjmp	.+28     	; 0x13a8 <__addsf3x+0x9c>
    138c:	ba 0f       	add	r27, r26
    138e:	62 1f       	adc	r22, r18
    1390:	73 1f       	adc	r23, r19
    1392:	84 1f       	adc	r24, r20
    1394:	48 f4       	brcc	.+18     	; 0x13a8 <__addsf3x+0x9c>
    1396:	87 95       	ror	r24
    1398:	77 95       	ror	r23
    139a:	67 95       	ror	r22
    139c:	b7 95       	ror	r27
    139e:	f7 95       	ror	r31
    13a0:	9e 3f       	cpi	r25, 0xFE	; 254
    13a2:	08 f0       	brcs	.+2      	; 0x13a6 <__addsf3x+0x9a>
    13a4:	b0 cf       	rjmp	.-160    	; 0x1306 <__addsf3+0x28>
    13a6:	93 95       	inc	r25
    13a8:	88 0f       	add	r24, r24
    13aa:	08 f0       	brcs	.+2      	; 0x13ae <__addsf3x+0xa2>
    13ac:	99 27       	eor	r25, r25
    13ae:	ee 0f       	add	r30, r30
    13b0:	97 95       	ror	r25
    13b2:	87 95       	ror	r24
    13b4:	08 95       	ret

000013b6 <atan>:
    13b6:	df 93       	push	r29
    13b8:	dd 27       	eor	r29, r29
    13ba:	b9 2f       	mov	r27, r25
    13bc:	bf 77       	andi	r27, 0x7F	; 127
    13be:	40 e8       	ldi	r20, 0x80	; 128
    13c0:	5f e3       	ldi	r21, 0x3F	; 63
    13c2:	16 16       	cp	r1, r22
    13c4:	17 06       	cpc	r1, r23
    13c6:	48 07       	cpc	r20, r24
    13c8:	5b 07       	cpc	r21, r27
    13ca:	18 f4       	brcc	.+6      	; 0x13d2 <atan+0x1c>
    13cc:	d9 2f       	mov	r29, r25
    13ce:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <inverse>
    13d2:	9f 93       	push	r25
    13d4:	8f 93       	push	r24
    13d6:	7f 93       	push	r23
    13d8:	6f 93       	push	r22
    13da:	0e 94 9c 0c 	call	0x1938	; 0x1938 <square>
    13de:	e8 e6       	ldi	r30, 0x68	; 104
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	0e 94 26 0b 	call	0x164c	; 0x164c <__fp_powser>
    13e6:	0e 94 86 0b 	call	0x170c	; 0x170c <__fp_round>
    13ea:	2f 91       	pop	r18
    13ec:	3f 91       	pop	r19
    13ee:	4f 91       	pop	r20
    13f0:	5f 91       	pop	r21
    13f2:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__mulsf3x>
    13f6:	dd 23       	and	r29, r29
    13f8:	51 f0       	breq	.+20     	; 0x140e <atan+0x58>
    13fa:	90 58       	subi	r25, 0x80	; 128
    13fc:	a2 ea       	ldi	r26, 0xA2	; 162
    13fe:	2a ed       	ldi	r18, 0xDA	; 218
    1400:	3f e0       	ldi	r19, 0x0F	; 15
    1402:	49 ec       	ldi	r20, 0xC9	; 201
    1404:	5f e3       	ldi	r21, 0x3F	; 63
    1406:	d0 78       	andi	r29, 0x80	; 128
    1408:	5d 27       	eor	r21, r29
    140a:	0e 94 86 09 	call	0x130c	; 0x130c <__addsf3x>
    140e:	df 91       	pop	r29
    1410:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_round>

00001414 <__cmpsf2>:
    1414:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__fp_cmp>
    1418:	08 f4       	brcc	.+2      	; 0x141c <__cmpsf2+0x8>
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	08 95       	ret

0000141e <cos>:
    141e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__fp_rempio2>
    1422:	e3 95       	inc	r30
    1424:	0c 94 97 0b 	jmp	0x172e	; 0x172e <__fp_sinus>

00001428 <__divsf3>:
    1428:	0e 94 28 0a 	call	0x1450	; 0x1450 <__divsf3x>
    142c:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_round>
    1430:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fp_pscB>
    1434:	58 f0       	brcs	.+22     	; 0x144c <__divsf3+0x24>
    1436:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fp_pscA>
    143a:	40 f0       	brcs	.+16     	; 0x144c <__divsf3+0x24>
    143c:	29 f4       	brne	.+10     	; 0x1448 <__divsf3+0x20>
    143e:	5f 3f       	cpi	r21, 0xFF	; 255
    1440:	29 f0       	breq	.+10     	; 0x144c <__divsf3+0x24>
    1442:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_inf>
    1446:	51 11       	cpse	r21, r1
    1448:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__fp_szero>
    144c:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_nan>

00001450 <__divsf3x>:
    1450:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__fp_split3>
    1454:	68 f3       	brcs	.-38     	; 0x1430 <__divsf3+0x8>

00001456 <__divsf3_pse>:
    1456:	99 23       	and	r25, r25
    1458:	b1 f3       	breq	.-20     	; 0x1446 <__divsf3+0x1e>
    145a:	55 23       	and	r21, r21
    145c:	91 f3       	breq	.-28     	; 0x1442 <__divsf3+0x1a>
    145e:	95 1b       	sub	r25, r21
    1460:	55 0b       	sbc	r21, r21
    1462:	bb 27       	eor	r27, r27
    1464:	aa 27       	eor	r26, r26
    1466:	62 17       	cp	r22, r18
    1468:	73 07       	cpc	r23, r19
    146a:	84 07       	cpc	r24, r20
    146c:	38 f0       	brcs	.+14     	; 0x147c <__divsf3_pse+0x26>
    146e:	9f 5f       	subi	r25, 0xFF	; 255
    1470:	5f 4f       	sbci	r21, 0xFF	; 255
    1472:	22 0f       	add	r18, r18
    1474:	33 1f       	adc	r19, r19
    1476:	44 1f       	adc	r20, r20
    1478:	aa 1f       	adc	r26, r26
    147a:	a9 f3       	breq	.-22     	; 0x1466 <__divsf3_pse+0x10>
    147c:	35 d0       	rcall	.+106    	; 0x14e8 <__divsf3_pse+0x92>
    147e:	0e 2e       	mov	r0, r30
    1480:	3a f0       	brmi	.+14     	; 0x1490 <__divsf3_pse+0x3a>
    1482:	e0 e8       	ldi	r30, 0x80	; 128
    1484:	32 d0       	rcall	.+100    	; 0x14ea <__divsf3_pse+0x94>
    1486:	91 50       	subi	r25, 0x01	; 1
    1488:	50 40       	sbci	r21, 0x00	; 0
    148a:	e6 95       	lsr	r30
    148c:	00 1c       	adc	r0, r0
    148e:	ca f7       	brpl	.-14     	; 0x1482 <__divsf3_pse+0x2c>
    1490:	2b d0       	rcall	.+86     	; 0x14e8 <__divsf3_pse+0x92>
    1492:	fe 2f       	mov	r31, r30
    1494:	29 d0       	rcall	.+82     	; 0x14e8 <__divsf3_pse+0x92>
    1496:	66 0f       	add	r22, r22
    1498:	77 1f       	adc	r23, r23
    149a:	88 1f       	adc	r24, r24
    149c:	bb 1f       	adc	r27, r27
    149e:	26 17       	cp	r18, r22
    14a0:	37 07       	cpc	r19, r23
    14a2:	48 07       	cpc	r20, r24
    14a4:	ab 07       	cpc	r26, r27
    14a6:	b0 e8       	ldi	r27, 0x80	; 128
    14a8:	09 f0       	breq	.+2      	; 0x14ac <__divsf3_pse+0x56>
    14aa:	bb 0b       	sbc	r27, r27
    14ac:	80 2d       	mov	r24, r0
    14ae:	bf 01       	movw	r22, r30
    14b0:	ff 27       	eor	r31, r31
    14b2:	93 58       	subi	r25, 0x83	; 131
    14b4:	5f 4f       	sbci	r21, 0xFF	; 255
    14b6:	3a f0       	brmi	.+14     	; 0x14c6 <__divsf3_pse+0x70>
    14b8:	9e 3f       	cpi	r25, 0xFE	; 254
    14ba:	51 05       	cpc	r21, r1
    14bc:	78 f0       	brcs	.+30     	; 0x14dc <__divsf3_pse+0x86>
    14be:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_inf>
    14c2:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__fp_szero>
    14c6:	5f 3f       	cpi	r21, 0xFF	; 255
    14c8:	e4 f3       	brlt	.-8      	; 0x14c2 <__divsf3_pse+0x6c>
    14ca:	98 3e       	cpi	r25, 0xE8	; 232
    14cc:	d4 f3       	brlt	.-12     	; 0x14c2 <__divsf3_pse+0x6c>
    14ce:	86 95       	lsr	r24
    14d0:	77 95       	ror	r23
    14d2:	67 95       	ror	r22
    14d4:	b7 95       	ror	r27
    14d6:	f7 95       	ror	r31
    14d8:	9f 5f       	subi	r25, 0xFF	; 255
    14da:	c9 f7       	brne	.-14     	; 0x14ce <__divsf3_pse+0x78>
    14dc:	88 0f       	add	r24, r24
    14de:	91 1d       	adc	r25, r1
    14e0:	96 95       	lsr	r25
    14e2:	87 95       	ror	r24
    14e4:	97 f9       	bld	r25, 7
    14e6:	08 95       	ret
    14e8:	e1 e0       	ldi	r30, 0x01	; 1
    14ea:	66 0f       	add	r22, r22
    14ec:	77 1f       	adc	r23, r23
    14ee:	88 1f       	adc	r24, r24
    14f0:	bb 1f       	adc	r27, r27
    14f2:	62 17       	cp	r22, r18
    14f4:	73 07       	cpc	r23, r19
    14f6:	84 07       	cpc	r24, r20
    14f8:	ba 07       	cpc	r27, r26
    14fa:	20 f0       	brcs	.+8      	; 0x1504 <__divsf3_pse+0xae>
    14fc:	62 1b       	sub	r22, r18
    14fe:	73 0b       	sbc	r23, r19
    1500:	84 0b       	sbc	r24, r20
    1502:	ba 0b       	sbc	r27, r26
    1504:	ee 1f       	adc	r30, r30
    1506:	88 f7       	brcc	.-30     	; 0x14ea <__divsf3_pse+0x94>
    1508:	e0 95       	com	r30
    150a:	08 95       	ret

0000150c <__fixsfsi>:
    150c:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
    1510:	68 94       	set
    1512:	b1 11       	cpse	r27, r1
    1514:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__fp_szero>
    1518:	08 95       	ret

0000151a <__fixunssfsi>:
    151a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__fp_splitA>
    151e:	88 f0       	brcs	.+34     	; 0x1542 <__fixunssfsi+0x28>
    1520:	9f 57       	subi	r25, 0x7F	; 127
    1522:	98 f0       	brcs	.+38     	; 0x154a <__fixunssfsi+0x30>
    1524:	b9 2f       	mov	r27, r25
    1526:	99 27       	eor	r25, r25
    1528:	b7 51       	subi	r27, 0x17	; 23
    152a:	b0 f0       	brcs	.+44     	; 0x1558 <__fixunssfsi+0x3e>
    152c:	e1 f0       	breq	.+56     	; 0x1566 <__fixunssfsi+0x4c>
    152e:	66 0f       	add	r22, r22
    1530:	77 1f       	adc	r23, r23
    1532:	88 1f       	adc	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	1a f0       	brmi	.+6      	; 0x153e <__fixunssfsi+0x24>
    1538:	ba 95       	dec	r27
    153a:	c9 f7       	brne	.-14     	; 0x152e <__fixunssfsi+0x14>
    153c:	14 c0       	rjmp	.+40     	; 0x1566 <__fixunssfsi+0x4c>
    153e:	b1 30       	cpi	r27, 0x01	; 1
    1540:	91 f0       	breq	.+36     	; 0x1566 <__fixunssfsi+0x4c>
    1542:	0e 94 cd 0b 	call	0x179a	; 0x179a <__fp_zero>
    1546:	b1 e0       	ldi	r27, 0x01	; 1
    1548:	08 95       	ret
    154a:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__fp_zero>
    154e:	67 2f       	mov	r22, r23
    1550:	78 2f       	mov	r23, r24
    1552:	88 27       	eor	r24, r24
    1554:	b8 5f       	subi	r27, 0xF8	; 248
    1556:	39 f0       	breq	.+14     	; 0x1566 <__fixunssfsi+0x4c>
    1558:	b9 3f       	cpi	r27, 0xF9	; 249
    155a:	cc f3       	brlt	.-14     	; 0x154e <__fixunssfsi+0x34>
    155c:	86 95       	lsr	r24
    155e:	77 95       	ror	r23
    1560:	67 95       	ror	r22
    1562:	b3 95       	inc	r27
    1564:	d9 f7       	brne	.-10     	; 0x155c <__fixunssfsi+0x42>
    1566:	3e f4       	brtc	.+14     	; 0x1576 <__fixunssfsi+0x5c>
    1568:	90 95       	com	r25
    156a:	80 95       	com	r24
    156c:	70 95       	com	r23
    156e:	61 95       	neg	r22
    1570:	7f 4f       	sbci	r23, 0xFF	; 255
    1572:	8f 4f       	sbci	r24, 0xFF	; 255
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	08 95       	ret

00001578 <__floatunsisf>:
    1578:	e8 94       	clt
    157a:	09 c0       	rjmp	.+18     	; 0x158e <__floatsisf+0x12>

0000157c <__floatsisf>:
    157c:	97 fb       	bst	r25, 7
    157e:	3e f4       	brtc	.+14     	; 0x158e <__floatsisf+0x12>
    1580:	90 95       	com	r25
    1582:	80 95       	com	r24
    1584:	70 95       	com	r23
    1586:	61 95       	neg	r22
    1588:	7f 4f       	sbci	r23, 0xFF	; 255
    158a:	8f 4f       	sbci	r24, 0xFF	; 255
    158c:	9f 4f       	sbci	r25, 0xFF	; 255
    158e:	99 23       	and	r25, r25
    1590:	a9 f0       	breq	.+42     	; 0x15bc <__floatsisf+0x40>
    1592:	f9 2f       	mov	r31, r25
    1594:	96 e9       	ldi	r25, 0x96	; 150
    1596:	bb 27       	eor	r27, r27
    1598:	93 95       	inc	r25
    159a:	f6 95       	lsr	r31
    159c:	87 95       	ror	r24
    159e:	77 95       	ror	r23
    15a0:	67 95       	ror	r22
    15a2:	b7 95       	ror	r27
    15a4:	f1 11       	cpse	r31, r1
    15a6:	f8 cf       	rjmp	.-16     	; 0x1598 <__floatsisf+0x1c>
    15a8:	fa f4       	brpl	.+62     	; 0x15e8 <__floatsisf+0x6c>
    15aa:	bb 0f       	add	r27, r27
    15ac:	11 f4       	brne	.+4      	; 0x15b2 <__floatsisf+0x36>
    15ae:	60 ff       	sbrs	r22, 0
    15b0:	1b c0       	rjmp	.+54     	; 0x15e8 <__floatsisf+0x6c>
    15b2:	6f 5f       	subi	r22, 0xFF	; 255
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
    15b6:	8f 4f       	sbci	r24, 0xFF	; 255
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	16 c0       	rjmp	.+44     	; 0x15e8 <__floatsisf+0x6c>
    15bc:	88 23       	and	r24, r24
    15be:	11 f0       	breq	.+4      	; 0x15c4 <__floatsisf+0x48>
    15c0:	96 e9       	ldi	r25, 0x96	; 150
    15c2:	11 c0       	rjmp	.+34     	; 0x15e6 <__floatsisf+0x6a>
    15c4:	77 23       	and	r23, r23
    15c6:	21 f0       	breq	.+8      	; 0x15d0 <__floatsisf+0x54>
    15c8:	9e e8       	ldi	r25, 0x8E	; 142
    15ca:	87 2f       	mov	r24, r23
    15cc:	76 2f       	mov	r23, r22
    15ce:	05 c0       	rjmp	.+10     	; 0x15da <__floatsisf+0x5e>
    15d0:	66 23       	and	r22, r22
    15d2:	71 f0       	breq	.+28     	; 0x15f0 <__floatsisf+0x74>
    15d4:	96 e8       	ldi	r25, 0x86	; 134
    15d6:	86 2f       	mov	r24, r22
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	2a f0       	brmi	.+10     	; 0x15e8 <__floatsisf+0x6c>
    15de:	9a 95       	dec	r25
    15e0:	66 0f       	add	r22, r22
    15e2:	77 1f       	adc	r23, r23
    15e4:	88 1f       	adc	r24, r24
    15e6:	da f7       	brpl	.-10     	; 0x15de <__floatsisf+0x62>
    15e8:	88 0f       	add	r24, r24
    15ea:	96 95       	lsr	r25
    15ec:	87 95       	ror	r24
    15ee:	97 f9       	bld	r25, 7
    15f0:	08 95       	ret

000015f2 <__fp_cmp>:
    15f2:	99 0f       	add	r25, r25
    15f4:	00 08       	sbc	r0, r0
    15f6:	55 0f       	add	r21, r21
    15f8:	aa 0b       	sbc	r26, r26
    15fa:	e0 e8       	ldi	r30, 0x80	; 128
    15fc:	fe ef       	ldi	r31, 0xFE	; 254
    15fe:	16 16       	cp	r1, r22
    1600:	17 06       	cpc	r1, r23
    1602:	e8 07       	cpc	r30, r24
    1604:	f9 07       	cpc	r31, r25
    1606:	c0 f0       	brcs	.+48     	; 0x1638 <__fp_cmp+0x46>
    1608:	12 16       	cp	r1, r18
    160a:	13 06       	cpc	r1, r19
    160c:	e4 07       	cpc	r30, r20
    160e:	f5 07       	cpc	r31, r21
    1610:	98 f0       	brcs	.+38     	; 0x1638 <__fp_cmp+0x46>
    1612:	62 1b       	sub	r22, r18
    1614:	73 0b       	sbc	r23, r19
    1616:	84 0b       	sbc	r24, r20
    1618:	95 0b       	sbc	r25, r21
    161a:	39 f4       	brne	.+14     	; 0x162a <__fp_cmp+0x38>
    161c:	0a 26       	eor	r0, r26
    161e:	61 f0       	breq	.+24     	; 0x1638 <__fp_cmp+0x46>
    1620:	23 2b       	or	r18, r19
    1622:	24 2b       	or	r18, r20
    1624:	25 2b       	or	r18, r21
    1626:	21 f4       	brne	.+8      	; 0x1630 <__fp_cmp+0x3e>
    1628:	08 95       	ret
    162a:	0a 26       	eor	r0, r26
    162c:	09 f4       	brne	.+2      	; 0x1630 <__fp_cmp+0x3e>
    162e:	a1 40       	sbci	r26, 0x01	; 1
    1630:	a6 95       	lsr	r26
    1632:	8f ef       	ldi	r24, 0xFF	; 255
    1634:	81 1d       	adc	r24, r1
    1636:	81 1d       	adc	r24, r1
    1638:	08 95       	ret

0000163a <__fp_inf>:
    163a:	97 f9       	bld	r25, 7
    163c:	9f 67       	ori	r25, 0x7F	; 127
    163e:	80 e8       	ldi	r24, 0x80	; 128
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	08 95       	ret

00001646 <__fp_nan>:
    1646:	9f ef       	ldi	r25, 0xFF	; 255
    1648:	80 ec       	ldi	r24, 0xC0	; 192
    164a:	08 95       	ret

0000164c <__fp_powser>:
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	1f 93       	push	r17
    1652:	0f 93       	push	r16
    1654:	ff 92       	push	r15
    1656:	ef 92       	push	r14
    1658:	df 92       	push	r13
    165a:	7b 01       	movw	r14, r22
    165c:	8c 01       	movw	r16, r24
    165e:	68 94       	set
    1660:	06 c0       	rjmp	.+12     	; 0x166e <__fp_powser+0x22>
    1662:	da 2e       	mov	r13, r26
    1664:	ef 01       	movw	r28, r30
    1666:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__mulsf3x>
    166a:	fe 01       	movw	r30, r28
    166c:	e8 94       	clt
    166e:	a5 91       	lpm	r26, Z+
    1670:	25 91       	lpm	r18, Z+
    1672:	35 91       	lpm	r19, Z+
    1674:	45 91       	lpm	r20, Z+
    1676:	55 91       	lpm	r21, Z+
    1678:	a6 f3       	brts	.-24     	; 0x1662 <__fp_powser+0x16>
    167a:	ef 01       	movw	r28, r30
    167c:	0e 94 86 09 	call	0x130c	; 0x130c <__addsf3x>
    1680:	fe 01       	movw	r30, r28
    1682:	97 01       	movw	r18, r14
    1684:	a8 01       	movw	r20, r16
    1686:	da 94       	dec	r13
    1688:	69 f7       	brne	.-38     	; 0x1664 <__fp_powser+0x18>
    168a:	df 90       	pop	r13
    168c:	ef 90       	pop	r14
    168e:	ff 90       	pop	r15
    1690:	0f 91       	pop	r16
    1692:	1f 91       	pop	r17
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <__fp_pscA>:
    169a:	00 24       	eor	r0, r0
    169c:	0a 94       	dec	r0
    169e:	16 16       	cp	r1, r22
    16a0:	17 06       	cpc	r1, r23
    16a2:	18 06       	cpc	r1, r24
    16a4:	09 06       	cpc	r0, r25
    16a6:	08 95       	ret

000016a8 <__fp_pscB>:
    16a8:	00 24       	eor	r0, r0
    16aa:	0a 94       	dec	r0
    16ac:	12 16       	cp	r1, r18
    16ae:	13 06       	cpc	r1, r19
    16b0:	14 06       	cpc	r1, r20
    16b2:	05 06       	cpc	r0, r21
    16b4:	08 95       	ret
    16b6:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_nan>

000016ba <__fp_rempio2>:
    16ba:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__fp_splitA>
    16be:	d8 f3       	brcs	.-10     	; 0x16b6 <__fp_pscB+0xe>
    16c0:	e8 94       	clt
    16c2:	e0 e0       	ldi	r30, 0x00	; 0
    16c4:	bb 27       	eor	r27, r27
    16c6:	9f 57       	subi	r25, 0x7F	; 127
    16c8:	f0 f0       	brcs	.+60     	; 0x1706 <__fp_rempio2+0x4c>
    16ca:	2a ed       	ldi	r18, 0xDA	; 218
    16cc:	3f e0       	ldi	r19, 0x0F	; 15
    16ce:	49 ec       	ldi	r20, 0xC9	; 201
    16d0:	06 c0       	rjmp	.+12     	; 0x16de <__fp_rempio2+0x24>
    16d2:	ee 0f       	add	r30, r30
    16d4:	bb 0f       	add	r27, r27
    16d6:	66 1f       	adc	r22, r22
    16d8:	77 1f       	adc	r23, r23
    16da:	88 1f       	adc	r24, r24
    16dc:	28 f0       	brcs	.+10     	; 0x16e8 <__fp_rempio2+0x2e>
    16de:	b2 3a       	cpi	r27, 0xA2	; 162
    16e0:	62 07       	cpc	r22, r18
    16e2:	73 07       	cpc	r23, r19
    16e4:	84 07       	cpc	r24, r20
    16e6:	28 f0       	brcs	.+10     	; 0x16f2 <__fp_rempio2+0x38>
    16e8:	b2 5a       	subi	r27, 0xA2	; 162
    16ea:	62 0b       	sbc	r22, r18
    16ec:	73 0b       	sbc	r23, r19
    16ee:	84 0b       	sbc	r24, r20
    16f0:	e3 95       	inc	r30
    16f2:	9a 95       	dec	r25
    16f4:	72 f7       	brpl	.-36     	; 0x16d2 <__fp_rempio2+0x18>
    16f6:	80 38       	cpi	r24, 0x80	; 128
    16f8:	30 f4       	brcc	.+12     	; 0x1706 <__fp_rempio2+0x4c>
    16fa:	9a 95       	dec	r25
    16fc:	bb 0f       	add	r27, r27
    16fe:	66 1f       	adc	r22, r22
    1700:	77 1f       	adc	r23, r23
    1702:	88 1f       	adc	r24, r24
    1704:	d2 f7       	brpl	.-12     	; 0x16fa <__fp_rempio2+0x40>
    1706:	90 48       	sbci	r25, 0x80	; 128
    1708:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__fp_mpack_finite>

0000170c <__fp_round>:
    170c:	09 2e       	mov	r0, r25
    170e:	03 94       	inc	r0
    1710:	00 0c       	add	r0, r0
    1712:	11 f4       	brne	.+4      	; 0x1718 <__fp_round+0xc>
    1714:	88 23       	and	r24, r24
    1716:	52 f0       	brmi	.+20     	; 0x172c <__fp_round+0x20>
    1718:	bb 0f       	add	r27, r27
    171a:	40 f4       	brcc	.+16     	; 0x172c <__fp_round+0x20>
    171c:	bf 2b       	or	r27, r31
    171e:	11 f4       	brne	.+4      	; 0x1724 <__fp_round+0x18>
    1720:	60 ff       	sbrs	r22, 0
    1722:	04 c0       	rjmp	.+8      	; 0x172c <__fp_round+0x20>
    1724:	6f 5f       	subi	r22, 0xFF	; 255
    1726:	7f 4f       	sbci	r23, 0xFF	; 255
    1728:	8f 4f       	sbci	r24, 0xFF	; 255
    172a:	9f 4f       	sbci	r25, 0xFF	; 255
    172c:	08 95       	ret

0000172e <__fp_sinus>:
    172e:	ef 93       	push	r30
    1730:	e0 ff       	sbrs	r30, 0
    1732:	07 c0       	rjmp	.+14     	; 0x1742 <__fp_sinus+0x14>
    1734:	a2 ea       	ldi	r26, 0xA2	; 162
    1736:	2a ed       	ldi	r18, 0xDA	; 218
    1738:	3f e0       	ldi	r19, 0x0F	; 15
    173a:	49 ec       	ldi	r20, 0xC9	; 201
    173c:	5f eb       	ldi	r21, 0xBF	; 191
    173e:	0e 94 86 09 	call	0x130c	; 0x130c <__addsf3x>
    1742:	0e 94 86 0b 	call	0x170c	; 0x170c <__fp_round>
    1746:	0f 90       	pop	r0
    1748:	03 94       	inc	r0
    174a:	01 fc       	sbrc	r0, 1
    174c:	90 58       	subi	r25, 0x80	; 128
    174e:	e5 e9       	ldi	r30, 0x95	; 149
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__fp_powsodd>

00001756 <__fp_split3>:
    1756:	57 fd       	sbrc	r21, 7
    1758:	90 58       	subi	r25, 0x80	; 128
    175a:	44 0f       	add	r20, r20
    175c:	55 1f       	adc	r21, r21
    175e:	59 f0       	breq	.+22     	; 0x1776 <__fp_splitA+0x10>
    1760:	5f 3f       	cpi	r21, 0xFF	; 255
    1762:	71 f0       	breq	.+28     	; 0x1780 <__fp_splitA+0x1a>
    1764:	47 95       	ror	r20

00001766 <__fp_splitA>:
    1766:	88 0f       	add	r24, r24
    1768:	97 fb       	bst	r25, 7
    176a:	99 1f       	adc	r25, r25
    176c:	61 f0       	breq	.+24     	; 0x1786 <__fp_splitA+0x20>
    176e:	9f 3f       	cpi	r25, 0xFF	; 255
    1770:	79 f0       	breq	.+30     	; 0x1790 <__fp_splitA+0x2a>
    1772:	87 95       	ror	r24
    1774:	08 95       	ret
    1776:	12 16       	cp	r1, r18
    1778:	13 06       	cpc	r1, r19
    177a:	14 06       	cpc	r1, r20
    177c:	55 1f       	adc	r21, r21
    177e:	f2 cf       	rjmp	.-28     	; 0x1764 <__fp_split3+0xe>
    1780:	46 95       	lsr	r20
    1782:	f1 df       	rcall	.-30     	; 0x1766 <__fp_splitA>
    1784:	08 c0       	rjmp	.+16     	; 0x1796 <__fp_splitA+0x30>
    1786:	16 16       	cp	r1, r22
    1788:	17 06       	cpc	r1, r23
    178a:	18 06       	cpc	r1, r24
    178c:	99 1f       	adc	r25, r25
    178e:	f1 cf       	rjmp	.-30     	; 0x1772 <__fp_splitA+0xc>
    1790:	86 95       	lsr	r24
    1792:	71 05       	cpc	r23, r1
    1794:	61 05       	cpc	r22, r1
    1796:	08 94       	sec
    1798:	08 95       	ret

0000179a <__fp_zero>:
    179a:	e8 94       	clt

0000179c <__fp_szero>:
    179c:	bb 27       	eor	r27, r27
    179e:	66 27       	eor	r22, r22
    17a0:	77 27       	eor	r23, r23
    17a2:	cb 01       	movw	r24, r22
    17a4:	97 f9       	bld	r25, 7
    17a6:	08 95       	ret

000017a8 <__gesf2>:
    17a8:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__fp_cmp>
    17ac:	08 f4       	brcc	.+2      	; 0x17b0 <__gesf2+0x8>
    17ae:	8f ef       	ldi	r24, 0xFF	; 255
    17b0:	08 95       	ret

000017b2 <inverse>:
    17b2:	9b 01       	movw	r18, r22
    17b4:	ac 01       	movw	r20, r24
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	80 e8       	ldi	r24, 0x80	; 128
    17bc:	9f e3       	ldi	r25, 0x3F	; 63
    17be:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__divsf3>

000017c2 <__mulsf3>:
    17c2:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__mulsf3x>
    17c6:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_round>
    17ca:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fp_pscA>
    17ce:	38 f0       	brcs	.+14     	; 0x17de <__mulsf3+0x1c>
    17d0:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fp_pscB>
    17d4:	20 f0       	brcs	.+8      	; 0x17de <__mulsf3+0x1c>
    17d6:	95 23       	and	r25, r21
    17d8:	11 f0       	breq	.+4      	; 0x17de <__mulsf3+0x1c>
    17da:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_inf>
    17de:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_nan>
    17e2:	11 24       	eor	r1, r1
    17e4:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__fp_szero>

000017e8 <__mulsf3x>:
    17e8:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__fp_split3>
    17ec:	70 f3       	brcs	.-36     	; 0x17ca <__mulsf3+0x8>

000017ee <__mulsf3_pse>:
    17ee:	95 9f       	mul	r25, r21
    17f0:	c1 f3       	breq	.-16     	; 0x17e2 <__mulsf3+0x20>
    17f2:	95 0f       	add	r25, r21
    17f4:	50 e0       	ldi	r21, 0x00	; 0
    17f6:	55 1f       	adc	r21, r21
    17f8:	62 9f       	mul	r22, r18
    17fa:	f0 01       	movw	r30, r0
    17fc:	72 9f       	mul	r23, r18
    17fe:	bb 27       	eor	r27, r27
    1800:	f0 0d       	add	r31, r0
    1802:	b1 1d       	adc	r27, r1
    1804:	63 9f       	mul	r22, r19
    1806:	aa 27       	eor	r26, r26
    1808:	f0 0d       	add	r31, r0
    180a:	b1 1d       	adc	r27, r1
    180c:	aa 1f       	adc	r26, r26
    180e:	64 9f       	mul	r22, r20
    1810:	66 27       	eor	r22, r22
    1812:	b0 0d       	add	r27, r0
    1814:	a1 1d       	adc	r26, r1
    1816:	66 1f       	adc	r22, r22
    1818:	82 9f       	mul	r24, r18
    181a:	22 27       	eor	r18, r18
    181c:	b0 0d       	add	r27, r0
    181e:	a1 1d       	adc	r26, r1
    1820:	62 1f       	adc	r22, r18
    1822:	73 9f       	mul	r23, r19
    1824:	b0 0d       	add	r27, r0
    1826:	a1 1d       	adc	r26, r1
    1828:	62 1f       	adc	r22, r18
    182a:	83 9f       	mul	r24, r19
    182c:	a0 0d       	add	r26, r0
    182e:	61 1d       	adc	r22, r1
    1830:	22 1f       	adc	r18, r18
    1832:	74 9f       	mul	r23, r20
    1834:	33 27       	eor	r19, r19
    1836:	a0 0d       	add	r26, r0
    1838:	61 1d       	adc	r22, r1
    183a:	23 1f       	adc	r18, r19
    183c:	84 9f       	mul	r24, r20
    183e:	60 0d       	add	r22, r0
    1840:	21 1d       	adc	r18, r1
    1842:	82 2f       	mov	r24, r18
    1844:	76 2f       	mov	r23, r22
    1846:	6a 2f       	mov	r22, r26
    1848:	11 24       	eor	r1, r1
    184a:	9f 57       	subi	r25, 0x7F	; 127
    184c:	50 40       	sbci	r21, 0x00	; 0
    184e:	9a f0       	brmi	.+38     	; 0x1876 <__mulsf3_pse+0x88>
    1850:	f1 f0       	breq	.+60     	; 0x188e <__mulsf3_pse+0xa0>
    1852:	88 23       	and	r24, r24
    1854:	4a f0       	brmi	.+18     	; 0x1868 <__mulsf3_pse+0x7a>
    1856:	ee 0f       	add	r30, r30
    1858:	ff 1f       	adc	r31, r31
    185a:	bb 1f       	adc	r27, r27
    185c:	66 1f       	adc	r22, r22
    185e:	77 1f       	adc	r23, r23
    1860:	88 1f       	adc	r24, r24
    1862:	91 50       	subi	r25, 0x01	; 1
    1864:	50 40       	sbci	r21, 0x00	; 0
    1866:	a9 f7       	brne	.-22     	; 0x1852 <__mulsf3_pse+0x64>
    1868:	9e 3f       	cpi	r25, 0xFE	; 254
    186a:	51 05       	cpc	r21, r1
    186c:	80 f0       	brcs	.+32     	; 0x188e <__mulsf3_pse+0xa0>
    186e:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_inf>
    1872:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__fp_szero>
    1876:	5f 3f       	cpi	r21, 0xFF	; 255
    1878:	e4 f3       	brlt	.-8      	; 0x1872 <__mulsf3_pse+0x84>
    187a:	98 3e       	cpi	r25, 0xE8	; 232
    187c:	d4 f3       	brlt	.-12     	; 0x1872 <__mulsf3_pse+0x84>
    187e:	86 95       	lsr	r24
    1880:	77 95       	ror	r23
    1882:	67 95       	ror	r22
    1884:	b7 95       	ror	r27
    1886:	f7 95       	ror	r31
    1888:	e7 95       	ror	r30
    188a:	9f 5f       	subi	r25, 0xFF	; 255
    188c:	c1 f7       	brne	.-16     	; 0x187e <__mulsf3_pse+0x90>
    188e:	fe 2b       	or	r31, r30
    1890:	88 0f       	add	r24, r24
    1892:	91 1d       	adc	r25, r1
    1894:	96 95       	lsr	r25
    1896:	87 95       	ror	r24
    1898:	97 f9       	bld	r25, 7
    189a:	08 95       	ret

0000189c <sin>:
    189c:	9f 93       	push	r25
    189e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__fp_rempio2>
    18a2:	0f 90       	pop	r0
    18a4:	07 fc       	sbrc	r0, 7
    18a6:	ee 5f       	subi	r30, 0xFE	; 254
    18a8:	0c 94 97 0b 	jmp	0x172e	; 0x172e <__fp_sinus>
    18ac:	19 f4       	brne	.+6      	; 0x18b4 <sin+0x18>
    18ae:	16 f4       	brtc	.+4      	; 0x18b4 <sin+0x18>
    18b0:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_nan>
    18b4:	0c 94 a0 0c 	jmp	0x1940	; 0x1940 <__fp_mpack>

000018b8 <sqrt>:
    18b8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__fp_splitA>
    18bc:	b8 f3       	brcs	.-18     	; 0x18ac <sin+0x10>
    18be:	99 23       	and	r25, r25
    18c0:	c9 f3       	breq	.-14     	; 0x18b4 <sin+0x18>
    18c2:	b6 f3       	brts	.-20     	; 0x18b0 <sin+0x14>
    18c4:	9f 57       	subi	r25, 0x7F	; 127
    18c6:	55 0b       	sbc	r21, r21
    18c8:	87 ff       	sbrs	r24, 7
    18ca:	0e 94 ae 0c 	call	0x195c	; 0x195c <__fp_norm2>
    18ce:	00 24       	eor	r0, r0
    18d0:	a0 e6       	ldi	r26, 0x60	; 96
    18d2:	40 ea       	ldi	r20, 0xA0	; 160
    18d4:	90 01       	movw	r18, r0
    18d6:	80 58       	subi	r24, 0x80	; 128
    18d8:	56 95       	lsr	r21
    18da:	97 95       	ror	r25
    18dc:	28 f4       	brcc	.+10     	; 0x18e8 <sqrt+0x30>
    18de:	80 5c       	subi	r24, 0xC0	; 192
    18e0:	66 0f       	add	r22, r22
    18e2:	77 1f       	adc	r23, r23
    18e4:	88 1f       	adc	r24, r24
    18e6:	20 f0       	brcs	.+8      	; 0x18f0 <sqrt+0x38>
    18e8:	26 17       	cp	r18, r22
    18ea:	37 07       	cpc	r19, r23
    18ec:	48 07       	cpc	r20, r24
    18ee:	30 f4       	brcc	.+12     	; 0x18fc <sqrt+0x44>
    18f0:	62 1b       	sub	r22, r18
    18f2:	73 0b       	sbc	r23, r19
    18f4:	84 0b       	sbc	r24, r20
    18f6:	20 29       	or	r18, r0
    18f8:	31 29       	or	r19, r1
    18fa:	4a 2b       	or	r20, r26
    18fc:	a6 95       	lsr	r26
    18fe:	17 94       	ror	r1
    1900:	07 94       	ror	r0
    1902:	20 25       	eor	r18, r0
    1904:	31 25       	eor	r19, r1
    1906:	4a 27       	eor	r20, r26
    1908:	58 f7       	brcc	.-42     	; 0x18e0 <sqrt+0x28>
    190a:	66 0f       	add	r22, r22
    190c:	77 1f       	adc	r23, r23
    190e:	88 1f       	adc	r24, r24
    1910:	20 f0       	brcs	.+8      	; 0x191a <sqrt+0x62>
    1912:	26 17       	cp	r18, r22
    1914:	37 07       	cpc	r19, r23
    1916:	48 07       	cpc	r20, r24
    1918:	30 f4       	brcc	.+12     	; 0x1926 <sqrt+0x6e>
    191a:	62 0b       	sbc	r22, r18
    191c:	73 0b       	sbc	r23, r19
    191e:	84 0b       	sbc	r24, r20
    1920:	20 0d       	add	r18, r0
    1922:	31 1d       	adc	r19, r1
    1924:	41 1d       	adc	r20, r1
    1926:	a0 95       	com	r26
    1928:	81 f7       	brne	.-32     	; 0x190a <sqrt+0x52>
    192a:	b9 01       	movw	r22, r18
    192c:	84 2f       	mov	r24, r20
    192e:	91 58       	subi	r25, 0x81	; 129
    1930:	88 0f       	add	r24, r24
    1932:	96 95       	lsr	r25
    1934:	87 95       	ror	r24
    1936:	08 95       	ret

00001938 <square>:
    1938:	9b 01       	movw	r18, r22
    193a:	ac 01       	movw	r20, r24
    193c:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__mulsf3>

00001940 <__fp_mpack>:
    1940:	9f 3f       	cpi	r25, 0xFF	; 255
    1942:	31 f0       	breq	.+12     	; 0x1950 <__fp_mpack_finite+0xc>

00001944 <__fp_mpack_finite>:
    1944:	91 50       	subi	r25, 0x01	; 1
    1946:	20 f4       	brcc	.+8      	; 0x1950 <__fp_mpack_finite+0xc>
    1948:	87 95       	ror	r24
    194a:	77 95       	ror	r23
    194c:	67 95       	ror	r22
    194e:	b7 95       	ror	r27
    1950:	88 0f       	add	r24, r24
    1952:	91 1d       	adc	r25, r1
    1954:	96 95       	lsr	r25
    1956:	87 95       	ror	r24
    1958:	97 f9       	bld	r25, 7
    195a:	08 95       	ret

0000195c <__fp_norm2>:
    195c:	91 50       	subi	r25, 0x01	; 1
    195e:	50 40       	sbci	r21, 0x00	; 0
    1960:	66 0f       	add	r22, r22
    1962:	77 1f       	adc	r23, r23
    1964:	88 1f       	adc	r24, r24
    1966:	d2 f7       	brpl	.-12     	; 0x195c <__fp_norm2>
    1968:	08 95       	ret

0000196a <__fp_powsodd>:
    196a:	9f 93       	push	r25
    196c:	8f 93       	push	r24
    196e:	7f 93       	push	r23
    1970:	6f 93       	push	r22
    1972:	ff 93       	push	r31
    1974:	ef 93       	push	r30
    1976:	9b 01       	movw	r18, r22
    1978:	ac 01       	movw	r20, r24
    197a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
    197e:	ef 91       	pop	r30
    1980:	ff 91       	pop	r31
    1982:	0e 94 26 0b 	call	0x164c	; 0x164c <__fp_powser>
    1986:	2f 91       	pop	r18
    1988:	3f 91       	pop	r19
    198a:	4f 91       	pop	r20
    198c:	5f 91       	pop	r21
    198e:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__mulsf3>

00001992 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1992:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1994:	91 8d       	ldd	r25, Z+25	; 0x19
    1996:	22 8d       	ldd	r18, Z+26	; 0x1a
    1998:	89 2f       	mov	r24, r25
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	80 5c       	subi	r24, 0xC0	; 192
    199e:	9f 4f       	sbci	r25, 0xFF	; 255
    19a0:	82 1b       	sub	r24, r18
    19a2:	91 09       	sbc	r25, r1
}
    19a4:	8f 73       	andi	r24, 0x3F	; 63
    19a6:	99 27       	eor	r25, r25
    19a8:	08 95       	ret

000019aa <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    19aa:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    19ac:	91 8d       	ldd	r25, Z+25	; 0x19
    19ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    19b0:	98 17       	cp	r25, r24
    19b2:	31 f0       	breq	.+12     	; 0x19c0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    19b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    19b6:	e8 0f       	add	r30, r24
    19b8:	f1 1d       	adc	r31, r1
    19ba:	85 8d       	ldd	r24, Z+29	; 0x1d
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    19c0:	8f ef       	ldi	r24, 0xFF	; 255
    19c2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    19c4:	08 95       	ret

000019c6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    19c6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    19c8:	91 8d       	ldd	r25, Z+25	; 0x19
    19ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    19cc:	98 17       	cp	r25, r24
    19ce:	61 f0       	breq	.+24     	; 0x19e8 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    19d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    19d2:	df 01       	movw	r26, r30
    19d4:	a8 0f       	add	r26, r24
    19d6:	b1 1d       	adc	r27, r1
    19d8:	5d 96       	adiw	r26, 0x1d	; 29
    19da:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    19dc:	92 8d       	ldd	r25, Z+26	; 0x1a
    19de:	9f 5f       	subi	r25, 0xFF	; 255
    19e0:	9f 73       	andi	r25, 0x3F	; 63
    19e2:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    19e8:	8f ef       	ldi	r24, 0xFF	; 255
    19ea:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    19ec:	08 95       	ret

000019ee <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    19ee:	fc 01       	movw	r30, r24
    19f0:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    19f2:	44 8d       	ldd	r20, Z+28	; 0x1c
    19f4:	25 2f       	mov	r18, r21
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	84 2f       	mov	r24, r20
    19fa:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    19fc:	82 1b       	sub	r24, r18
    19fe:	93 0b       	sbc	r25, r19
    1a00:	54 17       	cp	r21, r20
    1a02:	10 f0       	brcs	.+4      	; 0x1a08 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1a04:	cf 96       	adiw	r24, 0x3f	; 63
    1a06:	08 95       	ret
  return tail - head - 1;
    1a08:	01 97       	sbiw	r24, 0x01	; 1
}
    1a0a:	08 95       	ret

00001a0c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1a0c:	8f e5       	ldi	r24, 0x5F	; 95
    1a0e:	9e e0       	ldi	r25, 0x0E	; 14
    1a10:	89 2b       	or	r24, r25
    1a12:	49 f0       	breq	.+18     	; 0x1a26 <_Z14serialEventRunv+0x1a>
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	89 2b       	or	r24, r25
    1a1a:	29 f0       	breq	.+10     	; 0x1a26 <_Z14serialEventRunv+0x1a>
    1a1c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <_Z17Serial0_availablev>
    1a20:	81 11       	cpse	r24, r1
    1a22:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1a26:	08 95       	ret

00001a28 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1a28:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1a2a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a2c:	df 01       	movw	r26, r30
    1a2e:	a8 0f       	add	r26, r24
    1a30:	b1 1d       	adc	r27, r1
    1a32:	a3 5a       	subi	r26, 0xA3	; 163
    1a34:	bf 4f       	sbci	r27, 0xFF	; 255
    1a36:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1a38:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	8f 73       	andi	r24, 0x3F	; 63
    1a40:	99 27       	eor	r25, r25
    1a42:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1a44:	a6 89       	ldd	r26, Z+22	; 0x16
    1a46:	b7 89       	ldd	r27, Z+23	; 0x17
    1a48:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1a4a:	a0 89       	ldd	r26, Z+16	; 0x10
    1a4c:	b1 89       	ldd	r27, Z+17	; 0x11
    1a4e:	8c 91       	ld	r24, X
    1a50:	80 64       	ori	r24, 0x40	; 64
    1a52:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1a54:	93 8d       	ldd	r25, Z+27	; 0x1b
    1a56:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a58:	98 13       	cpse	r25, r24
    1a5a:	06 c0       	rjmp	.+12     	; 0x1a68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1a5c:	02 88       	ldd	r0, Z+18	; 0x12
    1a5e:	f3 89       	ldd	r31, Z+19	; 0x13
    1a60:	e0 2d       	mov	r30, r0
    1a62:	80 81       	ld	r24, Z
    1a64:	8f 7d       	andi	r24, 0xDF	; 223
    1a66:	80 83       	st	Z, r24
    1a68:	08 95       	ret

00001a6a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1a6a:	ef 92       	push	r14
    1a6c:	ff 92       	push	r15
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	ec 01       	movw	r28, r24
  _written = true;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1a7c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a80:	98 13       	cpse	r25, r24
    1a82:	05 c0       	rjmp	.+10     	; 0x1a8e <_ZN14HardwareSerial5writeEh+0x24>
    1a84:	e8 89       	ldd	r30, Y+16	; 0x10
    1a86:	f9 89       	ldd	r31, Y+17	; 0x11
    1a88:	80 81       	ld	r24, Z
    1a8a:	85 fd       	sbrc	r24, 5
    1a8c:	24 c0       	rjmp	.+72     	; 0x1ad6 <_ZN14HardwareSerial5writeEh+0x6c>
    1a8e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1a90:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a92:	10 e0       	ldi	r17, 0x00	; 0
    1a94:	0f 5f       	subi	r16, 0xFF	; 255
    1a96:	1f 4f       	sbci	r17, 0xFF	; 255
    1a98:	0f 73       	andi	r16, 0x3F	; 63
    1a9a:	11 27       	eor	r17, r17
    1a9c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1a9e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1aa0:	e8 12       	cpse	r14, r24
    1aa2:	0c c0       	rjmp	.+24     	; 0x1abc <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	07 fc       	sbrc	r0, 7
    1aa8:	fa cf       	rjmp	.-12     	; 0x1a9e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1aaa:	e8 89       	ldd	r30, Y+16	; 0x10
    1aac:	f9 89       	ldd	r31, Y+17	; 0x11
    1aae:	80 81       	ld	r24, Z
    1ab0:	85 ff       	sbrs	r24, 5
    1ab2:	f5 cf       	rjmp	.-22     	; 0x1a9e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1aba:	f1 cf       	rjmp	.-30     	; 0x1a9e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1abc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e8 0f       	add	r30, r24
    1ac2:	f1 1d       	adc	r31, r1
    1ac4:	e3 5a       	subi	r30, 0xA3	; 163
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1aca:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1acc:	ea 89       	ldd	r30, Y+18	; 0x12
    1ace:	fb 89       	ldd	r31, Y+19	; 0x13
    1ad0:	80 81       	ld	r24, Z
    1ad2:	80 62       	ori	r24, 0x20	; 32
    1ad4:	07 c0       	rjmp	.+14     	; 0x1ae4 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1ad6:	ee 89       	ldd	r30, Y+22	; 0x16
    1ad8:	ff 89       	ldd	r31, Y+23	; 0x17
    1ada:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1adc:	e8 89       	ldd	r30, Y+16	; 0x10
    1ade:	f9 89       	ldd	r31, Y+17	; 0x11
    1ae0:	80 81       	ld	r24, Z
    1ae2:	80 64       	ori	r24, 0x40	; 64
    1ae4:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	ff 90       	pop	r15
    1af4:	ef 90       	pop	r14
    1af6:	08 95       	ret

00001af8 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1afe:	88 8d       	ldd	r24, Y+24	; 0x18
    1b00:	88 23       	and	r24, r24
    1b02:	c9 f0       	breq	.+50     	; 0x1b36 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1b04:	ea 89       	ldd	r30, Y+18	; 0x12
    1b06:	fb 89       	ldd	r31, Y+19	; 0x13
    1b08:	80 81       	ld	r24, Z
    1b0a:	85 fd       	sbrc	r24, 5
    1b0c:	05 c0       	rjmp	.+10     	; 0x1b18 <_ZN14HardwareSerial5flushEv+0x20>
    1b0e:	a8 89       	ldd	r26, Y+16	; 0x10
    1b10:	b9 89       	ldd	r27, Y+17	; 0x11
    1b12:	8c 91       	ld	r24, X
    1b14:	86 fd       	sbrc	r24, 6
    1b16:	0f c0       	rjmp	.+30     	; 0x1b36 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	07 fc       	sbrc	r0, 7
    1b1c:	f5 cf       	rjmp	.-22     	; 0x1b08 <_ZN14HardwareSerial5flushEv+0x10>
    1b1e:	80 81       	ld	r24, Z
    1b20:	85 ff       	sbrs	r24, 5
    1b22:	f2 cf       	rjmp	.-28     	; 0x1b08 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1b24:	a8 89       	ldd	r26, Y+16	; 0x10
    1b26:	b9 89       	ldd	r27, Y+17	; 0x11
    1b28:	8c 91       	ld	r24, X
    1b2a:	85 ff       	sbrs	r24, 5
    1b2c:	ed cf       	rjmp	.-38     	; 0x1b08 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1b2e:	ce 01       	movw	r24, r28
    1b30:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b34:	e7 cf       	rjmp	.-50     	; 0x1b04 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	08 95       	ret

00001b3c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1b3c:	cf 92       	push	r12
    1b3e:	df 92       	push	r13
    1b40:	ef 92       	push	r14
    1b42:	ff 92       	push	r15
    1b44:	1f 93       	push	r17
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
    1b4a:	ec 01       	movw	r28, r24
    1b4c:	6a 01       	movw	r12, r20
    1b4e:	7b 01       	movw	r14, r22
    1b50:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1b52:	e8 89       	ldd	r30, Y+16	; 0x10
    1b54:	f9 89       	ldd	r31, Y+17	; 0x11
    1b56:	82 e0       	ldi	r24, 0x02	; 2
    1b58:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1b5a:	41 15       	cp	r20, r1
    1b5c:	51 4e       	sbci	r21, 0xE1	; 225
    1b5e:	61 05       	cpc	r22, r1
    1b60:	71 05       	cpc	r23, r1
    1b62:	b1 f0       	breq	.+44     	; 0x1b90 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	79 e0       	ldi	r23, 0x09	; 9
    1b68:	8d e3       	ldi	r24, 0x3D	; 61
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	a7 01       	movw	r20, r14
    1b6e:	96 01       	movw	r18, r12
    1b70:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <__udivmodsi4>
    1b74:	da 01       	movw	r26, r20
    1b76:	c9 01       	movw	r24, r18
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	a1 09       	sbc	r26, r1
    1b7c:	b1 09       	sbc	r27, r1
    1b7e:	b6 95       	lsr	r27
    1b80:	a7 95       	ror	r26
    1b82:	97 95       	ror	r25
    1b84:	87 95       	ror	r24
    1b86:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1b88:	21 15       	cp	r18, r1
    1b8a:	80 e1       	ldi	r24, 0x10	; 16
    1b8c:	38 07       	cpc	r19, r24
    1b8e:	a8 f0       	brcs	.+42     	; 0x1bba <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1b90:	e8 89       	ldd	r30, Y+16	; 0x10
    1b92:	f9 89       	ldd	r31, Y+17	; 0x11
    1b94:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1b96:	60 e8       	ldi	r22, 0x80	; 128
    1b98:	74 e8       	ldi	r23, 0x84	; 132
    1b9a:	8e e1       	ldi	r24, 0x1E	; 30
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	a7 01       	movw	r20, r14
    1ba0:	96 01       	movw	r18, r12
    1ba2:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <__udivmodsi4>
    1ba6:	da 01       	movw	r26, r20
    1ba8:	c9 01       	movw	r24, r18
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	a1 09       	sbc	r26, r1
    1bae:	b1 09       	sbc	r27, r1
    1bb0:	b6 95       	lsr	r27
    1bb2:	a7 95       	ror	r26
    1bb4:	97 95       	ror	r25
    1bb6:	87 95       	ror	r24
    1bb8:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1bba:	ec 85       	ldd	r30, Y+12	; 0x0c
    1bbc:	fd 85       	ldd	r31, Y+13	; 0x0d
    1bbe:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1bc0:	ee 85       	ldd	r30, Y+14	; 0x0e
    1bc2:	ff 85       	ldd	r31, Y+15	; 0x0f
    1bc4:	20 83       	st	Z, r18

  _written = false;
    1bc6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1bc8:	ec 89       	ldd	r30, Y+20	; 0x14
    1bca:	fd 89       	ldd	r31, Y+21	; 0x15
    1bcc:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1bce:	ea 89       	ldd	r30, Y+18	; 0x12
    1bd0:	fb 89       	ldd	r31, Y+19	; 0x13
    1bd2:	80 81       	ld	r24, Z
    1bd4:	80 61       	ori	r24, 0x10	; 16
    1bd6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1bd8:	ea 89       	ldd	r30, Y+18	; 0x12
    1bda:	fb 89       	ldd	r31, Y+19	; 0x13
    1bdc:	80 81       	ld	r24, Z
    1bde:	88 60       	ori	r24, 0x08	; 8
    1be0:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1be2:	ea 89       	ldd	r30, Y+18	; 0x12
    1be4:	fb 89       	ldd	r31, Y+19	; 0x13
    1be6:	80 81       	ld	r24, Z
    1be8:	80 68       	ori	r24, 0x80	; 128
    1bea:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1bec:	ea 89       	ldd	r30, Y+18	; 0x12
    1bee:	fb 89       	ldd	r31, Y+19	; 0x13
    1bf0:	80 81       	ld	r24, Z
    1bf2:	8f 7d       	andi	r24, 0xDF	; 223
    1bf4:	80 83       	st	Z, r24
}
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	ff 90       	pop	r15
    1bfe:	ef 90       	pop	r14
    1c00:	df 90       	pop	r13
    1c02:	cf 90       	pop	r12
    1c04:	08 95       	ret

00001c06 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	08 95       	ret

00001c0c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1c0c:	08 95       	ret

00001c0e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1c0e:	1f 92       	push	r1
    1c10:	0f 92       	push	r0
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	0f 92       	push	r0
    1c16:	11 24       	eor	r1, r1
    1c18:	2f 93       	push	r18
    1c1a:	8f 93       	push	r24
    1c1c:	9f 93       	push	r25
    1c1e:	ef 93       	push	r30
    1c20:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1c22:	e0 91 d3 02 	lds	r30, 0x02D3	; 0x8002d3 <Serial+0x10>
    1c26:	f0 91 d4 02 	lds	r31, 0x02D4	; 0x8002d4 <Serial+0x11>
    1c2a:	80 81       	ld	r24, Z
    1c2c:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <Serial+0x16>
    1c30:	f0 91 da 02 	lds	r31, 0x02DA	; 0x8002da <Serial+0x17>
    1c34:	82 fd       	sbrc	r24, 2
    1c36:	12 c0       	rjmp	.+36     	; 0x1c5c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1c38:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1c3a:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <Serial+0x19>
    1c3e:	8f 5f       	subi	r24, 0xFF	; 255
    1c40:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1c42:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <Serial+0x1a>
    1c46:	82 17       	cp	r24, r18
    1c48:	51 f0       	breq	.+20     	; 0x1c5e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1c4a:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <Serial+0x19>
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	ed 53       	subi	r30, 0x3D	; 61
    1c52:	fd 4f       	sbci	r31, 0xFD	; 253
    1c54:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1c56:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <Serial+0x19>
    1c5a:	01 c0       	rjmp	.+2      	; 0x1c5e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1c5c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1c5e:	ff 91       	pop	r31
    1c60:	ef 91       	pop	r30
    1c62:	9f 91       	pop	r25
    1c64:	8f 91       	pop	r24
    1c66:	2f 91       	pop	r18
    1c68:	0f 90       	pop	r0
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	0f 90       	pop	r0
    1c6e:	1f 90       	pop	r1
    1c70:	18 95       	reti

00001c72 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1c72:	1f 92       	push	r1
    1c74:	0f 92       	push	r0
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	0f 92       	push	r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	2f 93       	push	r18
    1c7e:	3f 93       	push	r19
    1c80:	4f 93       	push	r20
    1c82:	5f 93       	push	r21
    1c84:	6f 93       	push	r22
    1c86:	7f 93       	push	r23
    1c88:	8f 93       	push	r24
    1c8a:	9f 93       	push	r25
    1c8c:	af 93       	push	r26
    1c8e:	bf 93       	push	r27
    1c90:	ef 93       	push	r30
    1c92:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1c94:	83 ec       	ldi	r24, 0xC3	; 195
    1c96:	92 e0       	ldi	r25, 0x02	; 2
    1c98:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1c9c:	ff 91       	pop	r31
    1c9e:	ef 91       	pop	r30
    1ca0:	bf 91       	pop	r27
    1ca2:	af 91       	pop	r26
    1ca4:	9f 91       	pop	r25
    1ca6:	8f 91       	pop	r24
    1ca8:	7f 91       	pop	r23
    1caa:	6f 91       	pop	r22
    1cac:	5f 91       	pop	r21
    1cae:	4f 91       	pop	r20
    1cb0:	3f 91       	pop	r19
    1cb2:	2f 91       	pop	r18
    1cb4:	0f 90       	pop	r0
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	0f 90       	pop	r0
    1cba:	1f 90       	pop	r1
    1cbc:	18 95       	reti

00001cbe <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1cbe:	83 ec       	ldi	r24, 0xC3	; 195
    1cc0:	92 e0       	ldi	r25, 0x02	; 2
    1cc2:	0e 94 c9 0c 	call	0x1992	; 0x1992 <_ZN14HardwareSerial9availableEv>
    1cc6:	21 e0       	ldi	r18, 0x01	; 1
    1cc8:	89 2b       	or	r24, r25
    1cca:	09 f4       	brne	.+2      	; 0x1cce <_Z17Serial0_availablev+0x10>
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
}
    1cce:	82 2f       	mov	r24, r18
    1cd0:	08 95       	ret

00001cd2 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1cd2:	e3 ec       	ldi	r30, 0xC3	; 195
    1cd4:	f2 e0       	ldi	r31, 0x02	; 2
    1cd6:	13 82       	std	Z+3, r1	; 0x03
    1cd8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1cda:	88 ee       	ldi	r24, 0xE8	; 232
    1cdc:	93 e0       	ldi	r25, 0x03	; 3
    1cde:	a0 e0       	ldi	r26, 0x00	; 0
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	84 83       	std	Z+4, r24	; 0x04
    1ce4:	95 83       	std	Z+5, r25	; 0x05
    1ce6:	a6 83       	std	Z+6, r26	; 0x06
    1ce8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1cea:	81 e2       	ldi	r24, 0x21	; 33
    1cec:	91 e0       	ldi	r25, 0x01	; 1
    1cee:	91 83       	std	Z+1, r25	; 0x01
    1cf0:	80 83       	st	Z, r24
    1cf2:	85 ec       	ldi	r24, 0xC5	; 197
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	95 87       	std	Z+13, r25	; 0x0d
    1cf8:	84 87       	std	Z+12, r24	; 0x0c
    1cfa:	84 ec       	ldi	r24, 0xC4	; 196
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	97 87       	std	Z+15, r25	; 0x0f
    1d00:	86 87       	std	Z+14, r24	; 0x0e
    1d02:	80 ec       	ldi	r24, 0xC0	; 192
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	91 8b       	std	Z+17, r25	; 0x11
    1d08:	80 8b       	std	Z+16, r24	; 0x10
    1d0a:	81 ec       	ldi	r24, 0xC1	; 193
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	93 8b       	std	Z+19, r25	; 0x13
    1d10:	82 8b       	std	Z+18, r24	; 0x12
    1d12:	82 ec       	ldi	r24, 0xC2	; 194
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	95 8b       	std	Z+21, r25	; 0x15
    1d18:	84 8b       	std	Z+20, r24	; 0x14
    1d1a:	86 ec       	ldi	r24, 0xC6	; 198
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	97 8b       	std	Z+23, r25	; 0x17
    1d20:	86 8b       	std	Z+22, r24	; 0x16
    1d22:	11 8e       	std	Z+25, r1	; 0x19
    1d24:	12 8e       	std	Z+26, r1	; 0x1a
    1d26:	13 8e       	std	Z+27, r1	; 0x1b
    1d28:	14 8e       	std	Z+28, r1	; 0x1c
    1d2a:	08 95       	ret

00001d2c <initVariant>:
    1d2c:	08 95       	ret

00001d2e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1d2e:	0e 94 08 11 	call	0x2210	; 0x2210 <init>

	initVariant();
    1d32:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1d36:	0e 94 74 07 	call	0xee8	; 0xee8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1d3a:	c6 e0       	ldi	r28, 0x06	; 6
    1d3c:	dd e0       	ldi	r29, 0x0D	; 13
#endif
	
	setup();
    
	for (;;) {
		loop();
    1d3e:	0e 94 ca 07 	call	0xf94	; 0xf94 <loop>
		if (serialEventRun) serialEventRun();
    1d42:	20 97       	sbiw	r28, 0x00	; 0
    1d44:	e1 f3       	breq	.-8      	; 0x1d3e <main+0x10>
    1d46:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <_Z14serialEventRunv>
    1d4a:	f9 cf       	rjmp	.-14     	; 0x1d3e <main+0x10>

00001d4c <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1d4c:	cf 92       	push	r12
    1d4e:	df 92       	push	r13
    1d50:	ef 92       	push	r14
    1d52:	ff 92       	push	r15
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	6c 01       	movw	r12, r24
    1d5e:	7a 01       	movw	r14, r20
    1d60:	8b 01       	movw	r16, r22
    1d62:	c0 e0       	ldi	r28, 0x00	; 0
    1d64:	d0 e0       	ldi	r29, 0x00	; 0
    1d66:	ce 15       	cp	r28, r14
    1d68:	df 05       	cpc	r29, r15
    1d6a:	81 f0       	breq	.+32     	; 0x1d8c <_ZN5Print5writeEPKhj+0x40>
    1d6c:	d8 01       	movw	r26, r16
    1d6e:	6d 91       	ld	r22, X+
    1d70:	8d 01       	movw	r16, r26
    1d72:	d6 01       	movw	r26, r12
    1d74:	ed 91       	ld	r30, X+
    1d76:	fc 91       	ld	r31, X
    1d78:	01 90       	ld	r0, Z+
    1d7a:	f0 81       	ld	r31, Z
    1d7c:	e0 2d       	mov	r30, r0
    1d7e:	c6 01       	movw	r24, r12
    1d80:	09 95       	icall
    1d82:	89 2b       	or	r24, r25
    1d84:	11 f0       	breq	.+4      	; 0x1d8a <_ZN5Print5writeEPKhj+0x3e>
    1d86:	21 96       	adiw	r28, 0x01	; 1
    1d88:	ee cf       	rjmp	.-36     	; 0x1d66 <_ZN5Print5writeEPKhj+0x1a>
    1d8a:	7e 01       	movw	r14, r28
    1d8c:	c7 01       	movw	r24, r14
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	1f 91       	pop	r17
    1d94:	0f 91       	pop	r16
    1d96:	ff 90       	pop	r15
    1d98:	ef 90       	pop	r14
    1d9a:	df 90       	pop	r13
    1d9c:	cf 90       	pop	r12
    1d9e:	08 95       	ret

00001da0 <_ZN5Print5writeEPKc>:
    1da0:	61 15       	cp	r22, r1
    1da2:	71 05       	cpc	r23, r1
    1da4:	79 f0       	breq	.+30     	; 0x1dc4 <_ZN5Print5writeEPKc+0x24>
    1da6:	fb 01       	movw	r30, r22
    1da8:	01 90       	ld	r0, Z+
    1daa:	00 20       	and	r0, r0
    1dac:	e9 f7       	brne	.-6      	; 0x1da8 <_ZN5Print5writeEPKc+0x8>
    1dae:	31 97       	sbiw	r30, 0x01	; 1
    1db0:	af 01       	movw	r20, r30
    1db2:	46 1b       	sub	r20, r22
    1db4:	57 0b       	sbc	r21, r23
    1db6:	dc 01       	movw	r26, r24
    1db8:	ed 91       	ld	r30, X+
    1dba:	fc 91       	ld	r31, X
    1dbc:	02 80       	ldd	r0, Z+2	; 0x02
    1dbe:	f3 81       	ldd	r31, Z+3	; 0x03
    1dc0:	e0 2d       	mov	r30, r0
    1dc2:	09 94       	ijmp
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	08 95       	ret

00001dca <_ZN5Print5printERK6String>:
    1dca:	db 01       	movw	r26, r22
    1dcc:	14 96       	adiw	r26, 0x04	; 4
    1dce:	4d 91       	ld	r20, X+
    1dd0:	5c 91       	ld	r21, X
    1dd2:	15 97       	sbiw	r26, 0x05	; 5
    1dd4:	6d 91       	ld	r22, X+
    1dd6:	7c 91       	ld	r23, X
    1dd8:	dc 01       	movw	r26, r24
    1dda:	ed 91       	ld	r30, X+
    1ddc:	fc 91       	ld	r31, X
    1dde:	02 80       	ldd	r0, Z+2	; 0x02
    1de0:	f3 81       	ldd	r31, Z+3	; 0x03
    1de2:	e0 2d       	mov	r30, r0
    1de4:	09 94       	ijmp

00001de6 <_ZN5Print5printEPKc>:
    1de6:	0c 94 d0 0e 	jmp	0x1da0	; 0x1da0 <_ZN5Print5writeEPKc>

00001dea <_ZN5Print5printEc>:
    1dea:	dc 01       	movw	r26, r24
    1dec:	ed 91       	ld	r30, X+
    1dee:	fc 91       	ld	r31, X
    1df0:	01 90       	ld	r0, Z+
    1df2:	f0 81       	ld	r31, Z
    1df4:	e0 2d       	mov	r30, r0
    1df6:	09 94       	ijmp

00001df8 <_ZN5Print7printlnEv>:
    1df8:	6f e2       	ldi	r22, 0x2F	; 47
    1dfa:	71 e0       	ldi	r23, 0x01	; 1
    1dfc:	0c 94 d0 0e 	jmp	0x1da0	; 0x1da0 <_ZN5Print5writeEPKc>

00001e00 <_ZN5Print7printlnEPKc>:
    1e00:	0f 93       	push	r16
    1e02:	1f 93       	push	r17
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
    1e08:	ec 01       	movw	r28, r24
    1e0a:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <_ZN5Print5writeEPKc>
    1e0e:	8c 01       	movw	r16, r24
    1e10:	ce 01       	movw	r24, r28
    1e12:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <_ZN5Print7printlnEv>
    1e16:	80 0f       	add	r24, r16
    1e18:	91 1f       	adc	r25, r17
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	1f 91       	pop	r17
    1e20:	0f 91       	pop	r16
    1e22:	08 95       	ret

00001e24 <_ZN5Print11printNumberEmh>:
    1e24:	8f 92       	push	r8
    1e26:	9f 92       	push	r9
    1e28:	af 92       	push	r10
    1e2a:	bf 92       	push	r11
    1e2c:	ef 92       	push	r14
    1e2e:	ff 92       	push	r15
    1e30:	0f 93       	push	r16
    1e32:	1f 93       	push	r17
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	a1 97       	sbiw	r28, 0x21	; 33
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	7c 01       	movw	r14, r24
    1e4a:	fa 01       	movw	r30, r20
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	19 a2       	std	Y+33, r1	; 0x21
    1e50:	22 30       	cpi	r18, 0x02	; 2
    1e52:	08 f4       	brcc	.+2      	; 0x1e56 <_ZN5Print11printNumberEmh+0x32>
    1e54:	2a e0       	ldi	r18, 0x0A	; 10
    1e56:	8e 01       	movw	r16, r28
    1e58:	0f 5d       	subi	r16, 0xDF	; 223
    1e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5c:	82 2e       	mov	r8, r18
    1e5e:	91 2c       	mov	r9, r1
    1e60:	a1 2c       	mov	r10, r1
    1e62:	b1 2c       	mov	r11, r1
    1e64:	bf 01       	movw	r22, r30
    1e66:	a5 01       	movw	r20, r10
    1e68:	94 01       	movw	r18, r8
    1e6a:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <__udivmodsi4>
    1e6e:	f9 01       	movw	r30, r18
    1e70:	ca 01       	movw	r24, r20
    1e72:	01 50       	subi	r16, 0x01	; 1
    1e74:	11 09       	sbc	r17, r1
    1e76:	6a 30       	cpi	r22, 0x0A	; 10
    1e78:	10 f4       	brcc	.+4      	; 0x1e7e <_ZN5Print11printNumberEmh+0x5a>
    1e7a:	60 5d       	subi	r22, 0xD0	; 208
    1e7c:	01 c0       	rjmp	.+2      	; 0x1e80 <_ZN5Print11printNumberEmh+0x5c>
    1e7e:	69 5c       	subi	r22, 0xC9	; 201
    1e80:	d8 01       	movw	r26, r16
    1e82:	6c 93       	st	X, r22
    1e84:	23 2b       	or	r18, r19
    1e86:	24 2b       	or	r18, r20
    1e88:	25 2b       	or	r18, r21
    1e8a:	61 f7       	brne	.-40     	; 0x1e64 <_ZN5Print11printNumberEmh+0x40>
    1e8c:	b8 01       	movw	r22, r16
    1e8e:	c7 01       	movw	r24, r14
    1e90:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <_ZN5Print5writeEPKc>
    1e94:	a1 96       	adiw	r28, 0x21	; 33
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	1f 91       	pop	r17
    1ea6:	0f 91       	pop	r16
    1ea8:	ff 90       	pop	r15
    1eaa:	ef 90       	pop	r14
    1eac:	bf 90       	pop	r11
    1eae:	af 90       	pop	r10
    1eb0:	9f 90       	pop	r9
    1eb2:	8f 90       	pop	r8
    1eb4:	08 95       	ret

00001eb6 <_ZN5Print5printEmi>:
    1eb6:	21 15       	cp	r18, r1
    1eb8:	31 05       	cpc	r19, r1
    1eba:	41 f4       	brne	.+16     	; 0x1ecc <_ZN5Print5printEmi+0x16>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	ed 91       	ld	r30, X+
    1ec0:	fc 91       	ld	r31, X
    1ec2:	01 90       	ld	r0, Z+
    1ec4:	f0 81       	ld	r31, Z
    1ec6:	e0 2d       	mov	r30, r0
    1ec8:	64 2f       	mov	r22, r20
    1eca:	09 94       	ijmp
    1ecc:	0c 94 12 0f 	jmp	0x1e24	; 0x1e24 <_ZN5Print11printNumberEmh>

00001ed0 <_ZN5Print5printEji>:
    1ed0:	9a 01       	movw	r18, r20
    1ed2:	ab 01       	movw	r20, r22
    1ed4:	60 e0       	ldi	r22, 0x00	; 0
    1ed6:	70 e0       	ldi	r23, 0x00	; 0
    1ed8:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <_ZN5Print5printEmi>

00001edc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1edc:	7f 92       	push	r7
    1ede:	8f 92       	push	r8
    1ee0:	9f 92       	push	r9
    1ee2:	af 92       	push	r10
    1ee4:	bf 92       	push	r11
    1ee6:	cf 92       	push	r12
    1ee8:	df 92       	push	r13
    1eea:	ef 92       	push	r14
    1eec:	ff 92       	push	r15
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	8c 01       	movw	r16, r24
    1ef8:	6a 01       	movw	r12, r20
    1efa:	7b 01       	movw	r14, r22
    1efc:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1efe:	9a 01       	movw	r18, r20
    1f00:	ab 01       	movw	r20, r22
    1f02:	c7 01       	movw	r24, r14
    1f04:	b6 01       	movw	r22, r12
    1f06:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <__unordsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	19 f0       	breq	.+6      	; 0x1f14 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1f0e:	62 e3       	ldi	r22, 0x32	; 50
    1f10:	71 e0       	ldi	r23, 0x01	; 1
    1f12:	27 c0       	rjmp	.+78     	; 0x1f62 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1f14:	46 01       	movw	r8, r12
    1f16:	57 01       	movw	r10, r14
    1f18:	e8 94       	clt
    1f1a:	b7 f8       	bld	r11, 7
    1f1c:	2f ef       	ldi	r18, 0xFF	; 255
    1f1e:	3f ef       	ldi	r19, 0xFF	; 255
    1f20:	4f e7       	ldi	r20, 0x7F	; 127
    1f22:	5f e7       	ldi	r21, 0x7F	; 127
    1f24:	c5 01       	movw	r24, r10
    1f26:	b4 01       	movw	r22, r8
    1f28:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <__unordsf2>
    1f2c:	81 11       	cpse	r24, r1
    1f2e:	0d c0       	rjmp	.+26     	; 0x1f4a <_ZN5Print10printFloatEdh+0x6e>
    1f30:	2f ef       	ldi	r18, 0xFF	; 255
    1f32:	3f ef       	ldi	r19, 0xFF	; 255
    1f34:	4f e7       	ldi	r20, 0x7F	; 127
    1f36:	5f e7       	ldi	r21, 0x7F	; 127
    1f38:	c5 01       	movw	r24, r10
    1f3a:	b4 01       	movw	r22, r8
    1f3c:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__cmpsf2>
    1f40:	18 16       	cp	r1, r24
    1f42:	1c f4       	brge	.+6      	; 0x1f4a <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1f44:	66 e3       	ldi	r22, 0x36	; 54
    1f46:	71 e0       	ldi	r23, 0x01	; 1
    1f48:	0c c0       	rjmp	.+24     	; 0x1f62 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1f4a:	2f ef       	ldi	r18, 0xFF	; 255
    1f4c:	3f ef       	ldi	r19, 0xFF	; 255
    1f4e:	4f e7       	ldi	r20, 0x7F	; 127
    1f50:	5f e4       	ldi	r21, 0x4F	; 79
    1f52:	c7 01       	movw	r24, r14
    1f54:	b6 01       	movw	r22, r12
    1f56:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__gesf2>
    1f5a:	18 16       	cp	r1, r24
    1f5c:	94 f4       	brge	.+36     	; 0x1f82 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1f5e:	6a e3       	ldi	r22, 0x3A	; 58
    1f60:	71 e0       	ldi	r23, 0x01	; 1
    1f62:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	ff 90       	pop	r15
    1f6e:	ef 90       	pop	r14
    1f70:	df 90       	pop	r13
    1f72:	cf 90       	pop	r12
    1f74:	bf 90       	pop	r11
    1f76:	af 90       	pop	r10
    1f78:	9f 90       	pop	r9
    1f7a:	8f 90       	pop	r8
    1f7c:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1f7e:	0c 94 d0 0e 	jmp	0x1da0	; 0x1da0 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1f82:	2f ef       	ldi	r18, 0xFF	; 255
    1f84:	3f ef       	ldi	r19, 0xFF	; 255
    1f86:	4f e7       	ldi	r20, 0x7F	; 127
    1f88:	5f ec       	ldi	r21, 0xCF	; 207
    1f8a:	c7 01       	movw	r24, r14
    1f8c:	b6 01       	movw	r22, r12
    1f8e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__cmpsf2>
    1f92:	87 fd       	sbrc	r24, 7
    1f94:	e4 cf       	rjmp	.-56     	; 0x1f5e <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	a9 01       	movw	r20, r18
    1f9c:	c7 01       	movw	r24, r14
    1f9e:	b6 01       	movw	r22, r12
    1fa0:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__cmpsf2>
    1fa4:	87 ff       	sbrs	r24, 7
    1fa6:	0a c0       	rjmp	.+20     	; 0x1fbc <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    1fa8:	6d e2       	ldi	r22, 0x2D	; 45
    1faa:	c8 01       	movw	r24, r16
    1fac:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN5Print5printEc>
    1fb0:	ec 01       	movw	r28, r24
     number = -number;
    1fb2:	f7 fa       	bst	r15, 7
    1fb4:	f0 94       	com	r15
    1fb6:	f7 f8       	bld	r15, 7
    1fb8:	f0 94       	com	r15
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1fbc:	c0 e0       	ldi	r28, 0x00	; 0
    1fbe:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1fc0:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	70 e0       	ldi	r23, 0x00	; 0
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1fca:	7b 14       	cp	r7, r11
    1fcc:	41 f0       	breq	.+16     	; 0x1fde <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e2       	ldi	r20, 0x20	; 32
    1fd4:	51 e4       	ldi	r21, 0x41	; 65
    1fd6:	0e 94 14 0a 	call	0x1428	; 0x1428 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1fda:	b3 94       	inc	r11
    1fdc:	f6 cf       	rjmp	.-20     	; 0x1fca <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    1fde:	a7 01       	movw	r20, r14
    1fe0:	96 01       	movw	r18, r12
    1fe2:	0e 94 6f 09 	call	0x12de	; 0x12de <__addsf3>
    1fe6:	6b 01       	movw	r12, r22
    1fe8:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1fea:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
    1fee:	4b 01       	movw	r8, r22
    1ff0:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1ff2:	2a e0       	ldi	r18, 0x0A	; 10
    1ff4:	ab 01       	movw	r20, r22
    1ff6:	bc 01       	movw	r22, r24
    1ff8:	c8 01       	movw	r24, r16
    1ffa:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1ffe:	c8 0f       	add	r28, r24
    2000:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2002:	77 20       	and	r7, r7
    2004:	b9 f1       	breq	.+110    	; 0x2074 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    2006:	c5 01       	movw	r24, r10
    2008:	b4 01       	movw	r22, r8
    200a:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__floatunsisf>
    200e:	9b 01       	movw	r18, r22
    2010:	ac 01       	movw	r20, r24
    2012:	c7 01       	movw	r24, r14
    2014:	b6 01       	movw	r22, r12
    2016:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__subsf3>
    201a:	6b 01       	movw	r12, r22
    201c:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    201e:	6e e2       	ldi	r22, 0x2E	; 46
    2020:	c8 01       	movw	r24, r16
    2022:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN5Print5printEc>
    2026:	c8 0f       	add	r28, r24
    2028:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e2       	ldi	r20, 0x20	; 32
    2030:	51 e4       	ldi	r21, 0x41	; 65
    2032:	c7 01       	movw	r24, r14
    2034:	b6 01       	movw	r22, r12
    2036:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3>
    203a:	4b 01       	movw	r8, r22
    203c:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    203e:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixunssfsi>
    2042:	6b 01       	movw	r12, r22
    2044:	7c 01       	movw	r14, r24
    n += print(toPrint);
    2046:	4a e0       	ldi	r20, 0x0A	; 10
    2048:	50 e0       	ldi	r21, 0x00	; 0
    204a:	c8 01       	movw	r24, r16
    204c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <_ZN5Print5printEji>
    2050:	c8 0f       	add	r28, r24
    2052:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    2054:	b6 01       	movw	r22, r12
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__floatunsisf>
    205e:	9b 01       	movw	r18, r22
    2060:	ac 01       	movw	r20, r24
    2062:	c5 01       	movw	r24, r10
    2064:	b4 01       	movw	r22, r8
    2066:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__subsf3>
    206a:	6b 01       	movw	r12, r22
    206c:	7c 01       	movw	r14, r24
    206e:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2070:	71 10       	cpse	r7, r1
    2072:	db cf       	rjmp	.-74     	; 0x202a <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2074:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2076:	df 91       	pop	r29
    2078:	cf 91       	pop	r28
    207a:	1f 91       	pop	r17
    207c:	0f 91       	pop	r16
    207e:	ff 90       	pop	r15
    2080:	ef 90       	pop	r14
    2082:	df 90       	pop	r13
    2084:	cf 90       	pop	r12
    2086:	bf 90       	pop	r11
    2088:	af 90       	pop	r10
    208a:	9f 90       	pop	r9
    208c:	8f 90       	pop	r8
    208e:	7f 90       	pop	r7
    2090:	08 95       	ret

00002092 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2092:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <_ZN5Print10printFloatEdh>

00002096 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    2096:	0f 93       	push	r16
    2098:	1f 93       	push	r17
    209a:	cf 93       	push	r28
    209c:	df 93       	push	r29
    209e:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    20a0:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <_ZN5Print10printFloatEdh>
    20a4:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    20a6:	ce 01       	movw	r24, r28
    20a8:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <_ZN5Print7printlnEv>
  return n;
}
    20ac:	80 0f       	add	r24, r16
    20ae:	91 1f       	adc	r25, r17
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	1f 91       	pop	r17
    20b6:	0f 91       	pop	r16
    20b8:	08 95       	ret

000020ba <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    20ba:	1f 92       	push	r1
    20bc:	0f 92       	push	r0
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	0f 92       	push	r0
    20c2:	11 24       	eor	r1, r1
    20c4:	2f 93       	push	r18
    20c6:	3f 93       	push	r19
    20c8:	8f 93       	push	r24
    20ca:	9f 93       	push	r25
    20cc:	af 93       	push	r26
    20ce:	bf 93       	push	r27
    20d0:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <timer0_millis>
    20d4:	90 91 62 03 	lds	r25, 0x0362	; 0x800362 <timer0_millis+0x1>
    20d8:	a0 91 63 03 	lds	r26, 0x0363	; 0x800363 <timer0_millis+0x2>
    20dc:	b0 91 64 03 	lds	r27, 0x0364	; 0x800364 <timer0_millis+0x3>
    20e0:	30 91 60 03 	lds	r19, 0x0360	; 0x800360 <timer0_fract>
    20e4:	23 e0       	ldi	r18, 0x03	; 3
    20e6:	23 0f       	add	r18, r19
    20e8:	2d 37       	cpi	r18, 0x7D	; 125
    20ea:	20 f4       	brcc	.+8      	; 0x20f4 <__vector_16+0x3a>
    20ec:	01 96       	adiw	r24, 0x01	; 1
    20ee:	a1 1d       	adc	r26, r1
    20f0:	b1 1d       	adc	r27, r1
    20f2:	05 c0       	rjmp	.+10     	; 0x20fe <__vector_16+0x44>
    20f4:	26 e8       	ldi	r18, 0x86	; 134
    20f6:	23 0f       	add	r18, r19
    20f8:	02 96       	adiw	r24, 0x02	; 2
    20fa:	a1 1d       	adc	r26, r1
    20fc:	b1 1d       	adc	r27, r1
    20fe:	20 93 60 03 	sts	0x0360, r18	; 0x800360 <timer0_fract>
    2102:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <timer0_millis>
    2106:	90 93 62 03 	sts	0x0362, r25	; 0x800362 <timer0_millis+0x1>
    210a:	a0 93 63 03 	sts	0x0363, r26	; 0x800363 <timer0_millis+0x2>
    210e:	b0 93 64 03 	sts	0x0364, r27	; 0x800364 <timer0_millis+0x3>
    2112:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <timer0_overflow_count>
    2116:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <timer0_overflow_count+0x1>
    211a:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <timer0_overflow_count+0x2>
    211e:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <timer0_overflow_count+0x3>
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	a1 1d       	adc	r26, r1
    2126:	b1 1d       	adc	r27, r1
    2128:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <timer0_overflow_count>
    212c:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <timer0_overflow_count+0x1>
    2130:	a0 93 67 03 	sts	0x0367, r26	; 0x800367 <timer0_overflow_count+0x2>
    2134:	b0 93 68 03 	sts	0x0368, r27	; 0x800368 <timer0_overflow_count+0x3>
    2138:	bf 91       	pop	r27
    213a:	af 91       	pop	r26
    213c:	9f 91       	pop	r25
    213e:	8f 91       	pop	r24
    2140:	3f 91       	pop	r19
    2142:	2f 91       	pop	r18
    2144:	0f 90       	pop	r0
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	0f 90       	pop	r0
    214a:	1f 90       	pop	r1
    214c:	18 95       	reti

0000214e <micros>:
    214e:	3f b7       	in	r19, 0x3f	; 63
    2150:	f8 94       	cli
    2152:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <timer0_overflow_count>
    2156:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <timer0_overflow_count+0x1>
    215a:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <timer0_overflow_count+0x2>
    215e:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <timer0_overflow_count+0x3>
    2162:	26 b5       	in	r18, 0x26	; 38
    2164:	a8 9b       	sbis	0x15, 0	; 21
    2166:	05 c0       	rjmp	.+10     	; 0x2172 <micros+0x24>
    2168:	2f 3f       	cpi	r18, 0xFF	; 255
    216a:	19 f0       	breq	.+6      	; 0x2172 <micros+0x24>
    216c:	01 96       	adiw	r24, 0x01	; 1
    216e:	a1 1d       	adc	r26, r1
    2170:	b1 1d       	adc	r27, r1
    2172:	3f bf       	out	0x3f, r19	; 63
    2174:	ba 2f       	mov	r27, r26
    2176:	a9 2f       	mov	r26, r25
    2178:	98 2f       	mov	r25, r24
    217a:	88 27       	eor	r24, r24
    217c:	82 0f       	add	r24, r18
    217e:	91 1d       	adc	r25, r1
    2180:	a1 1d       	adc	r26, r1
    2182:	b1 1d       	adc	r27, r1
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	42 e0       	ldi	r20, 0x02	; 2
    218a:	66 0f       	add	r22, r22
    218c:	77 1f       	adc	r23, r23
    218e:	88 1f       	adc	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	4a 95       	dec	r20
    2194:	d1 f7       	brne	.-12     	; 0x218a <micros+0x3c>
    2196:	08 95       	ret

00002198 <delay>:
    2198:	8f 92       	push	r8
    219a:	9f 92       	push	r9
    219c:	af 92       	push	r10
    219e:	bf 92       	push	r11
    21a0:	cf 92       	push	r12
    21a2:	df 92       	push	r13
    21a4:	ef 92       	push	r14
    21a6:	ff 92       	push	r15
    21a8:	6b 01       	movw	r12, r22
    21aa:	7c 01       	movw	r14, r24
    21ac:	0e 94 a7 10 	call	0x214e	; 0x214e <micros>
    21b0:	4b 01       	movw	r8, r22
    21b2:	5c 01       	movw	r10, r24
    21b4:	c1 14       	cp	r12, r1
    21b6:	d1 04       	cpc	r13, r1
    21b8:	e1 04       	cpc	r14, r1
    21ba:	f1 04       	cpc	r15, r1
    21bc:	01 f1       	breq	.+64     	; 0x21fe <delay+0x66>
    21be:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <yield>
    21c2:	0e 94 a7 10 	call	0x214e	; 0x214e <micros>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	88 19       	sub	r24, r8
    21cc:	99 09       	sbc	r25, r9
    21ce:	aa 09       	sbc	r26, r10
    21d0:	bb 09       	sbc	r27, r11
    21d2:	88 3e       	cpi	r24, 0xE8	; 232
    21d4:	93 40       	sbci	r25, 0x03	; 3
    21d6:	a1 05       	cpc	r26, r1
    21d8:	b1 05       	cpc	r27, r1
    21da:	60 f3       	brcs	.-40     	; 0x21b4 <delay+0x1c>
    21dc:	21 e0       	ldi	r18, 0x01	; 1
    21de:	c2 1a       	sub	r12, r18
    21e0:	d1 08       	sbc	r13, r1
    21e2:	e1 08       	sbc	r14, r1
    21e4:	f1 08       	sbc	r15, r1
    21e6:	88 ee       	ldi	r24, 0xE8	; 232
    21e8:	88 0e       	add	r8, r24
    21ea:	83 e0       	ldi	r24, 0x03	; 3
    21ec:	98 1e       	adc	r9, r24
    21ee:	a1 1c       	adc	r10, r1
    21f0:	b1 1c       	adc	r11, r1
    21f2:	c1 14       	cp	r12, r1
    21f4:	d1 04       	cpc	r13, r1
    21f6:	e1 04       	cpc	r14, r1
    21f8:	f1 04       	cpc	r15, r1
    21fa:	19 f7       	brne	.-58     	; 0x21c2 <delay+0x2a>
    21fc:	db cf       	rjmp	.-74     	; 0x21b4 <delay+0x1c>
    21fe:	ff 90       	pop	r15
    2200:	ef 90       	pop	r14
    2202:	df 90       	pop	r13
    2204:	cf 90       	pop	r12
    2206:	bf 90       	pop	r11
    2208:	af 90       	pop	r10
    220a:	9f 90       	pop	r9
    220c:	8f 90       	pop	r8
    220e:	08 95       	ret

00002210 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2210:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2212:	84 b5       	in	r24, 0x24	; 36
    2214:	82 60       	ori	r24, 0x02	; 2
    2216:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2218:	84 b5       	in	r24, 0x24	; 36
    221a:	81 60       	ori	r24, 0x01	; 1
    221c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    221e:	85 b5       	in	r24, 0x25	; 37
    2220:	82 60       	ori	r24, 0x02	; 2
    2222:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2224:	85 b5       	in	r24, 0x25	; 37
    2226:	81 60       	ori	r24, 0x01	; 1
    2228:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    222a:	ee e6       	ldi	r30, 0x6E	; 110
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	81 60       	ori	r24, 0x01	; 1
    2232:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2234:	e1 e8       	ldi	r30, 0x81	; 129
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    223a:	80 81       	ld	r24, Z
    223c:	82 60       	ori	r24, 0x02	; 2
    223e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2240:	80 81       	ld	r24, Z
    2242:	81 60       	ori	r24, 0x01	; 1
    2244:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2246:	e0 e8       	ldi	r30, 0x80	; 128
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	81 60       	ori	r24, 0x01	; 1
    224e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2250:	e1 eb       	ldi	r30, 0xB1	; 177
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	84 60       	ori	r24, 0x04	; 4
    2258:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    225a:	e0 eb       	ldi	r30, 0xB0	; 176
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	81 60       	ori	r24, 0x01	; 1
    2262:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2264:	ea e7       	ldi	r30, 0x7A	; 122
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	84 60       	ori	r24, 0x04	; 4
    226c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    226e:	80 81       	ld	r24, Z
    2270:	82 60       	ori	r24, 0x02	; 2
    2272:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2274:	80 81       	ld	r24, Z
    2276:	81 60       	ori	r24, 0x01	; 1
    2278:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    227a:	80 81       	ld	r24, Z
    227c:	80 68       	ori	r24, 0x80	; 128
    227e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2280:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2284:	08 95       	ret

00002286 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2286:	8e 30       	cpi	r24, 0x0E	; 14
    2288:	08 f0       	brcs	.+2      	; 0x228c <analogRead+0x6>
    228a:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    228c:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <analog_reference>
    2290:	90 e4       	ldi	r25, 0x40	; 64
    2292:	29 9f       	mul	r18, r25
    2294:	90 01       	movw	r18, r0
    2296:	11 24       	eor	r1, r1
    2298:	87 70       	andi	r24, 0x07	; 7
    229a:	82 2b       	or	r24, r18
    229c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    22a0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    22a4:	80 64       	ori	r24, 0x40	; 64
    22a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    22aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    22ae:	86 fd       	sbrc	r24, 6
    22b0:	fc cf       	rjmp	.-8      	; 0x22aa <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    22b2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    22b6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    22ba:	90 e0       	ldi	r25, 0x00	; 0
}
    22bc:	92 2b       	or	r25, r18
    22be:	08 95       	ret

000022c0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    22c0:	83 30       	cpi	r24, 0x03	; 3
    22c2:	81 f0       	breq	.+32     	; 0x22e4 <turnOffPWM+0x24>
    22c4:	28 f4       	brcc	.+10     	; 0x22d0 <turnOffPWM+0x10>
    22c6:	81 30       	cpi	r24, 0x01	; 1
    22c8:	99 f0       	breq	.+38     	; 0x22f0 <turnOffPWM+0x30>
    22ca:	82 30       	cpi	r24, 0x02	; 2
    22cc:	a1 f0       	breq	.+40     	; 0x22f6 <turnOffPWM+0x36>
    22ce:	08 95       	ret
    22d0:	87 30       	cpi	r24, 0x07	; 7
    22d2:	a9 f0       	breq	.+42     	; 0x22fe <turnOffPWM+0x3e>
    22d4:	88 30       	cpi	r24, 0x08	; 8
    22d6:	b9 f0       	breq	.+46     	; 0x2306 <turnOffPWM+0x46>
    22d8:	84 30       	cpi	r24, 0x04	; 4
    22da:	d1 f4       	brne	.+52     	; 0x2310 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    22dc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    22e0:	8f 7d       	andi	r24, 0xDF	; 223
    22e2:	03 c0       	rjmp	.+6      	; 0x22ea <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    22e4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    22e8:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    22ea:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    22ee:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    22f0:	84 b5       	in	r24, 0x24	; 36
    22f2:	8f 77       	andi	r24, 0x7F	; 127
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    22f6:	84 b5       	in	r24, 0x24	; 36
    22f8:	8f 7d       	andi	r24, 0xDF	; 223
    22fa:	84 bd       	out	0x24, r24	; 36
    22fc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    22fe:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2302:	8f 77       	andi	r24, 0x7F	; 127
    2304:	03 c0       	rjmp	.+6      	; 0x230c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2306:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    230a:	8f 7d       	andi	r24, 0xDF	; 223
    230c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2310:	08 95       	ret

00002312 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2312:	cf 93       	push	r28
    2314:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	fc 01       	movw	r30, r24
    231a:	e8 53       	subi	r30, 0x38	; 56
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2320:	fc 01       	movw	r30, r24
    2322:	e4 52       	subi	r30, 0x24	; 36
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2328:	88 23       	and	r24, r24
    232a:	61 f1       	breq	.+88     	; 0x2384 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	fc 01       	movw	r30, r24
    2334:	e6 50       	subi	r30, 0x06	; 6
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	c5 91       	lpm	r28, Z+
    233a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    233c:	fc 01       	movw	r30, r24
    233e:	e0 51       	subi	r30, 0x10	; 16
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	a5 91       	lpm	r26, Z+
    2344:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2346:	61 11       	cpse	r22, r1
    2348:	09 c0       	rjmp	.+18     	; 0x235c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    234a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    234c:	f8 94       	cli
		*reg &= ~bit;
    234e:	88 81       	ld	r24, Y
    2350:	20 95       	com	r18
    2352:	82 23       	and	r24, r18
    2354:	88 83       	st	Y, r24
		*out &= ~bit;
    2356:	ec 91       	ld	r30, X
    2358:	2e 23       	and	r18, r30
    235a:	0b c0       	rjmp	.+22     	; 0x2372 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    235c:	62 30       	cpi	r22, 0x02	; 2
    235e:	61 f4       	brne	.+24     	; 0x2378 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2360:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2362:	f8 94       	cli
		*reg &= ~bit;
    2364:	88 81       	ld	r24, Y
    2366:	32 2f       	mov	r19, r18
    2368:	30 95       	com	r19
    236a:	83 23       	and	r24, r19
    236c:	88 83       	st	Y, r24
		*out |= bit;
    236e:	ec 91       	ld	r30, X
    2370:	2e 2b       	or	r18, r30
    2372:	2c 93       	st	X, r18
		SREG = oldSREG;
    2374:	9f bf       	out	0x3f, r25	; 63
    2376:	06 c0       	rjmp	.+12     	; 0x2384 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2378:	8f b7       	in	r24, 0x3f	; 63
                cli();
    237a:	f8 94       	cli
		*reg |= bit;
    237c:	e8 81       	ld	r30, Y
    237e:	2e 2b       	or	r18, r30
    2380:	28 83       	st	Y, r18
		SREG = oldSREG;
    2382:	8f bf       	out	0x3f, r24	; 63
	}
}
    2384:	df 91       	pop	r29
    2386:	cf 91       	pop	r28
    2388:	08 95       	ret

0000238a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    238a:	1f 93       	push	r17
    238c:	cf 93       	push	r28
    238e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2390:	28 2f       	mov	r18, r24
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	f9 01       	movw	r30, r18
    2396:	ec 54       	subi	r30, 0x4C	; 76
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    239c:	f9 01       	movw	r30, r18
    239e:	e8 53       	subi	r30, 0x38	; 56
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    23a4:	f9 01       	movw	r30, r18
    23a6:	e4 52       	subi	r30, 0x24	; 36
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    23ac:	cc 23       	and	r28, r28
    23ae:	c1 f0       	breq	.+48     	; 0x23e0 <digitalWrite+0x56>
    23b0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    23b2:	81 11       	cpse	r24, r1
    23b4:	0e 94 60 11 	call	0x22c0	; 0x22c0 <turnOffPWM>

	out = portOutputRegister(port);
    23b8:	ec 2f       	mov	r30, r28
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	ee 0f       	add	r30, r30
    23be:	ff 1f       	adc	r31, r31
    23c0:	e0 51       	subi	r30, 0x10	; 16
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	a5 91       	lpm	r26, Z+
    23c6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    23c8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    23ca:	f8 94       	cli

	if (val == LOW) {
    23cc:	11 11       	cpse	r17, r1
    23ce:	04 c0       	rjmp	.+8      	; 0x23d8 <digitalWrite+0x4e>
		*out &= ~bit;
    23d0:	8c 91       	ld	r24, X
    23d2:	d0 95       	com	r29
    23d4:	d8 23       	and	r29, r24
    23d6:	02 c0       	rjmp	.+4      	; 0x23dc <digitalWrite+0x52>
	} else {
		*out |= bit;
    23d8:	ec 91       	ld	r30, X
    23da:	de 2b       	or	r29, r30
    23dc:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    23de:	9f bf       	out	0x3f, r25	; 63
}
    23e0:	df 91       	pop	r29
    23e2:	cf 91       	pop	r28
    23e4:	1f 91       	pop	r17
    23e6:	08 95       	ret

000023e8 <_ZN6StringD1Ev>:
{
	init();
	char buf[1 + 8 * sizeof(unsigned char)];
	utoa(value, buf, base);
	*this = buf;
}
    23e8:	fc 01       	movw	r30, r24
    23ea:	80 81       	ld	r24, Z
    23ec:	91 81       	ldd	r25, Z+1	; 0x01
    23ee:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <free>

000023f2 <_ZN6String10invalidateEv>:
    23f2:	cf 93       	push	r28
    23f4:	df 93       	push	r29
    23f6:	ec 01       	movw	r28, r24
    23f8:	88 81       	ld	r24, Y
    23fa:	99 81       	ldd	r25, Y+1	; 0x01
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	11 f0       	breq	.+4      	; 0x2404 <_ZN6String10invalidateEv+0x12>
    2400:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <free>
    2404:	19 82       	std	Y+1, r1	; 0x01
    2406:	18 82       	st	Y, r1
    2408:	1d 82       	std	Y+5, r1	; 0x05
    240a:	1c 82       	std	Y+4, r1	; 0x04
    240c:	1b 82       	std	Y+3, r1	; 0x03
    240e:	1a 82       	std	Y+2, r1	; 0x02
    2410:	df 91       	pop	r29
    2412:	cf 91       	pop	r28
    2414:	08 95       	ret

00002416 <_ZN6String12changeBufferEj>:
    2416:	0f 93       	push	r16
    2418:	1f 93       	push	r17
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    241e:	ec 01       	movw	r28, r24
    2420:	8b 01       	movw	r16, r22
    2422:	6f 5f       	subi	r22, 0xFF	; 255
    2424:	7f 4f       	sbci	r23, 0xFF	; 255
    2426:	88 81       	ld	r24, Y
    2428:	99 81       	ldd	r25, Y+1	; 0x01
    242a:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <realloc>
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	31 f0       	breq	.+12     	; 0x243e <_ZN6String12changeBufferEj+0x28>
    2432:	99 83       	std	Y+1, r25	; 0x01
    2434:	88 83       	st	Y, r24
    2436:	1b 83       	std	Y+3, r17	; 0x03
    2438:	0a 83       	std	Y+2, r16	; 0x02
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <_ZN6String12changeBufferEj+0x2a>
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	1f 91       	pop	r17
    2446:	0f 91       	pop	r16
    2448:	08 95       	ret

0000244a <_ZN6String7reserveEj>:
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	ec 01       	movw	r28, r24
    2450:	88 81       	ld	r24, Y
    2452:	99 81       	ldd	r25, Y+1	; 0x01
    2454:	89 2b       	or	r24, r25
    2456:	29 f0       	breq	.+10     	; 0x2462 <_ZN6String7reserveEj+0x18>
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	9b 81       	ldd	r25, Y+3	; 0x03
    245c:	86 17       	cp	r24, r22
    245e:	97 07       	cpc	r25, r23
    2460:	60 f4       	brcc	.+24     	; 0x247a <_ZN6String7reserveEj+0x30>
    2462:	ce 01       	movw	r24, r28
    2464:	0e 94 0b 12 	call	0x2416	; 0x2416 <_ZN6String12changeBufferEj>
    2468:	88 23       	and	r24, r24
    246a:	41 f0       	breq	.+16     	; 0x247c <_ZN6String7reserveEj+0x32>
    246c:	8c 81       	ldd	r24, Y+4	; 0x04
    246e:	9d 81       	ldd	r25, Y+5	; 0x05
    2470:	89 2b       	or	r24, r25
    2472:	19 f4       	brne	.+6      	; 0x247a <_ZN6String7reserveEj+0x30>
    2474:	e8 81       	ld	r30, Y
    2476:	f9 81       	ldd	r31, Y+1	; 0x01
    2478:	10 82       	st	Z, r1
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	08 95       	ret

00002482 <_ZN6String4copyEPKcj>:
    2482:	ef 92       	push	r14
    2484:	ff 92       	push	r15
    2486:	0f 93       	push	r16
    2488:	1f 93       	push	r17
    248a:	cf 93       	push	r28
    248c:	df 93       	push	r29
    248e:	ec 01       	movw	r28, r24
    2490:	7b 01       	movw	r14, r22
    2492:	8a 01       	movw	r16, r20
    2494:	ba 01       	movw	r22, r20
    2496:	0e 94 25 12 	call	0x244a	; 0x244a <_ZN6String7reserveEj>
    249a:	81 11       	cpse	r24, r1
    249c:	04 c0       	rjmp	.+8      	; 0x24a6 <_ZN6String4copyEPKcj+0x24>
    249e:	ce 01       	movw	r24, r28
    24a0:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <_ZN6String10invalidateEv>
    24a4:	07 c0       	rjmp	.+14     	; 0x24b4 <_ZN6String4copyEPKcj+0x32>
    24a6:	1d 83       	std	Y+5, r17	; 0x05
    24a8:	0c 83       	std	Y+4, r16	; 0x04
    24aa:	b7 01       	movw	r22, r14
    24ac:	88 81       	ld	r24, Y
    24ae:	99 81       	ldd	r25, Y+1	; 0x01
    24b0:	0e 94 65 1f 	call	0x3eca	; 0x3eca <strcpy>
    24b4:	ce 01       	movw	r24, r28
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	1f 91       	pop	r17
    24bc:	0f 91       	pop	r16
    24be:	ff 90       	pop	r15
    24c0:	ef 90       	pop	r14
    24c2:	08 95       	ret

000024c4 <_ZN6StringaSEPKc>:
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	ec 01       	movw	r28, r24
    24ca:	61 15       	cp	r22, r1
    24cc:	71 05       	cpc	r23, r1
    24ce:	59 f0       	breq	.+22     	; 0x24e6 <_ZN6StringaSEPKc+0x22>
    24d0:	fb 01       	movw	r30, r22
    24d2:	01 90       	ld	r0, Z+
    24d4:	00 20       	and	r0, r0
    24d6:	e9 f7       	brne	.-6      	; 0x24d2 <_ZN6StringaSEPKc+0xe>
    24d8:	31 97       	sbiw	r30, 0x01	; 1
    24da:	af 01       	movw	r20, r30
    24dc:	46 1b       	sub	r20, r22
    24de:	57 0b       	sbc	r21, r23
    24e0:	0e 94 41 12 	call	0x2482	; 0x2482 <_ZN6String4copyEPKcj>
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <_ZN6StringaSEPKc+0x26>
    24e6:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <_ZN6String10invalidateEv>
    24ea:	ce 01       	movw	r24, r28
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	08 95       	ret

000024f2 <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	62 97       	sbiw	r28, 0x12	; 18
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
    250a:	8c 01       	movw	r16, r24
    250c:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    250e:	f8 01       	movw	r30, r16
    2510:	11 82       	std	Z+1, r1	; 0x01
    2512:	10 82       	st	Z, r1
	capacity = 0;
    2514:	13 82       	std	Z+3, r1	; 0x03
    2516:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2518:	15 82       	std	Z+5, r1	; 0x05
    251a:	14 82       	std	Z+4, r1	; 0x04
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
    251c:	50 e0       	ldi	r21, 0x00	; 0
    251e:	be 01       	movw	r22, r28
    2520:	6f 5f       	subi	r22, 0xFF	; 255
    2522:	7f 4f       	sbci	r23, 0xFF	; 255
    2524:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <itoa>
String::String(int value, unsigned char base)
{
	init();
	char buf[2 + 8 * sizeof(int)];
	itoa(value, buf, base);
	*this = buf;
    2528:	be 01       	movw	r22, r28
    252a:	6f 5f       	subi	r22, 0xFF	; 255
    252c:	7f 4f       	sbci	r23, 0xFF	; 255
    252e:	c8 01       	movw	r24, r16
    2530:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN6StringaSEPKc>
}
    2534:	62 96       	adiw	r28, 0x12	; 18
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	1f 91       	pop	r17
    2546:	0f 91       	pop	r16
    2548:	08 95       	ret

0000254a <_ZN12Adafruit_GFX9writeLineEiiiij>:
    }
    if(maxy >= miny) {
        *y1 = miny;
        *h  = maxy - miny + 1;
    }
}
    254a:	2f 92       	push	r2
    254c:	3f 92       	push	r3
    254e:	4f 92       	push	r4
    2550:	5f 92       	push	r5
    2552:	6f 92       	push	r6
    2554:	7f 92       	push	r7
    2556:	8f 92       	push	r8
    2558:	9f 92       	push	r9
    255a:	af 92       	push	r10
    255c:	bf 92       	push	r11
    255e:	cf 92       	push	r12
    2560:	df 92       	push	r13
    2562:	ef 92       	push	r14
    2564:	ff 92       	push	r15
    2566:	0f 93       	push	r16
    2568:	1f 93       	push	r17
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	00 d0       	rcall	.+0      	; 0x2570 <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    2570:	00 d0       	rcall	.+0      	; 0x2572 <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    2572:	00 d0       	rcall	.+0      	; 0x2574 <_ZN12Adafruit_GFX9writeLineEiiiij+0x2a>
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	2c 01       	movw	r4, r24
    257a:	7e 83       	std	Y+6, r23	; 0x06
    257c:	6d 83       	std	Y+5, r22	; 0x05
    257e:	6a 01       	movw	r12, r20
    2580:	59 01       	movw	r10, r18
    2582:	c8 01       	movw	r24, r16
    2584:	fc 82       	std	Y+4, r15	; 0x04
    2586:	eb 82       	std	Y+3, r14	; 0x03
    2588:	48 01       	movw	r8, r16
    258a:	84 1a       	sub	r8, r20
    258c:	95 0a       	sbc	r9, r21
    258e:	97 fe       	sbrs	r9, 7
    2590:	03 c0       	rjmp	.+6      	; 0x2598 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4e>
    2592:	91 94       	neg	r9
    2594:	81 94       	neg	r8
    2596:	91 08       	sbc	r9, r1
    2598:	35 01       	movw	r6, r10
    259a:	2d 81       	ldd	r18, Y+5	; 0x05
    259c:	3e 81       	ldd	r19, Y+6	; 0x06
    259e:	62 1a       	sub	r6, r18
    25a0:	73 0a       	sbc	r7, r19
    25a2:	77 fe       	sbrs	r7, 7
    25a4:	03 c0       	rjmp	.+6      	; 0x25ac <_ZN12Adafruit_GFX9writeLineEiiiij+0x62>
    25a6:	71 94       	neg	r7
    25a8:	61 94       	neg	r6
    25aa:	71 08       	sbc	r7, r1
    25ac:	68 14       	cp	r6, r8
    25ae:	79 04       	cpc	r7, r9
    25b0:	5c f4       	brge	.+22     	; 0x25c8 <_ZN12Adafruit_GFX9writeLineEiiiij+0x7e>
    25b2:	3a 2d       	mov	r19, r10
    25b4:	2b 2d       	mov	r18, r11
    25b6:	5c 01       	movw	r10, r24
    25b8:	83 2f       	mov	r24, r19
    25ba:	92 2f       	mov	r25, r18
    25bc:	3d 81       	ldd	r19, Y+5	; 0x05
    25be:	2e 81       	ldd	r18, Y+6	; 0x06
    25c0:	de 82       	std	Y+6, r13	; 0x06
    25c2:	cd 82       	std	Y+5, r12	; 0x05
    25c4:	c3 2e       	mov	r12, r19
    25c6:	d2 2e       	mov	r13, r18
    25c8:	ad 81       	ldd	r26, Y+5	; 0x05
    25ca:	be 81       	ldd	r27, Y+6	; 0x06
    25cc:	aa 16       	cp	r10, r26
    25ce:	bb 06       	cpc	r11, r27
    25d0:	5c f4       	brge	.+22     	; 0x25e8 <_ZN12Adafruit_GFX9writeLineEiiiij+0x9e>
    25d2:	3c 2d       	mov	r19, r12
    25d4:	2d 2d       	mov	r18, r13
    25d6:	6c 01       	movw	r12, r24
    25d8:	83 2f       	mov	r24, r19
    25da:	92 2f       	mov	r25, r18
    25dc:	3d 81       	ldd	r19, Y+5	; 0x05
    25de:	2e 81       	ldd	r18, Y+6	; 0x06
    25e0:	be 82       	std	Y+6, r11	; 0x06
    25e2:	ad 82       	std	Y+5, r10	; 0x05
    25e4:	a3 2e       	mov	r10, r19
    25e6:	b2 2e       	mov	r11, r18
    25e8:	85 01       	movw	r16, r10
    25ea:	2d 81       	ldd	r18, Y+5	; 0x05
    25ec:	3e 81       	ldd	r19, Y+6	; 0x06
    25ee:	02 1b       	sub	r16, r18
    25f0:	13 0b       	sbc	r17, r19
    25f2:	1c 01       	movw	r2, r24
    25f4:	2c 18       	sub	r2, r12
    25f6:	3d 08       	sbc	r3, r13
    25f8:	37 fe       	sbrs	r3, 7
    25fa:	03 c0       	rjmp	.+6      	; 0x2602 <_ZN12Adafruit_GFX9writeLineEiiiij+0xb8>
    25fc:	31 94       	neg	r3
    25fe:	21 94       	neg	r2
    2600:	31 08       	sbc	r3, r1
    2602:	78 01       	movw	r14, r16
    2604:	17 ff       	sbrs	r17, 7
    2606:	03 c0       	rjmp	.+6      	; 0x260e <_ZN12Adafruit_GFX9writeLineEiiiij+0xc4>
    2608:	3f ef       	ldi	r19, 0xFF	; 255
    260a:	e3 1a       	sub	r14, r19
    260c:	f3 0a       	sbc	r15, r19
    260e:	f5 94       	asr	r15
    2610:	e7 94       	ror	r14
    2612:	c8 16       	cp	r12, r24
    2614:	d9 06       	cpc	r13, r25
    2616:	2c f0       	brlt	.+10     	; 0x2622 <_ZN12Adafruit_GFX9writeLineEiiiij+0xd8>
    2618:	8f ef       	ldi	r24, 0xFF	; 255
    261a:	9f ef       	ldi	r25, 0xFF	; 255
    261c:	9a 83       	std	Y+2, r25	; 0x02
    261e:	89 83       	std	Y+1, r24	; 0x01
    2620:	04 c0       	rjmp	.+8      	; 0x262a <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    2622:	a1 e0       	ldi	r26, 0x01	; 1
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	ba 83       	std	Y+2, r27	; 0x02
    2628:	a9 83       	std	Y+1, r26	; 0x01
    262a:	2d 81       	ldd	r18, Y+5	; 0x05
    262c:	3e 81       	ldd	r19, Y+6	; 0x06
    262e:	a2 16       	cp	r10, r18
    2630:	b3 06       	cpc	r11, r19
    2632:	24 f1       	brlt	.+72     	; 0x267c <_ZN12Adafruit_GFX9writeLineEiiiij+0x132>
    2634:	d2 01       	movw	r26, r4
    2636:	ed 91       	ld	r30, X+
    2638:	fc 91       	ld	r31, X
    263a:	04 84       	ldd	r0, Z+12	; 0x0c
    263c:	f5 85       	ldd	r31, Z+13	; 0x0d
    263e:	e0 2d       	mov	r30, r0
    2640:	2b 81       	ldd	r18, Y+3	; 0x03
    2642:	3c 81       	ldd	r19, Y+4	; 0x04
    2644:	68 14       	cp	r6, r8
    2646:	79 04       	cpc	r7, r9
    2648:	24 f4       	brge	.+8      	; 0x2652 <_ZN12Adafruit_GFX9writeLineEiiiij+0x108>
    264a:	4d 81       	ldd	r20, Y+5	; 0x05
    264c:	5e 81       	ldd	r21, Y+6	; 0x06
    264e:	b6 01       	movw	r22, r12
    2650:	03 c0       	rjmp	.+6      	; 0x2658 <_ZN12Adafruit_GFX9writeLineEiiiij+0x10e>
    2652:	a6 01       	movw	r20, r12
    2654:	6d 81       	ldd	r22, Y+5	; 0x05
    2656:	7e 81       	ldd	r23, Y+6	; 0x06
    2658:	c2 01       	movw	r24, r4
    265a:	09 95       	icall
    265c:	e2 18       	sub	r14, r2
    265e:	f3 08       	sbc	r15, r3
    2660:	f7 fe       	sbrs	r15, 7
    2662:	06 c0       	rjmp	.+12     	; 0x2670 <_ZN12Adafruit_GFX9writeLineEiiiij+0x126>
    2664:	29 81       	ldd	r18, Y+1	; 0x01
    2666:	3a 81       	ldd	r19, Y+2	; 0x02
    2668:	c2 0e       	add	r12, r18
    266a:	d3 1e       	adc	r13, r19
    266c:	e0 0e       	add	r14, r16
    266e:	f1 1e       	adc	r15, r17
    2670:	8d 81       	ldd	r24, Y+5	; 0x05
    2672:	9e 81       	ldd	r25, Y+6	; 0x06
    2674:	01 96       	adiw	r24, 0x01	; 1
    2676:	9e 83       	std	Y+6, r25	; 0x06
    2678:	8d 83       	std	Y+5, r24	; 0x05
    267a:	d7 cf       	rjmp	.-82     	; 0x262a <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    267c:	26 96       	adiw	r28, 0x06	; 6
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	1f 91       	pop	r17
    268e:	0f 91       	pop	r16
    2690:	ff 90       	pop	r15
    2692:	ef 90       	pop	r14
    2694:	df 90       	pop	r13
    2696:	cf 90       	pop	r12
    2698:	bf 90       	pop	r11
    269a:	af 90       	pop	r10
    269c:	9f 90       	pop	r9
    269e:	8f 90       	pop	r8
    26a0:	7f 90       	pop	r7
    26a2:	6f 90       	pop	r6
    26a4:	5f 90       	pop	r5
    26a6:	4f 90       	pop	r4
    26a8:	3f 90       	pop	r3
    26aa:	2f 90       	pop	r2
    26ac:	08 95       	ret

000026ae <_ZN12Adafruit_GFX10writePixelEiij>:
    26ae:	dc 01       	movw	r26, r24
    26b0:	ed 91       	ld	r30, X+
    26b2:	fc 91       	ld	r31, X
    26b4:	00 84       	ldd	r0, Z+8	; 0x08
    26b6:	f1 85       	ldd	r31, Z+9	; 0x09
    26b8:	e0 2d       	mov	r30, r0
    26ba:	09 94       	ijmp

000026bc <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
    26c0:	dc 01       	movw	r26, r24
    26c2:	ed 91       	ld	r30, X+
    26c4:	fc 91       	ld	r31, X
    26c6:	04 8c       	ldd	r0, Z+28	; 0x1c
    26c8:	f5 8d       	ldd	r31, Z+29	; 0x1d
    26ca:	e0 2d       	mov	r30, r0
    26cc:	09 95       	icall
    26ce:	1f 91       	pop	r17
    26d0:	0f 91       	pop	r16
    26d2:	08 95       	ret

000026d4 <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    26d4:	0f 93       	push	r16
    26d6:	1f 93       	push	r17
    26d8:	dc 01       	movw	r26, r24
    26da:	ed 91       	ld	r30, X+
    26dc:	fc 91       	ld	r31, X
    26de:	06 8c       	ldd	r0, Z+30	; 0x1e
    26e0:	f7 8d       	ldd	r31, Z+31	; 0x1f
    26e2:	e0 2d       	mov	r30, r0
    26e4:	09 95       	icall
    26e6:	1f 91       	pop	r17
    26e8:	0f 91       	pop	r16
    26ea:	08 95       	ret

000026ec <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    26ec:	ef 92       	push	r14
    26ee:	ff 92       	push	r15
    26f0:	0f 93       	push	r16
    26f2:	1f 93       	push	r17
    26f4:	dc 01       	movw	r26, r24
    26f6:	ed 91       	ld	r30, X+
    26f8:	fc 91       	ld	r31, X
    26fa:	00 a0       	ldd	r0, Z+32	; 0x20
    26fc:	f1 a1       	ldd	r31, Z+33	; 0x21
    26fe:	e0 2d       	mov	r30, r0
    2700:	09 95       	icall
    2702:	1f 91       	pop	r17
    2704:	0f 91       	pop	r16
    2706:	ff 90       	pop	r15
    2708:	ef 90       	pop	r14
    270a:	08 95       	ret

0000270c <_ZN12Adafruit_GFX10startWriteEv>:
    270c:	08 95       	ret

0000270e <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    270e:	8f 92       	push	r8
    2710:	9f 92       	push	r9
    2712:	af 92       	push	r10
    2714:	bf 92       	push	r11
    2716:	cf 92       	push	r12
    2718:	df 92       	push	r13
    271a:	ef 92       	push	r14
    271c:	ff 92       	push	r15
    271e:	0f 93       	push	r16
    2720:	1f 93       	push	r17
    2722:	cf 93       	push	r28
    2724:	df 93       	push	r29
    2726:	ec 01       	movw	r28, r24
    2728:	5b 01       	movw	r10, r22
    272a:	4a 01       	movw	r8, r20
    272c:	69 01       	movw	r12, r18
    272e:	78 01       	movw	r14, r16
    2730:	e8 81       	ld	r30, Y
    2732:	f9 81       	ldd	r31, Y+1	; 0x01
    2734:	02 84       	ldd	r0, Z+10	; 0x0a
    2736:	f3 85       	ldd	r31, Z+11	; 0x0b
    2738:	e0 2d       	mov	r30, r0
    273a:	09 95       	icall
    273c:	c8 0c       	add	r12, r8
    273e:	d9 1c       	adc	r13, r9
    2740:	86 01       	movw	r16, r12
    2742:	01 50       	subi	r16, 0x01	; 1
    2744:	11 09       	sbc	r17, r1
    2746:	e8 81       	ld	r30, Y
    2748:	f9 81       	ldd	r31, Y+1	; 0x01
    274a:	04 88       	ldd	r0, Z+20	; 0x14
    274c:	f5 89       	ldd	r31, Z+21	; 0x15
    274e:	e0 2d       	mov	r30, r0
    2750:	95 01       	movw	r18, r10
    2752:	a4 01       	movw	r20, r8
    2754:	b5 01       	movw	r22, r10
    2756:	ce 01       	movw	r24, r28
    2758:	09 95       	icall
    275a:	e8 81       	ld	r30, Y
    275c:	f9 81       	ldd	r31, Y+1	; 0x01
    275e:	06 88       	ldd	r0, Z+22	; 0x16
    2760:	f7 89       	ldd	r31, Z+23	; 0x17
    2762:	e0 2d       	mov	r30, r0
    2764:	ce 01       	movw	r24, r28
    2766:	df 91       	pop	r29
    2768:	cf 91       	pop	r28
    276a:	1f 91       	pop	r17
    276c:	0f 91       	pop	r16
    276e:	ff 90       	pop	r15
    2770:	ef 90       	pop	r14
    2772:	df 90       	pop	r13
    2774:	cf 90       	pop	r12
    2776:	bf 90       	pop	r11
    2778:	af 90       	pop	r10
    277a:	9f 90       	pop	r9
    277c:	8f 90       	pop	r8
    277e:	09 94       	ijmp

00002780 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    2780:	8f 92       	push	r8
    2782:	9f 92       	push	r9
    2784:	af 92       	push	r10
    2786:	bf 92       	push	r11
    2788:	cf 92       	push	r12
    278a:	df 92       	push	r13
    278c:	ef 92       	push	r14
    278e:	ff 92       	push	r15
    2790:	0f 93       	push	r16
    2792:	1f 93       	push	r17
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	ec 01       	movw	r28, r24
    279a:	5b 01       	movw	r10, r22
    279c:	4a 01       	movw	r8, r20
    279e:	69 01       	movw	r12, r18
    27a0:	e8 81       	ld	r30, Y
    27a2:	f9 81       	ldd	r31, Y+1	; 0x01
    27a4:	02 84       	ldd	r0, Z+10	; 0x0a
    27a6:	f3 85       	ldd	r31, Z+11	; 0x0b
    27a8:	e0 2d       	mov	r30, r0
    27aa:	09 95       	icall
    27ac:	95 01       	movw	r18, r10
    27ae:	2c 0d       	add	r18, r12
    27b0:	3d 1d       	adc	r19, r13
    27b2:	21 50       	subi	r18, 0x01	; 1
    27b4:	31 09       	sbc	r19, r1
    27b6:	e8 81       	ld	r30, Y
    27b8:	f9 81       	ldd	r31, Y+1	; 0x01
    27ba:	04 88       	ldd	r0, Z+20	; 0x14
    27bc:	f5 89       	ldd	r31, Z+21	; 0x15
    27be:	e0 2d       	mov	r30, r0
    27c0:	78 01       	movw	r14, r16
    27c2:	84 01       	movw	r16, r8
    27c4:	a4 01       	movw	r20, r8
    27c6:	b5 01       	movw	r22, r10
    27c8:	ce 01       	movw	r24, r28
    27ca:	09 95       	icall
    27cc:	e8 81       	ld	r30, Y
    27ce:	f9 81       	ldd	r31, Y+1	; 0x01
    27d0:	06 88       	ldd	r0, Z+22	; 0x16
    27d2:	f7 89       	ldd	r31, Z+23	; 0x17
    27d4:	e0 2d       	mov	r30, r0
    27d6:	ce 01       	movw	r24, r28
    27d8:	df 91       	pop	r29
    27da:	cf 91       	pop	r28
    27dc:	1f 91       	pop	r17
    27de:	0f 91       	pop	r16
    27e0:	ff 90       	pop	r15
    27e2:	ef 90       	pop	r14
    27e4:	df 90       	pop	r13
    27e6:	cf 90       	pop	r12
    27e8:	bf 90       	pop	r11
    27ea:	af 90       	pop	r10
    27ec:	9f 90       	pop	r9
    27ee:	8f 90       	pop	r8
    27f0:	09 94       	ijmp

000027f2 <_ZN12Adafruit_GFX8fillRectEiiiij>:
    27f2:	4f 92       	push	r4
    27f4:	5f 92       	push	r5
    27f6:	6f 92       	push	r6
    27f8:	7f 92       	push	r7
    27fa:	8f 92       	push	r8
    27fc:	9f 92       	push	r9
    27fe:	af 92       	push	r10
    2800:	bf 92       	push	r11
    2802:	cf 92       	push	r12
    2804:	df 92       	push	r13
    2806:	ef 92       	push	r14
    2808:	ff 92       	push	r15
    280a:	0f 93       	push	r16
    280c:	1f 93       	push	r17
    280e:	cf 93       	push	r28
    2810:	df 93       	push	r29
    2812:	6c 01       	movw	r12, r24
    2814:	2b 01       	movw	r4, r22
    2816:	5a 01       	movw	r10, r20
    2818:	39 01       	movw	r6, r18
    281a:	48 01       	movw	r8, r16
    281c:	dc 01       	movw	r26, r24
    281e:	ed 91       	ld	r30, X+
    2820:	fc 91       	ld	r31, X
    2822:	02 84       	ldd	r0, Z+10	; 0x0a
    2824:	f3 85       	ldd	r31, Z+11	; 0x0b
    2826:	e0 2d       	mov	r30, r0
    2828:	09 95       	icall
    282a:	e2 01       	movw	r28, r4
    282c:	64 0c       	add	r6, r4
    282e:	75 1c       	adc	r7, r5
    2830:	d6 01       	movw	r26, r12
    2832:	ed 91       	ld	r30, X+
    2834:	fc 91       	ld	r31, X
    2836:	c6 15       	cp	r28, r6
    2838:	d7 05       	cpc	r29, r7
    283a:	5c f4       	brge	.+22     	; 0x2852 <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    283c:	00 88       	ldd	r0, Z+16	; 0x10
    283e:	f1 89       	ldd	r31, Z+17	; 0x11
    2840:	e0 2d       	mov	r30, r0
    2842:	87 01       	movw	r16, r14
    2844:	94 01       	movw	r18, r8
    2846:	a5 01       	movw	r20, r10
    2848:	be 01       	movw	r22, r28
    284a:	c6 01       	movw	r24, r12
    284c:	09 95       	icall
    284e:	21 96       	adiw	r28, 0x01	; 1
    2850:	ef cf       	rjmp	.-34     	; 0x2830 <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    2852:	06 88       	ldd	r0, Z+22	; 0x16
    2854:	f7 89       	ldd	r31, Z+23	; 0x17
    2856:	e0 2d       	mov	r30, r0
    2858:	c6 01       	movw	r24, r12
    285a:	df 91       	pop	r29
    285c:	cf 91       	pop	r28
    285e:	1f 91       	pop	r17
    2860:	0f 91       	pop	r16
    2862:	ff 90       	pop	r15
    2864:	ef 90       	pop	r14
    2866:	df 90       	pop	r13
    2868:	cf 90       	pop	r12
    286a:	bf 90       	pop	r11
    286c:	af 90       	pop	r10
    286e:	9f 90       	pop	r9
    2870:	8f 90       	pop	r8
    2872:	7f 90       	pop	r7
    2874:	6f 90       	pop	r6
    2876:	5f 90       	pop	r5
    2878:	4f 90       	pop	r4
    287a:	09 94       	ijmp

0000287c <_ZN12Adafruit_GFX10fillScreenEj>:
    287c:	ef 92       	push	r14
    287e:	ff 92       	push	r15
    2880:	0f 93       	push	r16
    2882:	1f 93       	push	r17
    2884:	dc 01       	movw	r26, r24
    2886:	1a 96       	adiw	r26, 0x0a	; 10
    2888:	0d 91       	ld	r16, X+
    288a:	1c 91       	ld	r17, X
    288c:	1b 97       	sbiw	r26, 0x0b	; 11
    288e:	18 96       	adiw	r26, 0x08	; 8
    2890:	2d 91       	ld	r18, X+
    2892:	3c 91       	ld	r19, X
    2894:	19 97       	sbiw	r26, 0x09	; 9
    2896:	ed 91       	ld	r30, X+
    2898:	fc 91       	ld	r31, X
    289a:	00 a0       	ldd	r0, Z+32	; 0x20
    289c:	f1 a1       	ldd	r31, Z+33	; 0x21
    289e:	e0 2d       	mov	r30, r0
    28a0:	7b 01       	movw	r14, r22
    28a2:	40 e0       	ldi	r20, 0x00	; 0
    28a4:	50 e0       	ldi	r21, 0x00	; 0
    28a6:	60 e0       	ldi	r22, 0x00	; 0
    28a8:	70 e0       	ldi	r23, 0x00	; 0
    28aa:	09 95       	icall
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	ff 90       	pop	r15
    28b2:	ef 90       	pop	r14
    28b4:	08 95       	ret

000028b6 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    28b6:	8f 92       	push	r8
    28b8:	9f 92       	push	r9
    28ba:	af 92       	push	r10
    28bc:	bf 92       	push	r11
    28be:	cf 92       	push	r12
    28c0:	df 92       	push	r13
    28c2:	ef 92       	push	r14
    28c4:	ff 92       	push	r15
    28c6:	0f 93       	push	r16
    28c8:	1f 93       	push	r17
    28ca:	cf 93       	push	r28
    28cc:	df 93       	push	r29
    28ce:	4c 01       	movw	r8, r24
    28d0:	6b 01       	movw	r12, r22
    28d2:	5a 01       	movw	r10, r20
    28d4:	e9 01       	movw	r28, r18
    28d6:	dc 01       	movw	r26, r24
    28d8:	ed 91       	ld	r30, X+
    28da:	fc 91       	ld	r31, X
    28dc:	62 17       	cp	r22, r18
    28de:	73 07       	cpc	r23, r19
    28e0:	81 f4       	brne	.+32     	; 0x2902 <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    28e2:	04 17       	cp	r16, r20
    28e4:	15 07       	cpc	r17, r21
    28e6:	24 f4       	brge	.+8      	; 0x28f0 <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    28e8:	8b 2d       	mov	r24, r11
    28ea:	58 01       	movw	r10, r16
    28ec:	04 2f       	mov	r16, r20
    28ee:	18 2f       	mov	r17, r24
    28f0:	0a 19       	sub	r16, r10
    28f2:	1b 09       	sbc	r17, r11
    28f4:	98 01       	movw	r18, r16
    28f6:	2f 5f       	subi	r18, 0xFF	; 255
    28f8:	3f 4f       	sbci	r19, 0xFF	; 255
    28fa:	04 8c       	ldd	r0, Z+28	; 0x1c
    28fc:	f5 8d       	ldd	r31, Z+29	; 0x1d
    28fe:	e0 2d       	mov	r30, r0
    2900:	12 c0       	rjmp	.+36     	; 0x2926 <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    2902:	40 17       	cp	r20, r16
    2904:	51 07       	cpc	r21, r17
    2906:	09 f5       	brne	.+66     	; 0x294a <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    2908:	26 17       	cp	r18, r22
    290a:	37 07       	cpc	r19, r23
    290c:	24 f4       	brge	.+8      	; 0x2916 <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    290e:	8d 2d       	mov	r24, r13
    2910:	69 01       	movw	r12, r18
    2912:	c6 2f       	mov	r28, r22
    2914:	d8 2f       	mov	r29, r24
    2916:	9e 01       	movw	r18, r28
    2918:	2c 19       	sub	r18, r12
    291a:	3d 09       	sbc	r19, r13
    291c:	2f 5f       	subi	r18, 0xFF	; 255
    291e:	3f 4f       	sbci	r19, 0xFF	; 255
    2920:	06 8c       	ldd	r0, Z+30	; 0x1e
    2922:	f7 8d       	ldd	r31, Z+31	; 0x1f
    2924:	e0 2d       	mov	r30, r0
    2926:	87 01       	movw	r16, r14
    2928:	a5 01       	movw	r20, r10
    292a:	b6 01       	movw	r22, r12
    292c:	c4 01       	movw	r24, r8
    292e:	09 95       	icall
    2930:	df 91       	pop	r29
    2932:	cf 91       	pop	r28
    2934:	1f 91       	pop	r17
    2936:	0f 91       	pop	r16
    2938:	ff 90       	pop	r15
    293a:	ef 90       	pop	r14
    293c:	df 90       	pop	r13
    293e:	cf 90       	pop	r12
    2940:	bf 90       	pop	r11
    2942:	af 90       	pop	r10
    2944:	9f 90       	pop	r9
    2946:	8f 90       	pop	r8
    2948:	08 95       	ret
    294a:	02 84       	ldd	r0, Z+10	; 0x0a
    294c:	f3 85       	ldd	r31, Z+11	; 0x0b
    294e:	e0 2d       	mov	r30, r0
    2950:	09 95       	icall
    2952:	d4 01       	movw	r26, r8
    2954:	ed 91       	ld	r30, X+
    2956:	fc 91       	ld	r31, X
    2958:	04 88       	ldd	r0, Z+20	; 0x14
    295a:	f5 89       	ldd	r31, Z+21	; 0x15
    295c:	e0 2d       	mov	r30, r0
    295e:	9e 01       	movw	r18, r28
    2960:	a5 01       	movw	r20, r10
    2962:	b6 01       	movw	r22, r12
    2964:	c4 01       	movw	r24, r8
    2966:	09 95       	icall
    2968:	d4 01       	movw	r26, r8
    296a:	ed 91       	ld	r30, X+
    296c:	fc 91       	ld	r31, X
    296e:	06 88       	ldd	r0, Z+22	; 0x16
    2970:	f7 89       	ldd	r31, Z+23	; 0x17
    2972:	e0 2d       	mov	r30, r0
    2974:	c4 01       	movw	r24, r8
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	ff 90       	pop	r15
    2980:	ef 90       	pop	r14
    2982:	df 90       	pop	r13
    2984:	cf 90       	pop	r12
    2986:	bf 90       	pop	r11
    2988:	af 90       	pop	r10
    298a:	9f 90       	pop	r9
    298c:	8f 90       	pop	r8
    298e:	09 94       	ijmp

00002990 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    2990:	6f 92       	push	r6
    2992:	7f 92       	push	r7
    2994:	8f 92       	push	r8
    2996:	9f 92       	push	r9
    2998:	af 92       	push	r10
    299a:	bf 92       	push	r11
    299c:	cf 92       	push	r12
    299e:	df 92       	push	r13
    29a0:	ef 92       	push	r14
    29a2:	ff 92       	push	r15
    29a4:	0f 93       	push	r16
    29a6:	1f 93       	push	r17
    29a8:	cf 93       	push	r28
    29aa:	df 93       	push	r29
    29ac:	ec 01       	movw	r28, r24
    29ae:	4b 01       	movw	r8, r22
    29b0:	5a 01       	movw	r10, r20
    29b2:	69 01       	movw	r12, r18
    29b4:	38 01       	movw	r6, r16
    29b6:	e8 81       	ld	r30, Y
    29b8:	f9 81       	ldd	r31, Y+1	; 0x01
    29ba:	02 84       	ldd	r0, Z+10	; 0x0a
    29bc:	f3 85       	ldd	r31, Z+11	; 0x0b
    29be:	e0 2d       	mov	r30, r0
    29c0:	09 95       	icall
    29c2:	e8 81       	ld	r30, Y
    29c4:	f9 81       	ldd	r31, Y+1	; 0x01
    29c6:	02 88       	ldd	r0, Z+18	; 0x12
    29c8:	f3 89       	ldd	r31, Z+19	; 0x13
    29ca:	e0 2d       	mov	r30, r0
    29cc:	87 01       	movw	r16, r14
    29ce:	96 01       	movw	r18, r12
    29d0:	a5 01       	movw	r20, r10
    29d2:	b4 01       	movw	r22, r8
    29d4:	ce 01       	movw	r24, r28
    29d6:	09 95       	icall
    29d8:	a5 01       	movw	r20, r10
    29da:	46 0d       	add	r20, r6
    29dc:	57 1d       	adc	r21, r7
    29de:	41 50       	subi	r20, 0x01	; 1
    29e0:	51 09       	sbc	r21, r1
    29e2:	e8 81       	ld	r30, Y
    29e4:	f9 81       	ldd	r31, Y+1	; 0x01
    29e6:	02 88       	ldd	r0, Z+18	; 0x12
    29e8:	f3 89       	ldd	r31, Z+19	; 0x13
    29ea:	e0 2d       	mov	r30, r0
    29ec:	96 01       	movw	r18, r12
    29ee:	b4 01       	movw	r22, r8
    29f0:	ce 01       	movw	r24, r28
    29f2:	09 95       	icall
    29f4:	e8 81       	ld	r30, Y
    29f6:	f9 81       	ldd	r31, Y+1	; 0x01
    29f8:	00 88       	ldd	r0, Z+16	; 0x10
    29fa:	f1 89       	ldd	r31, Z+17	; 0x11
    29fc:	e0 2d       	mov	r30, r0
    29fe:	93 01       	movw	r18, r6
    2a00:	a5 01       	movw	r20, r10
    2a02:	b4 01       	movw	r22, r8
    2a04:	ce 01       	movw	r24, r28
    2a06:	09 95       	icall
    2a08:	c8 0c       	add	r12, r8
    2a0a:	d9 1c       	adc	r13, r9
    2a0c:	b6 01       	movw	r22, r12
    2a0e:	61 50       	subi	r22, 0x01	; 1
    2a10:	71 09       	sbc	r23, r1
    2a12:	e8 81       	ld	r30, Y
    2a14:	f9 81       	ldd	r31, Y+1	; 0x01
    2a16:	00 88       	ldd	r0, Z+16	; 0x10
    2a18:	f1 89       	ldd	r31, Z+17	; 0x11
    2a1a:	e0 2d       	mov	r30, r0
    2a1c:	93 01       	movw	r18, r6
    2a1e:	a5 01       	movw	r20, r10
    2a20:	ce 01       	movw	r24, r28
    2a22:	09 95       	icall
    2a24:	e8 81       	ld	r30, Y
    2a26:	f9 81       	ldd	r31, Y+1	; 0x01
    2a28:	06 88       	ldd	r0, Z+22	; 0x16
    2a2a:	f7 89       	ldd	r31, Z+23	; 0x17
    2a2c:	e0 2d       	mov	r30, r0
    2a2e:	ce 01       	movw	r24, r28
    2a30:	df 91       	pop	r29
    2a32:	cf 91       	pop	r28
    2a34:	1f 91       	pop	r17
    2a36:	0f 91       	pop	r16
    2a38:	ff 90       	pop	r15
    2a3a:	ef 90       	pop	r14
    2a3c:	df 90       	pop	r13
    2a3e:	cf 90       	pop	r12
    2a40:	bf 90       	pop	r11
    2a42:	af 90       	pop	r10
    2a44:	9f 90       	pop	r9
    2a46:	8f 90       	pop	r8
    2a48:	7f 90       	pop	r7
    2a4a:	6f 90       	pop	r6
    2a4c:	09 94       	ijmp

00002a4e <_ZN12Adafruit_GFX13invertDisplayEb>:
    2a4e:	08 95       	ret

00002a50 <_ZN12Adafruit_GFX11setRotationEh>:
    2a50:	fc 01       	movw	r30, r24
    2a52:	63 70       	andi	r22, 0x03	; 3
    2a54:	65 8b       	std	Z+21, r22	; 0x15
    2a56:	84 81       	ldd	r24, Z+4	; 0x04
    2a58:	95 81       	ldd	r25, Z+5	; 0x05
    2a5a:	26 81       	ldd	r18, Z+6	; 0x06
    2a5c:	37 81       	ldd	r19, Z+7	; 0x07
    2a5e:	61 30       	cpi	r22, 0x01	; 1
    2a60:	39 f0       	breq	.+14     	; 0x2a70 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    2a62:	63 30       	cpi	r22, 0x03	; 3
    2a64:	29 f0       	breq	.+10     	; 0x2a70 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    2a66:	91 87       	std	Z+9, r25	; 0x09
    2a68:	80 87       	std	Z+8, r24	; 0x08
    2a6a:	33 87       	std	Z+11, r19	; 0x0b
    2a6c:	22 87       	std	Z+10, r18	; 0x0a
    2a6e:	08 95       	ret
    2a70:	31 87       	std	Z+9, r19	; 0x09
    2a72:	20 87       	std	Z+8, r18	; 0x08
    2a74:	93 87       	std	Z+11, r25	; 0x0b
    2a76:	82 87       	std	Z+10, r24	; 0x0a
    2a78:	08 95       	ret

00002a7a <_ZN12Adafruit_GFXC1Eii>:
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	13 82       	std	Z+3, r1	; 0x03
    2a7e:	12 82       	std	Z+2, r1	; 0x02
    2a80:	82 e4       	ldi	r24, 0x42	; 66
    2a82:	91 e0       	ldi	r25, 0x01	; 1
    2a84:	91 83       	std	Z+1, r25	; 0x01
    2a86:	80 83       	st	Z, r24
    2a88:	75 83       	std	Z+5, r23	; 0x05
    2a8a:	64 83       	std	Z+4, r22	; 0x04
    2a8c:	57 83       	std	Z+7, r21	; 0x07
    2a8e:	46 83       	std	Z+6, r20	; 0x06
    2a90:	71 87       	std	Z+9, r23	; 0x09
    2a92:	60 87       	std	Z+8, r22	; 0x08
    2a94:	53 87       	std	Z+11, r21	; 0x0b
    2a96:	42 87       	std	Z+10, r20	; 0x0a
    2a98:	15 8a       	std	Z+21, r1	; 0x15
    2a9a:	15 86       	std	Z+13, r1	; 0x0d
    2a9c:	14 86       	std	Z+12, r1	; 0x0c
    2a9e:	17 86       	std	Z+15, r1	; 0x0f
    2aa0:	16 86       	std	Z+14, r1	; 0x0e
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	84 8b       	std	Z+20, r24	; 0x14
    2aa6:	2f ef       	ldi	r18, 0xFF	; 255
    2aa8:	3f ef       	ldi	r19, 0xFF	; 255
    2aaa:	33 8b       	std	Z+19, r19	; 0x13
    2aac:	22 8b       	std	Z+18, r18	; 0x12
    2aae:	31 8b       	std	Z+17, r19	; 0x11
    2ab0:	20 8b       	std	Z+16, r18	; 0x10
    2ab2:	86 8b       	std	Z+22, r24	; 0x16
    2ab4:	17 8a       	std	Z+23, r1	; 0x17
    2ab6:	11 8e       	std	Z+25, r1	; 0x19
    2ab8:	10 8e       	std	Z+24, r1	; 0x18
    2aba:	08 95       	ret

00002abc <_ZN12Adafruit_GFX8drawCharEiihjjh>:
    2abc:	2f 92       	push	r2
    2abe:	3f 92       	push	r3
    2ac0:	4f 92       	push	r4
    2ac2:	5f 92       	push	r5
    2ac4:	6f 92       	push	r6
    2ac6:	7f 92       	push	r7
    2ac8:	8f 92       	push	r8
    2aca:	9f 92       	push	r9
    2acc:	af 92       	push	r10
    2ace:	bf 92       	push	r11
    2ad0:	cf 92       	push	r12
    2ad2:	df 92       	push	r13
    2ad4:	ef 92       	push	r14
    2ad6:	ff 92       	push	r15
    2ad8:	0f 93       	push	r16
    2ada:	1f 93       	push	r17
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	6b 97       	sbiw	r28, 0x1b	; 27
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	de bf       	out	0x3e, r29	; 62
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	9b 8f       	std	Y+27, r25	; 0x1b
    2af2:	8a 8f       	std	Y+26, r24	; 0x1a
    2af4:	5b 01       	movw	r10, r22
    2af6:	1a 01       	movw	r2, r20
    2af8:	d2 2e       	mov	r13, r18
    2afa:	1f 83       	std	Y+7, r17	; 0x07
    2afc:	0e 83       	std	Y+6, r16	; 0x06
    2afe:	37 01       	movw	r6, r14
    2b00:	c9 82       	std	Y+1, r12	; 0x01
    2b02:	dc 01       	movw	r26, r24
    2b04:	58 96       	adiw	r26, 0x18	; 24
    2b06:	2d 91       	ld	r18, X+
    2b08:	3c 91       	ld	r19, X
    2b0a:	59 97       	sbiw	r26, 0x19	; 25
    2b0c:	21 15       	cp	r18, r1
    2b0e:	31 05       	cpc	r19, r1
    2b10:	09 f0       	breq	.+2      	; 0x2b14 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x58>
    2b12:	e6 c0       	rjmp	.+460    	; 0x2ce0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x224>
    2b14:	18 96       	adiw	r26, 0x08	; 8
    2b16:	8d 91       	ld	r24, X+
    2b18:	9c 91       	ld	r25, X
    2b1a:	19 97       	sbiw	r26, 0x09	; 9
    2b1c:	68 17       	cp	r22, r24
    2b1e:	79 07       	cpc	r23, r25
    2b20:	0c f0       	brlt	.+2      	; 0x2b24 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x68>
    2b22:	cd c1       	rjmp	.+922    	; 0x2ebe <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    2b24:	1a 96       	adiw	r26, 0x0a	; 10
    2b26:	8d 91       	ld	r24, X+
    2b28:	9c 91       	ld	r25, X
    2b2a:	1b 97       	sbiw	r26, 0x0b	; 11
    2b2c:	48 17       	cp	r20, r24
    2b2e:	59 07       	cpc	r21, r25
    2b30:	0c f0       	brlt	.+2      	; 0x2b34 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x78>
    2b32:	c5 c1       	rjmp	.+906    	; 0x2ebe <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    2b34:	8c 2c       	mov	r8, r12
    2b36:	91 2c       	mov	r9, r1
    2b38:	fb 01       	movw	r30, r22
    2b3a:	26 e0       	ldi	r18, 0x06	; 6
    2b3c:	c2 9e       	mul	r12, r18
    2b3e:	e0 0d       	add	r30, r0
    2b40:	f1 1d       	adc	r31, r1
    2b42:	11 24       	eor	r1, r1
    2b44:	fb 87       	std	Y+11, r31	; 0x0b
    2b46:	ea 87       	std	Y+10, r30	; 0x0a
    2b48:	1e 16       	cp	r1, r30
    2b4a:	1f 06       	cpc	r1, r31
    2b4c:	0c f0       	brlt	.+2      	; 0x2b50 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x94>
    2b4e:	b7 c1       	rjmp	.+878    	; 0x2ebe <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    2b50:	a4 01       	movw	r20, r8
    2b52:	83 e0       	ldi	r24, 0x03	; 3
    2b54:	44 0f       	add	r20, r20
    2b56:	55 1f       	adc	r21, r21
    2b58:	8a 95       	dec	r24
    2b5a:	e1 f7       	brne	.-8      	; 0x2b54 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x98>
    2b5c:	5d 87       	std	Y+13, r21	; 0x0d
    2b5e:	4c 87       	std	Y+12, r20	; 0x0c
    2b60:	ca 01       	movw	r24, r20
    2b62:	82 0d       	add	r24, r2
    2b64:	93 1d       	adc	r25, r3
    2b66:	18 16       	cp	r1, r24
    2b68:	19 06       	cpc	r1, r25
    2b6a:	0c f0       	brlt	.+2      	; 0x2b6e <_ZN12Adafruit_GFX8drawCharEiihjjh+0xb2>
    2b6c:	a8 c1       	rjmp	.+848    	; 0x2ebe <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    2b6e:	57 96       	adiw	r26, 0x17	; 23
    2b70:	8c 91       	ld	r24, X
    2b72:	81 11       	cpse	r24, r1
    2b74:	04 c0       	rjmp	.+8      	; 0x2b7e <_ZN12Adafruit_GFX8drawCharEiihjjh+0xc2>
    2b76:	5f ea       	ldi	r21, 0xAF	; 175
    2b78:	5d 15       	cp	r21, r13
    2b7a:	08 f4       	brcc	.+2      	; 0x2b7e <_ZN12Adafruit_GFX8drawCharEiihjjh+0xc2>
    2b7c:	d3 94       	inc	r13
    2b7e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2b80:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2b82:	ed 91       	ld	r30, X+
    2b84:	fc 91       	ld	r31, X
    2b86:	11 97       	sbiw	r26, 0x01	; 1
    2b88:	02 84       	ldd	r0, Z+10	; 0x0a
    2b8a:	f3 85       	ldd	r31, Z+11	; 0x0b
    2b8c:	e0 2d       	mov	r30, r0
    2b8e:	cd 01       	movw	r24, r26
    2b90:	09 95       	icall
    2b92:	b5 e0       	ldi	r27, 0x05	; 5
    2b94:	db 9e       	mul	r13, r27
    2b96:	c0 01       	movw	r24, r0
    2b98:	11 24       	eor	r1, r1
    2b9a:	f5 01       	movw	r30, r10
    2b9c:	35 96       	adiw	r30, 0x05	; 5
    2b9e:	ff 87       	std	Y+15, r31	; 0x0f
    2ba0:	ee 87       	std	Y+14, r30	; 0x0e
    2ba2:	25 01       	movw	r4, r10
    2ba4:	bb 82       	std	Y+3, r11	; 0x03
    2ba6:	aa 82       	std	Y+2, r10	; 0x02
    2ba8:	9c 01       	movw	r18, r24
    2baa:	2a 19       	sub	r18, r10
    2bac:	3b 09       	sbc	r19, r11
    2bae:	39 8b       	std	Y+17, r19	; 0x11
    2bb0:	28 8b       	std	Y+16, r18	; 0x10
    2bb2:	a1 01       	movw	r20, r2
    2bb4:	48 5f       	subi	r20, 0xF8	; 248
    2bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb8:	5b 8b       	std	Y+19, r21	; 0x13
    2bba:	4a 8b       	std	Y+18, r20	; 0x12
    2bbc:	e8 89       	ldd	r30, Y+16	; 0x10
    2bbe:	f9 89       	ldd	r31, Y+17	; 0x11
    2bc0:	e4 0d       	add	r30, r4
    2bc2:	f5 1d       	adc	r31, r5
    2bc4:	ec 5f       	subi	r30, 0xFC	; 252
    2bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc8:	54 91       	lpm	r21, Z
    2bca:	58 87       	std	Y+8, r21	; 0x08
    2bcc:	3d 82       	std	Y+5, r3	; 0x05
    2bce:	2c 82       	std	Y+4, r2	; 0x04
    2bd0:	61 01       	movw	r12, r2
    2bd2:	88 85       	ldd	r24, Y+8	; 0x08
    2bd4:	80 ff       	sbrs	r24, 0
    2bd6:	13 c0       	rjmp	.+38     	; 0x2bfe <_ZN12Adafruit_GFX8drawCharEiihjjh+0x142>
    2bd8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2bda:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2bdc:	ed 91       	ld	r30, X+
    2bde:	fc 91       	ld	r31, X
    2be0:	b9 81       	ldd	r27, Y+1	; 0x01
    2be2:	b1 30       	cpi	r27, 0x01	; 1
    2be4:	31 f4       	brne	.+12     	; 0x2bf2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x136>
    2be6:	04 84       	ldd	r0, Z+12	; 0x0c
    2be8:	f5 85       	ldd	r31, Z+13	; 0x0d
    2bea:	e0 2d       	mov	r30, r0
    2bec:	2e 81       	ldd	r18, Y+6	; 0x06
    2bee:	3f 81       	ldd	r19, Y+7	; 0x07
    2bf0:	16 c0       	rjmp	.+44     	; 0x2c1e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x162>
    2bf2:	06 84       	ldd	r0, Z+14	; 0x0e
    2bf4:	f7 85       	ldd	r31, Z+15	; 0x0f
    2bf6:	e0 2d       	mov	r30, r0
    2bf8:	ee 80       	ldd	r14, Y+6	; 0x06
    2bfa:	ff 80       	ldd	r15, Y+7	; 0x07
    2bfc:	1a c0       	rjmp	.+52     	; 0x2c32 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x176>
    2bfe:	ee 81       	ldd	r30, Y+6	; 0x06
    2c00:	ff 81       	ldd	r31, Y+7	; 0x07
    2c02:	e6 15       	cp	r30, r6
    2c04:	f7 05       	cpc	r31, r7
    2c06:	f1 f0       	breq	.+60     	; 0x2c44 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x188>
    2c08:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2c0a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2c0c:	ed 91       	ld	r30, X+
    2c0e:	fc 91       	ld	r31, X
    2c10:	b9 81       	ldd	r27, Y+1	; 0x01
    2c12:	b1 30       	cpi	r27, 0x01	; 1
    2c14:	51 f4       	brne	.+20     	; 0x2c2a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x16e>
    2c16:	04 84       	ldd	r0, Z+12	; 0x0c
    2c18:	f5 85       	ldd	r31, Z+13	; 0x0d
    2c1a:	e0 2d       	mov	r30, r0
    2c1c:	93 01       	movw	r18, r6
    2c1e:	a6 01       	movw	r20, r12
    2c20:	b2 01       	movw	r22, r4
    2c22:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c24:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c26:	09 95       	icall
    2c28:	0d c0       	rjmp	.+26     	; 0x2c44 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x188>
    2c2a:	06 84       	ldd	r0, Z+14	; 0x0e
    2c2c:	f7 85       	ldd	r31, Z+15	; 0x0f
    2c2e:	e0 2d       	mov	r30, r0
    2c30:	73 01       	movw	r14, r6
    2c32:	84 01       	movw	r16, r8
    2c34:	94 01       	movw	r18, r8
    2c36:	4c 81       	ldd	r20, Y+4	; 0x04
    2c38:	5d 81       	ldd	r21, Y+5	; 0x05
    2c3a:	6a 81       	ldd	r22, Y+2	; 0x02
    2c3c:	7b 81       	ldd	r23, Y+3	; 0x03
    2c3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c40:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c42:	09 95       	icall
    2c44:	e8 85       	ldd	r30, Y+8	; 0x08
    2c46:	e6 95       	lsr	r30
    2c48:	e8 87       	std	Y+8, r30	; 0x08
    2c4a:	2c 81       	ldd	r18, Y+4	; 0x04
    2c4c:	3d 81       	ldd	r19, Y+5	; 0x05
    2c4e:	28 0d       	add	r18, r8
    2c50:	39 1d       	adc	r19, r9
    2c52:	3d 83       	std	Y+5, r19	; 0x05
    2c54:	2c 83       	std	Y+4, r18	; 0x04
    2c56:	3f ef       	ldi	r19, 0xFF	; 255
    2c58:	c3 1a       	sub	r12, r19
    2c5a:	d3 0a       	sbc	r13, r19
    2c5c:	4a 89       	ldd	r20, Y+18	; 0x12
    2c5e:	5b 89       	ldd	r21, Y+19	; 0x13
    2c60:	c4 16       	cp	r12, r20
    2c62:	d5 06       	cpc	r13, r21
    2c64:	09 f0       	breq	.+2      	; 0x2c68 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1ac>
    2c66:	b5 cf       	rjmp	.-150    	; 0x2bd2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x116>
    2c68:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6c:	88 0d       	add	r24, r8
    2c6e:	99 1d       	adc	r25, r9
    2c70:	9b 83       	std	Y+3, r25	; 0x03
    2c72:	8a 83       	std	Y+2, r24	; 0x02
    2c74:	9f ef       	ldi	r25, 0xFF	; 255
    2c76:	49 1a       	sub	r4, r25
    2c78:	59 0a       	sbc	r5, r25
    2c7a:	ae 85       	ldd	r26, Y+14	; 0x0e
    2c7c:	bf 85       	ldd	r27, Y+15	; 0x0f
    2c7e:	4a 16       	cp	r4, r26
    2c80:	5b 06       	cpc	r5, r27
    2c82:	09 f0       	breq	.+2      	; 0x2c86 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1ca>
    2c84:	9b cf       	rjmp	.-202    	; 0x2bbc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x100>
    2c86:	ee 81       	ldd	r30, Y+6	; 0x06
    2c88:	ff 81       	ldd	r31, Y+7	; 0x07
    2c8a:	e6 15       	cp	r30, r6
    2c8c:	f7 05       	cpc	r31, r7
    2c8e:	09 f4       	brne	.+2      	; 0x2c92 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1d6>
    2c90:	f4 c0       	rjmp	.+488    	; 0x2e7a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    2c92:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2c94:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2c96:	a0 81       	ld	r26, Z
    2c98:	b1 81       	ldd	r27, Z+1	; 0x01
    2c9a:	f9 81       	ldd	r31, Y+1	; 0x01
    2c9c:	f1 30       	cpi	r31, 0x01	; 1
    2c9e:	79 f4       	brne	.+30     	; 0x2cbe <_ZN12Adafruit_GFX8drawCharEiihjjh+0x202>
    2ca0:	b5 01       	movw	r22, r10
    2ca2:	6b 5f       	subi	r22, 0xFB	; 251
    2ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca6:	50 96       	adiw	r26, 0x10	; 16
    2ca8:	ed 91       	ld	r30, X+
    2caa:	fc 91       	ld	r31, X
    2cac:	51 97       	sbiw	r26, 0x11	; 17
    2cae:	83 01       	movw	r16, r6
    2cb0:	28 e0       	ldi	r18, 0x08	; 8
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	a1 01       	movw	r20, r2
    2cb6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cb8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2cba:	09 95       	icall
    2cbc:	de c0       	rjmp	.+444    	; 0x2e7a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    2cbe:	6a 85       	ldd	r22, Y+10	; 0x0a
    2cc0:	7b 85       	ldd	r23, Y+11	; 0x0b
    2cc2:	68 19       	sub	r22, r8
    2cc4:	79 09       	sbc	r23, r9
    2cc6:	1e 96       	adiw	r26, 0x0e	; 14
    2cc8:	ed 91       	ld	r30, X+
    2cca:	fc 91       	ld	r31, X
    2ccc:	1f 97       	sbiw	r26, 0x0f	; 15
    2cce:	73 01       	movw	r14, r6
    2cd0:	0c 85       	ldd	r16, Y+12	; 0x0c
    2cd2:	1d 85       	ldd	r17, Y+13	; 0x0d
    2cd4:	94 01       	movw	r18, r8
    2cd6:	a1 01       	movw	r20, r2
    2cd8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cda:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2cdc:	09 95       	icall
    2cde:	cd c0       	rjmp	.+410    	; 0x2e7a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    2ce0:	f9 01       	movw	r30, r18
    2ce2:	34 96       	adiw	r30, 0x04	; 4
    2ce4:	e4 91       	lpm	r30, Z
    2ce6:	de 1a       	sub	r13, r30
    2ce8:	f9 01       	movw	r30, r18
    2cea:	32 96       	adiw	r30, 0x02	; 2
    2cec:	85 91       	lpm	r24, Z+
    2cee:	94 91       	lpm	r25, Z
    2cf0:	b7 e0       	ldi	r27, 0x07	; 7
    2cf2:	db 9e       	mul	r13, r27
    2cf4:	80 0d       	add	r24, r0
    2cf6:	91 1d       	adc	r25, r1
    2cf8:	11 24       	eor	r1, r1
    2cfa:	f9 01       	movw	r30, r18
    2cfc:	25 91       	lpm	r18, Z+
    2cfe:	34 91       	lpm	r19, Z
    2d00:	3b 8b       	std	Y+19, r19	; 0x13
    2d02:	2a 8b       	std	Y+18, r18	; 0x12
    2d04:	fc 01       	movw	r30, r24
    2d06:	25 91       	lpm	r18, Z+
    2d08:	34 91       	lpm	r19, Z
    2d0a:	29 01       	movw	r4, r18
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	32 96       	adiw	r30, 0x02	; 2
    2d10:	c4 90       	lpm	r12, Z
    2d12:	31 96       	adiw	r30, 0x01	; 1
    2d14:	34 91       	lpm	r19, Z
    2d16:	3c 87       	std	Y+12, r19	; 0x0c
    2d18:	32 96       	adiw	r30, 0x02	; 2
    2d1a:	14 91       	lpm	r17, Z
    2d1c:	31 96       	adiw	r30, 0x01	; 1
    2d1e:	d4 90       	lpm	r13, Z
    2d20:	49 81       	ldd	r20, Y+1	; 0x01
    2d22:	42 30       	cpi	r20, 0x02	; 2
    2d24:	58 f0       	brcs	.+22     	; 0x2d3c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x280>
    2d26:	61 2e       	mov	r6, r17
    2d28:	01 2e       	mov	r0, r17
    2d2a:	00 0c       	add	r0, r0
    2d2c:	77 08       	sbc	r7, r7
    2d2e:	8d 2d       	mov	r24, r13
    2d30:	0d 2c       	mov	r0, r13
    2d32:	00 0c       	add	r0, r0
    2d34:	99 0b       	sbc	r25, r25
    2d36:	99 87       	std	Y+9, r25	; 0x09
    2d38:	88 87       	std	Y+8, r24	; 0x08
    2d3a:	04 c0       	rjmp	.+8      	; 0x2d44 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x288>
    2d3c:	19 86       	std	Y+9, r1	; 0x09
    2d3e:	18 86       	std	Y+8, r1	; 0x08
    2d40:	61 2c       	mov	r6, r1
    2d42:	71 2c       	mov	r7, r1
    2d44:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2d46:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2d48:	ed 91       	ld	r30, X+
    2d4a:	fc 91       	ld	r31, X
    2d4c:	11 97       	sbiw	r26, 0x01	; 1
    2d4e:	02 84       	ldd	r0, Z+10	; 0x0a
    2d50:	f3 85       	ldd	r31, Z+11	; 0x0b
    2d52:	e0 2d       	mov	r30, r0
    2d54:	cd 01       	movw	r24, r26
    2d56:	09 95       	icall
    2d58:	b9 81       	ldd	r27, Y+1	; 0x01
    2d5a:	8b 2e       	mov	r8, r27
    2d5c:	91 2c       	mov	r9, r1
    2d5e:	68 9c       	mul	r6, r8
    2d60:	c0 01       	movw	r24, r0
    2d62:	69 9c       	mul	r6, r9
    2d64:	90 0d       	add	r25, r0
    2d66:	78 9c       	mul	r7, r8
    2d68:	90 0d       	add	r25, r0
    2d6a:	11 24       	eor	r1, r1
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	ea 0d       	add	r30, r10
    2d70:	fb 1d       	adc	r31, r11
    2d72:	f9 8b       	std	Y+17, r31	; 0x11
    2d74:	e8 8b       	std	Y+16, r30	; 0x10
    2d76:	1a 82       	std	Y+2, r1	; 0x02
    2d78:	71 2c       	mov	r7, r1
    2d7a:	61 2c       	mov	r6, r1
    2d7c:	e1 2f       	mov	r30, r17
    2d7e:	11 0f       	add	r17, r17
    2d80:	ff 0b       	sbc	r31, r31
    2d82:	95 01       	movw	r18, r10
    2d84:	2e 0f       	add	r18, r30
    2d86:	3f 1f       	adc	r19, r31
    2d88:	3b 87       	std	Y+11, r19	; 0x0b
    2d8a:	2a 87       	std	Y+10, r18	; 0x0a
    2d8c:	ac 0c       	add	r10, r12
    2d8e:	b1 1c       	adc	r11, r1
    2d90:	a5 01       	movw	r20, r10
    2d92:	4e 0f       	add	r20, r30
    2d94:	5f 1f       	adc	r21, r31
    2d96:	5f 8b       	std	Y+23, r21	; 0x17
    2d98:	4e 8b       	std	Y+22, r20	; 0x16
    2d9a:	c1 01       	movw	r24, r2
    2d9c:	8d 0d       	add	r24, r13
    2d9e:	91 1d       	adc	r25, r1
    2da0:	d7 fc       	sbrc	r13, 7
    2da2:	9a 95       	dec	r25
    2da4:	99 8f       	std	Y+25, r25	; 0x19
    2da6:	88 8f       	std	Y+24, r24	; 0x18
    2da8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2daa:	69 16       	cp	r6, r25
    2dac:	08 f0       	brcs	.+2      	; 0x2db0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2f4>
    2dae:	65 c0       	rjmp	.+202    	; 0x2e7a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    2db0:	86 2d       	mov	r24, r6
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	48 85       	ldd	r20, Y+8	; 0x08
    2db6:	59 85       	ldd	r21, Y+9	; 0x09
    2db8:	48 0f       	add	r20, r24
    2dba:	59 1f       	adc	r21, r25
    2dbc:	48 9d       	mul	r20, r8
    2dbe:	90 01       	movw	r18, r0
    2dc0:	49 9d       	mul	r20, r9
    2dc2:	30 0d       	add	r19, r0
    2dc4:	58 9d       	mul	r21, r8
    2dc6:	30 0d       	add	r19, r0
    2dc8:	11 24       	eor	r1, r1
    2dca:	d1 01       	movw	r26, r2
    2dcc:	a2 0f       	add	r26, r18
    2dce:	b3 1f       	adc	r27, r19
    2dd0:	bf 87       	std	Y+15, r27	; 0x0f
    2dd2:	ae 87       	std	Y+14, r26	; 0x0e
    2dd4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dd6:	bb 84       	ldd	r11, Y+11	; 0x0b
    2dd8:	e8 89       	ldd	r30, Y+16	; 0x10
    2dda:	f9 89       	ldd	r31, Y+17	; 0x11
    2ddc:	fd 83       	std	Y+5, r31	; 0x05
    2dde:	ec 83       	std	Y+4, r30	; 0x04
    2de0:	da 80       	ldd	r13, Y+2	; 0x02
    2de2:	fa 85       	ldd	r31, Y+10	; 0x0a
    2de4:	df 1a       	sub	r13, r31
    2de6:	28 8d       	ldd	r18, Y+24	; 0x18
    2de8:	39 8d       	ldd	r19, Y+25	; 0x19
    2dea:	28 0f       	add	r18, r24
    2dec:	39 1f       	adc	r19, r25
    2dee:	3d 8b       	std	Y+21, r19	; 0x15
    2df0:	2c 8b       	std	Y+20, r18	; 0x14
    2df2:	8d 2d       	mov	r24, r13
    2df4:	8a 0d       	add	r24, r10
    2df6:	4e 89       	ldd	r20, Y+22	; 0x16
    2df8:	5f 89       	ldd	r21, Y+23	; 0x17
    2dfa:	a4 16       	cp	r10, r20
    2dfc:	b5 06       	cpc	r11, r21
    2dfe:	c1 f1       	breq	.+112    	; 0x2e70 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3b4>
    2e00:	87 70       	andi	r24, 0x07	; 7
    2e02:	41 f4       	brne	.+16     	; 0x2e14 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x358>
    2e04:	c2 01       	movw	r24, r4
    2e06:	01 96       	adiw	r24, 0x01	; 1
    2e08:	ea 89       	ldd	r30, Y+18	; 0x12
    2e0a:	fb 89       	ldd	r31, Y+19	; 0x13
    2e0c:	e4 0d       	add	r30, r4
    2e0e:	f5 1d       	adc	r31, r5
    2e10:	74 90       	lpm	r7, Z
    2e12:	2c 01       	movw	r4, r24
    2e14:	77 fe       	sbrs	r7, 7
    2e16:	21 c0       	rjmp	.+66     	; 0x2e5a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x39e>
    2e18:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2e1a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2e1c:	ed 91       	ld	r30, X+
    2e1e:	fc 91       	ld	r31, X
    2e20:	b9 81       	ldd	r27, Y+1	; 0x01
    2e22:	b1 30       	cpi	r27, 0x01	; 1
    2e24:	61 f4       	brne	.+24     	; 0x2e3e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x382>
    2e26:	04 84       	ldd	r0, Z+12	; 0x0c
    2e28:	f5 85       	ldd	r31, Z+13	; 0x0d
    2e2a:	e0 2d       	mov	r30, r0
    2e2c:	2e 81       	ldd	r18, Y+6	; 0x06
    2e2e:	3f 81       	ldd	r19, Y+7	; 0x07
    2e30:	4c 89       	ldd	r20, Y+20	; 0x14
    2e32:	5d 89       	ldd	r21, Y+21	; 0x15
    2e34:	b5 01       	movw	r22, r10
    2e36:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e38:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e3a:	09 95       	icall
    2e3c:	0e c0       	rjmp	.+28     	; 0x2e5a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x39e>
    2e3e:	06 84       	ldd	r0, Z+14	; 0x0e
    2e40:	f7 85       	ldd	r31, Z+15	; 0x0f
    2e42:	e0 2d       	mov	r30, r0
    2e44:	ee 80       	ldd	r14, Y+6	; 0x06
    2e46:	ff 80       	ldd	r15, Y+7	; 0x07
    2e48:	84 01       	movw	r16, r8
    2e4a:	94 01       	movw	r18, r8
    2e4c:	4e 85       	ldd	r20, Y+14	; 0x0e
    2e4e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2e50:	6c 81       	ldd	r22, Y+4	; 0x04
    2e52:	7d 81       	ldd	r23, Y+5	; 0x05
    2e54:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e56:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e58:	09 95       	icall
    2e5a:	77 0c       	add	r7, r7
    2e5c:	ec 81       	ldd	r30, Y+4	; 0x04
    2e5e:	fd 81       	ldd	r31, Y+5	; 0x05
    2e60:	e8 0d       	add	r30, r8
    2e62:	f9 1d       	adc	r31, r9
    2e64:	fd 83       	std	Y+5, r31	; 0x05
    2e66:	ec 83       	std	Y+4, r30	; 0x04
    2e68:	ff ef       	ldi	r31, 0xFF	; 255
    2e6a:	af 1a       	sub	r10, r31
    2e6c:	bf 0a       	sbc	r11, r31
    2e6e:	c1 cf       	rjmp	.-126    	; 0x2df2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x336>
    2e70:	2a 81       	ldd	r18, Y+2	; 0x02
    2e72:	2c 0d       	add	r18, r12
    2e74:	2a 83       	std	Y+2, r18	; 0x02
    2e76:	63 94       	inc	r6
    2e78:	97 cf       	rjmp	.-210    	; 0x2da8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2ec>
    2e7a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2e7c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2e7e:	ed 91       	ld	r30, X+
    2e80:	fc 91       	ld	r31, X
    2e82:	11 97       	sbiw	r26, 0x01	; 1
    2e84:	06 88       	ldd	r0, Z+22	; 0x16
    2e86:	f7 89       	ldd	r31, Z+23	; 0x17
    2e88:	e0 2d       	mov	r30, r0
    2e8a:	cd 01       	movw	r24, r26
    2e8c:	6b 96       	adiw	r28, 0x1b	; 27
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	ff 90       	pop	r15
    2ea2:	ef 90       	pop	r14
    2ea4:	df 90       	pop	r13
    2ea6:	cf 90       	pop	r12
    2ea8:	bf 90       	pop	r11
    2eaa:	af 90       	pop	r10
    2eac:	9f 90       	pop	r9
    2eae:	8f 90       	pop	r8
    2eb0:	7f 90       	pop	r7
    2eb2:	6f 90       	pop	r6
    2eb4:	5f 90       	pop	r5
    2eb6:	4f 90       	pop	r4
    2eb8:	3f 90       	pop	r3
    2eba:	2f 90       	pop	r2
    2ebc:	09 94       	ijmp
    2ebe:	6b 96       	adiw	r28, 0x1b	; 27
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
    2eca:	df 91       	pop	r29
    2ecc:	cf 91       	pop	r28
    2ece:	1f 91       	pop	r17
    2ed0:	0f 91       	pop	r16
    2ed2:	ff 90       	pop	r15
    2ed4:	ef 90       	pop	r14
    2ed6:	df 90       	pop	r13
    2ed8:	cf 90       	pop	r12
    2eda:	bf 90       	pop	r11
    2edc:	af 90       	pop	r10
    2ede:	9f 90       	pop	r9
    2ee0:	8f 90       	pop	r8
    2ee2:	7f 90       	pop	r7
    2ee4:	6f 90       	pop	r6
    2ee6:	5f 90       	pop	r5
    2ee8:	4f 90       	pop	r4
    2eea:	3f 90       	pop	r3
    2eec:	2f 90       	pop	r2
    2eee:	08 95       	ret

00002ef0 <_ZN12Adafruit_GFX5writeEh>:
    2ef0:	af 92       	push	r10
    2ef2:	bf 92       	push	r11
    2ef4:	cf 92       	push	r12
    2ef6:	ef 92       	push	r14
    2ef8:	ff 92       	push	r15
    2efa:	0f 93       	push	r16
    2efc:	1f 93       	push	r17
    2efe:	cf 93       	push	r28
    2f00:	df 93       	push	r29
    2f02:	ec 01       	movw	r28, r24
    2f04:	26 2f       	mov	r18, r22
    2f06:	88 8d       	ldd	r24, Y+24	; 0x18
    2f08:	99 8d       	ldd	r25, Y+25	; 0x19
    2f0a:	00 97       	sbiw	r24, 0x00	; 0
    2f0c:	09 f0       	breq	.+2      	; 0x2f10 <_ZN12Adafruit_GFX5writeEh+0x20>
    2f0e:	40 c0       	rjmp	.+128    	; 0x2f90 <_ZN12Adafruit_GFX5writeEh+0xa0>
    2f10:	6a 30       	cpi	r22, 0x0A	; 10
    2f12:	59 f4       	brne	.+22     	; 0x2f2a <_ZN12Adafruit_GFX5writeEh+0x3a>
    2f14:	1d 86       	std	Y+13, r1	; 0x0d
    2f16:	1c 86       	std	Y+12, r1	; 0x0c
    2f18:	2c 89       	ldd	r18, Y+20	; 0x14
    2f1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f1c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f1e:	38 e0       	ldi	r19, 0x08	; 8
    2f20:	23 9f       	mul	r18, r19
    2f22:	80 0d       	add	r24, r0
    2f24:	91 1d       	adc	r25, r1
    2f26:	11 24       	eor	r1, r1
    2f28:	41 c0       	rjmp	.+130    	; 0x2fac <_ZN12Adafruit_GFX5writeEh+0xbc>
    2f2a:	6d 30       	cpi	r22, 0x0D	; 13
    2f2c:	09 f4       	brne	.+2      	; 0x2f30 <_ZN12Adafruit_GFX5writeEh+0x40>
    2f2e:	aa c0       	rjmp	.+340    	; 0x3084 <_ZN12Adafruit_GFX5writeEh+0x194>
    2f30:	8e 89       	ldd	r24, Y+22	; 0x16
    2f32:	88 23       	and	r24, r24
    2f34:	c1 f0       	breq	.+48     	; 0x2f66 <_ZN12Adafruit_GFX5writeEh+0x76>
    2f36:	3c 89       	ldd	r19, Y+20	; 0x14
    2f38:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f3a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f3c:	46 e0       	ldi	r20, 0x06	; 6
    2f3e:	34 9f       	mul	r19, r20
    2f40:	80 0d       	add	r24, r0
    2f42:	91 1d       	adc	r25, r1
    2f44:	11 24       	eor	r1, r1
    2f46:	48 85       	ldd	r20, Y+8	; 0x08
    2f48:	59 85       	ldd	r21, Y+9	; 0x09
    2f4a:	48 17       	cp	r20, r24
    2f4c:	59 07       	cpc	r21, r25
    2f4e:	5c f4       	brge	.+22     	; 0x2f66 <_ZN12Adafruit_GFX5writeEh+0x76>
    2f50:	1d 86       	std	Y+13, r1	; 0x0d
    2f52:	1c 86       	std	Y+12, r1	; 0x0c
    2f54:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f56:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f58:	48 e0       	ldi	r20, 0x08	; 8
    2f5a:	34 9f       	mul	r19, r20
    2f5c:	80 0d       	add	r24, r0
    2f5e:	91 1d       	adc	r25, r1
    2f60:	11 24       	eor	r1, r1
    2f62:	9f 87       	std	Y+15, r25	; 0x0f
    2f64:	8e 87       	std	Y+14, r24	; 0x0e
    2f66:	ea 88       	ldd	r14, Y+18	; 0x12
    2f68:	fb 88       	ldd	r15, Y+19	; 0x13
    2f6a:	08 89       	ldd	r16, Y+16	; 0x10
    2f6c:	19 89       	ldd	r17, Y+17	; 0x11
    2f6e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2f70:	5f 85       	ldd	r21, Y+15	; 0x0f
    2f72:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f74:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f76:	cc 88       	ldd	r12, Y+20	; 0x14
    2f78:	ce 01       	movw	r24, r28
    2f7a:	0e 94 5e 15 	call	0x2abc	; 0x2abc <_ZN12Adafruit_GFX8drawCharEiihjjh>
    2f7e:	2c 89       	ldd	r18, Y+20	; 0x14
    2f80:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f82:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f84:	36 e0       	ldi	r19, 0x06	; 6
    2f86:	23 9f       	mul	r18, r19
    2f88:	80 0d       	add	r24, r0
    2f8a:	91 1d       	adc	r25, r1
    2f8c:	11 24       	eor	r1, r1
    2f8e:	42 c0       	rjmp	.+132    	; 0x3014 <_ZN12Adafruit_GFX5writeEh+0x124>
    2f90:	6a 30       	cpi	r22, 0x0A	; 10
    2f92:	79 f4       	brne	.+30     	; 0x2fb2 <_ZN12Adafruit_GFX5writeEh+0xc2>
    2f94:	1d 86       	std	Y+13, r1	; 0x0d
    2f96:	1c 86       	std	Y+12, r1	; 0x0c
    2f98:	2c 89       	ldd	r18, Y+20	; 0x14
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	36 96       	adiw	r30, 0x06	; 6
    2f9e:	e4 91       	lpm	r30, Z
    2fa0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fa2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fa4:	2e 9f       	mul	r18, r30
    2fa6:	80 0d       	add	r24, r0
    2fa8:	91 1d       	adc	r25, r1
    2faa:	11 24       	eor	r1, r1
    2fac:	9f 87       	std	Y+15, r25	; 0x0f
    2fae:	8e 87       	std	Y+14, r24	; 0x0e
    2fb0:	69 c0       	rjmp	.+210    	; 0x3084 <_ZN12Adafruit_GFX5writeEh+0x194>
    2fb2:	6d 30       	cpi	r22, 0x0D	; 13
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <_ZN12Adafruit_GFX5writeEh+0xc8>
    2fb6:	66 c0       	rjmp	.+204    	; 0x3084 <_ZN12Adafruit_GFX5writeEh+0x194>
    2fb8:	fc 01       	movw	r30, r24
    2fba:	34 96       	adiw	r30, 0x04	; 4
    2fbc:	34 91       	lpm	r19, Z
    2fbe:	63 17       	cp	r22, r19
    2fc0:	08 f4       	brcc	.+2      	; 0x2fc4 <_ZN12Adafruit_GFX5writeEh+0xd4>
    2fc2:	60 c0       	rjmp	.+192    	; 0x3084 <_ZN12Adafruit_GFX5writeEh+0x194>
    2fc4:	31 96       	adiw	r30, 0x01	; 1
    2fc6:	e4 91       	lpm	r30, Z
    2fc8:	e6 17       	cp	r30, r22
    2fca:	08 f4       	brcc	.+2      	; 0x2fce <_ZN12Adafruit_GFX5writeEh+0xde>
    2fcc:	5b c0       	rjmp	.+182    	; 0x3084 <_ZN12Adafruit_GFX5writeEh+0x194>
    2fce:	fc 01       	movw	r30, r24
    2fd0:	32 96       	adiw	r30, 0x02	; 2
    2fd2:	65 91       	lpm	r22, Z+
    2fd4:	74 91       	lpm	r23, Z
    2fd6:	42 2f       	mov	r20, r18
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	43 1b       	sub	r20, r19
    2fdc:	51 09       	sbc	r21, r1
    2fde:	37 e0       	ldi	r19, 0x07	; 7
    2fe0:	34 9f       	mul	r19, r20
    2fe2:	50 01       	movw	r10, r0
    2fe4:	35 9f       	mul	r19, r21
    2fe6:	b0 0c       	add	r11, r0
    2fe8:	11 24       	eor	r1, r1
    2fea:	a6 0e       	add	r10, r22
    2fec:	b7 1e       	adc	r11, r23
    2fee:	f5 01       	movw	r30, r10
    2ff0:	32 96       	adiw	r30, 0x02	; 2
    2ff2:	34 91       	lpm	r19, Z
    2ff4:	31 96       	adiw	r30, 0x01	; 1
    2ff6:	e4 91       	lpm	r30, Z
    2ff8:	33 23       	and	r19, r19
    2ffa:	11 f0       	breq	.+4      	; 0x3000 <_ZN12Adafruit_GFX5writeEh+0x110>
    2ffc:	e1 11       	cpse	r30, r1
    2ffe:	0d c0       	rjmp	.+26     	; 0x301a <_ZN12Adafruit_GFX5writeEh+0x12a>
    3000:	f5 01       	movw	r30, r10
    3002:	34 96       	adiw	r30, 0x04	; 4
    3004:	e4 91       	lpm	r30, Z
    3006:	2c 89       	ldd	r18, Y+20	; 0x14
    3008:	8c 85       	ldd	r24, Y+12	; 0x0c
    300a:	9d 85       	ldd	r25, Y+13	; 0x0d
    300c:	e2 9f       	mul	r30, r18
    300e:	80 0d       	add	r24, r0
    3010:	91 1d       	adc	r25, r1
    3012:	11 24       	eor	r1, r1
    3014:	9d 87       	std	Y+13, r25	; 0x0d
    3016:	8c 87       	std	Y+12, r24	; 0x0c
    3018:	35 c0       	rjmp	.+106    	; 0x3084 <_ZN12Adafruit_GFX5writeEh+0x194>
    301a:	f5 01       	movw	r30, r10
    301c:	35 96       	adiw	r30, 0x05	; 5
    301e:	44 91       	lpm	r20, Z
    3020:	5e 89       	ldd	r21, Y+22	; 0x16
    3022:	55 23       	and	r21, r21
    3024:	11 f1       	breq	.+68     	; 0x306a <_ZN12Adafruit_GFX5writeEh+0x17a>
    3026:	6c 89       	ldd	r22, Y+20	; 0x14
    3028:	e3 2f       	mov	r30, r19
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	e4 0f       	add	r30, r20
    302e:	f1 1d       	adc	r31, r1
    3030:	47 fd       	sbrc	r20, 7
    3032:	fa 95       	dec	r31
    3034:	6e 9f       	mul	r22, r30
    3036:	d0 01       	movw	r26, r0
    3038:	6f 9f       	mul	r22, r31
    303a:	b0 0d       	add	r27, r0
    303c:	11 24       	eor	r1, r1
    303e:	4c 85       	ldd	r20, Y+12	; 0x0c
    3040:	5d 85       	ldd	r21, Y+13	; 0x0d
    3042:	4a 0f       	add	r20, r26
    3044:	5b 1f       	adc	r21, r27
    3046:	e8 85       	ldd	r30, Y+8	; 0x08
    3048:	f9 85       	ldd	r31, Y+9	; 0x09
    304a:	e4 17       	cp	r30, r20
    304c:	f5 07       	cpc	r31, r21
    304e:	6c f4       	brge	.+26     	; 0x306a <_ZN12Adafruit_GFX5writeEh+0x17a>
    3050:	1d 86       	std	Y+13, r1	; 0x0d
    3052:	1c 86       	std	Y+12, r1	; 0x0c
    3054:	fc 01       	movw	r30, r24
    3056:	36 96       	adiw	r30, 0x06	; 6
    3058:	e4 91       	lpm	r30, Z
    305a:	8e 85       	ldd	r24, Y+14	; 0x0e
    305c:	9f 85       	ldd	r25, Y+15	; 0x0f
    305e:	6e 9f       	mul	r22, r30
    3060:	80 0d       	add	r24, r0
    3062:	91 1d       	adc	r25, r1
    3064:	11 24       	eor	r1, r1
    3066:	9f 87       	std	Y+15, r25	; 0x0f
    3068:	8e 87       	std	Y+14, r24	; 0x0e
    306a:	ea 88       	ldd	r14, Y+18	; 0x12
    306c:	fb 88       	ldd	r15, Y+19	; 0x13
    306e:	08 89       	ldd	r16, Y+16	; 0x10
    3070:	19 89       	ldd	r17, Y+17	; 0x11
    3072:	4e 85       	ldd	r20, Y+14	; 0x0e
    3074:	5f 85       	ldd	r21, Y+15	; 0x0f
    3076:	6c 85       	ldd	r22, Y+12	; 0x0c
    3078:	7d 85       	ldd	r23, Y+13	; 0x0d
    307a:	cc 88       	ldd	r12, Y+20	; 0x14
    307c:	ce 01       	movw	r24, r28
    307e:	0e 94 5e 15 	call	0x2abc	; 0x2abc <_ZN12Adafruit_GFX8drawCharEiihjjh>
    3082:	be cf       	rjmp	.-132    	; 0x3000 <_ZN12Adafruit_GFX5writeEh+0x110>
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	1f 91       	pop	r17
    308e:	0f 91       	pop	r16
    3090:	ff 90       	pop	r15
    3092:	ef 90       	pop	r14
    3094:	cf 90       	pop	r12
    3096:	bf 90       	pop	r11
    3098:	af 90       	pop	r10
    309a:	08 95       	ret

0000309c <_ZN12Adafruit_GFX9setCursorEii>:
    309c:	fc 01       	movw	r30, r24
    309e:	75 87       	std	Z+13, r23	; 0x0d
    30a0:	64 87       	std	Z+12, r22	; 0x0c
    30a2:	57 87       	std	Z+15, r21	; 0x0f
    30a4:	46 87       	std	Z+14, r20	; 0x0e
    30a6:	08 95       	ret

000030a8 <_ZN12Adafruit_GFX12setTextColorEj>:
    30a8:	fc 01       	movw	r30, r24
    30aa:	73 8b       	std	Z+19, r23	; 0x13
    30ac:	62 8b       	std	Z+18, r22	; 0x12
    30ae:	71 8b       	std	Z+17, r23	; 0x11
    30b0:	60 8b       	std	Z+16, r22	; 0x10
    30b2:	08 95       	ret

000030b4 <_ZNK12Adafruit_GFX5widthEv>:

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) const {
    return _width;
}
    30b4:	fc 01       	movw	r30, r24
    30b6:	80 85       	ldd	r24, Z+8	; 0x08
    30b8:	91 85       	ldd	r25, Z+9	; 0x09
    30ba:	08 95       	ret

000030bc <_ZNK12Adafruit_GFX6heightEv>:

int16_t Adafruit_GFX::height(void) const {
    return _height;
}
    30bc:	fc 01       	movw	r30, r24
    30be:	82 85       	ldd	r24, Z+10	; 0x0a
    30c0:	93 85       	ldd	r25, Z+11	; 0x0b
    30c2:	08 95       	ret

000030c4 <_ZN15Adafruit_ST773510fillScreenEj>:
  CS_HIGH();

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)    SPI.endTransaction();
#endif
}
    30c4:	ef 92       	push	r14
    30c6:	ff 92       	push	r15
    30c8:	0f 93       	push	r16
    30ca:	1f 93       	push	r17
    30cc:	dc 01       	movw	r26, r24
    30ce:	1a 96       	adiw	r26, 0x0a	; 10
    30d0:	0d 91       	ld	r16, X+
    30d2:	1c 91       	ld	r17, X
    30d4:	1b 97       	sbiw	r26, 0x0b	; 11
    30d6:	18 96       	adiw	r26, 0x08	; 8
    30d8:	2d 91       	ld	r18, X+
    30da:	3c 91       	ld	r19, X
    30dc:	19 97       	sbiw	r26, 0x09	; 9
    30de:	ed 91       	ld	r30, X+
    30e0:	fc 91       	ld	r31, X
    30e2:	00 a0       	ldd	r0, Z+32	; 0x20
    30e4:	f1 a1       	ldd	r31, Z+33	; 0x21
    30e6:	e0 2d       	mov	r30, r0
    30e8:	7b 01       	movw	r14, r22
    30ea:	40 e0       	ldi	r20, 0x00	; 0
    30ec:	50 e0       	ldi	r21, 0x00	; 0
    30ee:	60 e0       	ldi	r22, 0x00	; 0
    30f0:	70 e0       	ldi	r23, 0x00	; 0
    30f2:	09 95       	icall
    30f4:	1f 91       	pop	r17
    30f6:	0f 91       	pop	r16
    30f8:	ff 90       	pop	r15
    30fa:	ef 90       	pop	r14
    30fc:	08 95       	ret

000030fe <_ZN8SPIClass16beginTransactionE11SPISettings>:
    30fe:	20 91 6d 03 	lds	r18, 0x036D	; 0x80036d <_ZN8SPIClass13interruptModeE>
    3102:	22 23       	and	r18, r18
    3104:	99 f0       	breq	.+38     	; 0x312c <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    3106:	4f b7       	in	r20, 0x3f	; 63
    3108:	f8 94       	cli
    310a:	20 91 6d 03 	lds	r18, 0x036D	; 0x80036d <_ZN8SPIClass13interruptModeE>
    310e:	21 30       	cpi	r18, 0x01	; 1
    3110:	59 f4       	brne	.+22     	; 0x3128 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    3112:	2d b3       	in	r18, 0x1d	; 29
    3114:	20 93 6b 03 	sts	0x036B, r18	; 0x80036b <_ZN8SPIClass13interruptSaveE>
    3118:	3d b3       	in	r19, 0x1d	; 29
    311a:	20 91 6c 03 	lds	r18, 0x036C	; 0x80036c <_ZN8SPIClass13interruptMaskE>
    311e:	20 95       	com	r18
    3120:	23 23       	and	r18, r19
    3122:	2d bb       	out	0x1d, r18	; 29
    3124:	4f bf       	out	0x3f, r20	; 63
    3126:	02 c0       	rjmp	.+4      	; 0x312c <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    3128:	40 93 6b 03 	sts	0x036B, r20	; 0x80036b <_ZN8SPIClass13interruptSaveE>
    312c:	8c bd       	out	0x2c, r24	; 44
    312e:	9d bd       	out	0x2d, r25	; 45
    3130:	08 95       	ret

00003132 <_ZN8SPIClass14endTransactionEv>:
    3132:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <_ZN8SPIClass13interruptModeE>
    3136:	88 23       	and	r24, r24
    3138:	61 f0       	breq	.+24     	; 0x3152 <_ZN8SPIClass14endTransactionEv+0x20>
    313a:	9f b7       	in	r25, 0x3f	; 63
    313c:	f8 94       	cli
    313e:	20 91 6d 03 	lds	r18, 0x036D	; 0x80036d <_ZN8SPIClass13interruptModeE>
    3142:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <_ZN8SPIClass13interruptSaveE>
    3146:	21 30       	cpi	r18, 0x01	; 1
    3148:	19 f4       	brne	.+6      	; 0x3150 <_ZN8SPIClass14endTransactionEv+0x1e>
    314a:	8d bb       	out	0x1d, r24	; 29
    314c:	9f bf       	out	0x3f, r25	; 63
    314e:	08 95       	ret
    3150:	8f bf       	out	0x3f, r24	; 63
    3152:	08 95       	ret

00003154 <_ZN15Adafruit_ST7735C1Eaaa>:
    3154:	ff 92       	push	r15
    3156:	0f 93       	push	r16
    3158:	1f 93       	push	r17
    315a:	cf 93       	push	r28
    315c:	df 93       	push	r29
    315e:	ec 01       	movw	r28, r24
    3160:	f6 2e       	mov	r15, r22
    3162:	04 2f       	mov	r16, r20
    3164:	12 2f       	mov	r17, r18
    3166:	40 ea       	ldi	r20, 0xA0	; 160
    3168:	50 e0       	ldi	r21, 0x00	; 0
    316a:	60 e8       	ldi	r22, 0x80	; 128
    316c:	70 e0       	ldi	r23, 0x00	; 0
    316e:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN12Adafruit_GFXC1Eii>
    3172:	8e e6       	ldi	r24, 0x6E	; 110
    3174:	91 e0       	ldi	r25, 0x01	; 1
    3176:	99 83       	std	Y+1, r25	; 0x01
    3178:	88 83       	st	Y, r24
    317a:	fc 8e       	std	Y+28, r15	; 0x1c
    317c:	0d 8f       	std	Y+29, r16	; 0x1d
    317e:	1e 8f       	std	Y+30, r17	; 0x1e
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	8b 8f       	std	Y+27, r24	; 0x1b
    3184:	8f ef       	ldi	r24, 0xFF	; 255
    3186:	88 a3       	std	Y+32, r24	; 0x20
    3188:	8f 8f       	std	Y+31, r24	; 0x1f
    318a:	df 91       	pop	r29
    318c:	cf 91       	pop	r28
    318e:	1f 91       	pop	r17
    3190:	0f 91       	pop	r16
    3192:	ff 90       	pop	r15
    3194:	08 95       	ret

00003196 <_ZN15Adafruit_ST77358spiwriteEh>:
    3196:	fc 01       	movw	r30, r24
    3198:	83 8d       	ldd	r24, Z+27	; 0x1b
    319a:	88 23       	and	r24, r24
    319c:	39 f0       	breq	.+14     	; 0x31ac <_ZN15Adafruit_ST77358spiwriteEh+0x16>
    319e:	6e bd       	out	0x2e, r22	; 46
    31a0:	00 00       	nop
    31a2:	0d b4       	in	r0, 0x2d	; 45
    31a4:	07 fe       	sbrs	r0, 7
    31a6:	fd cf       	rjmp	.-6      	; 0x31a2 <_ZN15Adafruit_ST77358spiwriteEh+0xc>
    31a8:	8e b5       	in	r24, 0x2e	; 46
    31aa:	08 95       	ret
    31ac:	28 e0       	ldi	r18, 0x08	; 8
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	90 e8       	ldi	r25, 0x80	; 128
    31b2:	a5 a1       	ldd	r26, Z+37	; 0x25
    31b4:	b6 a1       	ldd	r27, Z+38	; 0x26
    31b6:	85 a5       	ldd	r24, Z+45	; 0x2d
    31b8:	46 2f       	mov	r20, r22
    31ba:	49 23       	and	r20, r25
    31bc:	19 f0       	breq	.+6      	; 0x31c4 <_ZN15Adafruit_ST77358spiwriteEh+0x2e>
    31be:	4c 91       	ld	r20, X
    31c0:	84 2b       	or	r24, r20
    31c2:	03 c0       	rjmp	.+6      	; 0x31ca <_ZN15Adafruit_ST77358spiwriteEh+0x34>
    31c4:	4c 91       	ld	r20, X
    31c6:	80 95       	com	r24
    31c8:	84 23       	and	r24, r20
    31ca:	8c 93       	st	X, r24
    31cc:	a7 a1       	ldd	r26, Z+39	; 0x27
    31ce:	b0 a5       	ldd	r27, Z+40	; 0x28
    31d0:	4c 91       	ld	r20, X
    31d2:	86 a5       	ldd	r24, Z+46	; 0x2e
    31d4:	84 2b       	or	r24, r20
    31d6:	8c 93       	st	X, r24
    31d8:	a7 a1       	ldd	r26, Z+39	; 0x27
    31da:	b0 a5       	ldd	r27, Z+40	; 0x28
    31dc:	4c 91       	ld	r20, X
    31de:	86 a5       	ldd	r24, Z+46	; 0x2e
    31e0:	80 95       	com	r24
    31e2:	84 23       	and	r24, r20
    31e4:	8c 93       	st	X, r24
    31e6:	96 95       	lsr	r25
    31e8:	21 50       	subi	r18, 0x01	; 1
    31ea:	31 09       	sbc	r19, r1
    31ec:	11 f7       	brne	.-60     	; 0x31b2 <_ZN15Adafruit_ST77358spiwriteEh+0x1c>
    31ee:	08 95       	ret

000031f0 <_ZN15Adafruit_ST77357CS_HIGHEv>:
    31f0:	dc 01       	movw	r26, r24
    31f2:	99 96       	adiw	r26, 0x29	; 41
    31f4:	ed 91       	ld	r30, X+
    31f6:	fc 91       	ld	r31, X
    31f8:	9a 97       	sbiw	r26, 0x2a	; 42
    31fa:	90 81       	ld	r25, Z
    31fc:	9f 96       	adiw	r26, 0x2f	; 47
    31fe:	8c 91       	ld	r24, X
    3200:	89 2b       	or	r24, r25
    3202:	80 83       	st	Z, r24
    3204:	08 95       	ret

00003206 <_ZN15Adafruit_ST77356CS_LOWEv>:
    3206:	dc 01       	movw	r26, r24
    3208:	99 96       	adiw	r26, 0x29	; 41
    320a:	ed 91       	ld	r30, X+
    320c:	fc 91       	ld	r31, X
    320e:	9a 97       	sbiw	r26, 0x2a	; 42
    3210:	90 81       	ld	r25, Z
    3212:	9f 96       	adiw	r26, 0x2f	; 47
    3214:	8c 91       	ld	r24, X
    3216:	80 95       	com	r24
    3218:	89 23       	and	r24, r25
    321a:	80 83       	st	Z, r24
    321c:	08 95       	ret

0000321e <_ZN15Adafruit_ST773512writecommandEh>:
    321e:	1f 93       	push	r17
    3220:	cf 93       	push	r28
    3222:	df 93       	push	r29
    3224:	ec 01       	movw	r28, r24
    3226:	16 2f       	mov	r17, r22
    3228:	8b 8d       	ldd	r24, Y+27	; 0x1b
    322a:	88 23       	and	r24, r24
    322c:	31 f0       	breq	.+12     	; 0x323a <_ZN15Adafruit_ST773512writecommandEh+0x1c>
    322e:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <_ZL13mySPISettings>
    3232:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <_ZL13mySPISettings+0x1>
    3236:	0e 94 7f 18 	call	0x30fe	; 0x30fe <_ZN8SPIClass16beginTransactionE11SPISettings>
    323a:	eb a5       	ldd	r30, Y+43	; 0x2b
    323c:	fc a5       	ldd	r31, Y+44	; 0x2c
    323e:	90 81       	ld	r25, Z
    3240:	88 a9       	ldd	r24, Y+48	; 0x30
    3242:	80 95       	com	r24
    3244:	89 23       	and	r24, r25
    3246:	80 83       	st	Z, r24
    3248:	ce 01       	movw	r24, r28
    324a:	0e 94 03 19 	call	0x3206	; 0x3206 <_ZN15Adafruit_ST77356CS_LOWEv>
    324e:	61 2f       	mov	r22, r17
    3250:	ce 01       	movw	r24, r28
    3252:	0e 94 cb 18 	call	0x3196	; 0x3196 <_ZN15Adafruit_ST77358spiwriteEh>
    3256:	ce 01       	movw	r24, r28
    3258:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <_ZN15Adafruit_ST77357CS_HIGHEv>
    325c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    325e:	88 23       	and	r24, r24
    3260:	29 f0       	breq	.+10     	; 0x326c <_ZN15Adafruit_ST773512writecommandEh+0x4e>
    3262:	df 91       	pop	r29
    3264:	cf 91       	pop	r28
    3266:	1f 91       	pop	r17
    3268:	0c 94 99 18 	jmp	0x3132	; 0x3132 <_ZN8SPIClass14endTransactionEv>
    326c:	df 91       	pop	r29
    326e:	cf 91       	pop	r28
    3270:	1f 91       	pop	r17
    3272:	08 95       	ret

00003274 <_ZN15Adafruit_ST773513invertDisplayEb>:
    3274:	61 11       	cpse	r22, r1
    3276:	02 c0       	rjmp	.+4      	; 0x327c <_ZN15Adafruit_ST773513invertDisplayEb+0x8>
    3278:	60 e2       	ldi	r22, 0x20	; 32
    327a:	01 c0       	rjmp	.+2      	; 0x327e <_ZN15Adafruit_ST773513invertDisplayEb+0xa>
    327c:	61 e2       	ldi	r22, 0x21	; 33
    327e:	0c 94 0f 19 	jmp	0x321e	; 0x321e <_ZN15Adafruit_ST773512writecommandEh>

00003282 <_ZN15Adafruit_ST77357DC_HIGHEv>:
    3282:	dc 01       	movw	r26, r24
    3284:	9b 96       	adiw	r26, 0x2b	; 43
    3286:	ed 91       	ld	r30, X+
    3288:	fc 91       	ld	r31, X
    328a:	9c 97       	sbiw	r26, 0x2c	; 44
    328c:	90 81       	ld	r25, Z
    328e:	d0 96       	adiw	r26, 0x30	; 48
    3290:	8c 91       	ld	r24, X
    3292:	89 2b       	or	r24, r25
    3294:	80 83       	st	Z, r24
    3296:	08 95       	ret

00003298 <_ZN15Adafruit_ST77359writedataEh>:
    3298:	1f 93       	push	r17
    329a:	cf 93       	push	r28
    329c:	df 93       	push	r29
    329e:	ec 01       	movw	r28, r24
    32a0:	16 2f       	mov	r17, r22
    32a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32a4:	88 23       	and	r24, r24
    32a6:	31 f0       	breq	.+12     	; 0x32b4 <_ZN15Adafruit_ST77359writedataEh+0x1c>
    32a8:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <_ZL13mySPISettings>
    32ac:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <_ZL13mySPISettings+0x1>
    32b0:	0e 94 7f 18 	call	0x30fe	; 0x30fe <_ZN8SPIClass16beginTransactionE11SPISettings>
    32b4:	ce 01       	movw	r24, r28
    32b6:	0e 94 41 19 	call	0x3282	; 0x3282 <_ZN15Adafruit_ST77357DC_HIGHEv>
    32ba:	ce 01       	movw	r24, r28
    32bc:	0e 94 03 19 	call	0x3206	; 0x3206 <_ZN15Adafruit_ST77356CS_LOWEv>
    32c0:	61 2f       	mov	r22, r17
    32c2:	ce 01       	movw	r24, r28
    32c4:	0e 94 cb 18 	call	0x3196	; 0x3196 <_ZN15Adafruit_ST77358spiwriteEh>
    32c8:	ce 01       	movw	r24, r28
    32ca:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <_ZN15Adafruit_ST77357CS_HIGHEv>
    32ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32d0:	88 23       	and	r24, r24
    32d2:	29 f0       	breq	.+10     	; 0x32de <_ZN15Adafruit_ST77359writedataEh+0x46>
    32d4:	df 91       	pop	r29
    32d6:	cf 91       	pop	r28
    32d8:	1f 91       	pop	r17
    32da:	0c 94 99 18 	jmp	0x3132	; 0x3132 <_ZN8SPIClass14endTransactionEv>
    32de:	df 91       	pop	r29
    32e0:	cf 91       	pop	r28
    32e2:	1f 91       	pop	r17
    32e4:	08 95       	ret

000032e6 <_ZN15Adafruit_ST773511commandListEPKh>:
    32e6:	af 92       	push	r10
    32e8:	bf 92       	push	r11
    32ea:	cf 92       	push	r12
    32ec:	df 92       	push	r13
    32ee:	ef 92       	push	r14
    32f0:	ff 92       	push	r15
    32f2:	0f 93       	push	r16
    32f4:	1f 93       	push	r17
    32f6:	cf 93       	push	r28
    32f8:	df 93       	push	r29
    32fa:	8c 01       	movw	r16, r24
    32fc:	eb 01       	movw	r28, r22
    32fe:	21 96       	adiw	r28, 0x01	; 1
    3300:	fb 01       	movw	r30, r22
    3302:	d4 90       	lpm	r13, Z
    3304:	dd 20       	and	r13, r13
    3306:	09 f4       	brne	.+2      	; 0x330a <_ZN15Adafruit_ST773511commandListEPKh+0x24>
    3308:	37 c0       	rjmp	.+110    	; 0x3378 <_ZN15Adafruit_ST773511commandListEPKh+0x92>
    330a:	fe 01       	movw	r30, r28
    330c:	64 91       	lpm	r22, Z
    330e:	c8 01       	movw	r24, r16
    3310:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN15Adafruit_ST773512writecommandEh>
    3314:	7e 01       	movw	r14, r28
    3316:	f2 e0       	ldi	r31, 0x02	; 2
    3318:	ef 0e       	add	r14, r31
    331a:	f1 1c       	adc	r15, r1
    331c:	fe 01       	movw	r30, r28
    331e:	31 96       	adiw	r30, 0x01	; 1
    3320:	c4 91       	lpm	r28, Z
    3322:	8c 2f       	mov	r24, r28
    3324:	80 78       	andi	r24, 0x80	; 128
    3326:	c8 2e       	mov	r12, r24
    3328:	cf 77       	andi	r28, 0x7F	; 127
    332a:	57 01       	movw	r10, r14
    332c:	dc 2f       	mov	r29, r28
    332e:	d1 50       	subi	r29, 0x01	; 1
    3330:	48 f0       	brcs	.+18     	; 0x3344 <_ZN15Adafruit_ST773511commandListEPKh+0x5e>
    3332:	f5 01       	movw	r30, r10
    3334:	64 91       	lpm	r22, Z
    3336:	c8 01       	movw	r24, r16
    3338:	0e 94 4c 19 	call	0x3298	; 0x3298 <_ZN15Adafruit_ST77359writedataEh>
    333c:	ff ef       	ldi	r31, 0xFF	; 255
    333e:	af 1a       	sub	r10, r31
    3340:	bf 0a       	sbc	r11, r31
    3342:	f5 cf       	rjmp	.-22     	; 0x332e <_ZN15Adafruit_ST773511commandListEPKh+0x48>
    3344:	c7 01       	movw	r24, r14
    3346:	8c 0f       	add	r24, r28
    3348:	91 1d       	adc	r25, r1
    334a:	ec 01       	movw	r28, r24
    334c:	c1 10       	cpse	r12, r1
    334e:	02 c0       	rjmp	.+4      	; 0x3354 <_ZN15Adafruit_ST773511commandListEPKh+0x6e>
    3350:	da 94       	dec	r13
    3352:	d8 cf       	rjmp	.-80     	; 0x3304 <_ZN15Adafruit_ST773511commandListEPKh+0x1e>
    3354:	7c 01       	movw	r14, r24
    3356:	9f ef       	ldi	r25, 0xFF	; 255
    3358:	e9 1a       	sub	r14, r25
    335a:	f9 0a       	sbc	r15, r25
    335c:	fe 01       	movw	r30, r28
    335e:	64 91       	lpm	r22, Z
    3360:	70 e0       	ldi	r23, 0x00	; 0
    3362:	6f 3f       	cpi	r22, 0xFF	; 255
    3364:	71 05       	cpc	r23, r1
    3366:	11 f4       	brne	.+4      	; 0x336c <_ZN15Adafruit_ST773511commandListEPKh+0x86>
    3368:	64 ef       	ldi	r22, 0xF4	; 244
    336a:	71 e0       	ldi	r23, 0x01	; 1
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	0e 94 cc 10 	call	0x2198	; 0x2198 <delay>
    3374:	e7 01       	movw	r28, r14
    3376:	ec cf       	rjmp	.-40     	; 0x3350 <_ZN15Adafruit_ST773511commandListEPKh+0x6a>
    3378:	df 91       	pop	r29
    337a:	cf 91       	pop	r28
    337c:	1f 91       	pop	r17
    337e:	0f 91       	pop	r16
    3380:	ff 90       	pop	r15
    3382:	ef 90       	pop	r14
    3384:	df 90       	pop	r13
    3386:	cf 90       	pop	r12
    3388:	bf 90       	pop	r11
    338a:	af 90       	pop	r10
    338c:	08 95       	ret

0000338e <_ZN15Adafruit_ST773510commonInitEPKh>:
    338e:	0f 93       	push	r16
    3390:	1f 93       	push	r17
    3392:	cf 93       	push	r28
    3394:	df 93       	push	r29
    3396:	ec 01       	movw	r28, r24
    3398:	8b 01       	movw	r16, r22
    339a:	1a a2       	std	Y+34, r1	; 0x22
    339c:	19 a2       	std	Y+33, r1	; 0x21
    339e:	1b a2       	std	Y+35, r1	; 0x23
    33a0:	1c a2       	std	Y+36, r1	; 0x24
    33a2:	61 e0       	ldi	r22, 0x01	; 1
    33a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33a6:	0e 94 89 11 	call	0x2312	; 0x2312 <pinMode>
    33aa:	61 e0       	ldi	r22, 0x01	; 1
    33ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    33ae:	0e 94 89 11 	call	0x2312	; 0x2312 <pinMode>
    33b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    33b4:	08 2e       	mov	r0, r24
    33b6:	00 0c       	add	r0, r0
    33b8:	99 0b       	sbc	r25, r25
    33ba:	fc 01       	movw	r30, r24
    33bc:	e4 52       	subi	r30, 0x24	; 36
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	e4 91       	lpm	r30, Z
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	ee 0f       	add	r30, r30
    33c6:	ff 1f       	adc	r31, r31
    33c8:	e0 51       	subi	r30, 0x10	; 16
    33ca:	ff 4f       	sbci	r31, 0xFF	; 255
    33cc:	25 91       	lpm	r18, Z+
    33ce:	34 91       	lpm	r19, Z
    33d0:	3a a7       	std	Y+42, r19	; 0x2a
    33d2:	29 a7       	std	Y+41, r18	; 0x29
    33d4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    33d6:	02 2e       	mov	r0, r18
    33d8:	00 0c       	add	r0, r0
    33da:	33 0b       	sbc	r19, r19
    33dc:	f9 01       	movw	r30, r18
    33de:	e4 52       	subi	r30, 0x24	; 36
    33e0:	ff 4f       	sbci	r31, 0xFF	; 255
    33e2:	e4 91       	lpm	r30, Z
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	ee 0f       	add	r30, r30
    33e8:	ff 1f       	adc	r31, r31
    33ea:	e0 51       	subi	r30, 0x10	; 16
    33ec:	ff 4f       	sbci	r31, 0xFF	; 255
    33ee:	45 91       	lpm	r20, Z+
    33f0:	54 91       	lpm	r21, Z
    33f2:	5c a7       	std	Y+44, r21	; 0x2c
    33f4:	4b a7       	std	Y+43, r20	; 0x2b
    33f6:	fc 01       	movw	r30, r24
    33f8:	e8 53       	subi	r30, 0x38	; 56
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	e4 91       	lpm	r30, Z
    33fe:	ef a7       	std	Y+47, r30	; 0x2f
    3400:	f9 01       	movw	r30, r18
    3402:	e8 53       	subi	r30, 0x38	; 56
    3404:	ff 4f       	sbci	r31, 0xFF	; 255
    3406:	e4 91       	lpm	r30, Z
    3408:	e8 ab       	std	Y+48, r30	; 0x30
    340a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    340c:	88 23       	and	r24, r24
    340e:	49 f0       	breq	.+18     	; 0x3422 <_ZN15Adafruit_ST773510commonInitEPKh+0x94>
    3410:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <_ZN8SPIClass5beginEv>
    3414:	80 e5       	ldi	r24, 0x50	; 80
    3416:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <_ZL13mySPISettings>
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <_ZL13mySPISettings+0x1>
    3420:	3c c0       	rjmp	.+120    	; 0x349a <_ZN15Adafruit_ST773510commonInitEPKh+0x10c>
    3422:	61 e0       	ldi	r22, 0x01	; 1
    3424:	88 a1       	ldd	r24, Y+32	; 0x20
    3426:	0e 94 89 11 	call	0x2312	; 0x2312 <pinMode>
    342a:	61 e0       	ldi	r22, 0x01	; 1
    342c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    342e:	0e 94 89 11 	call	0x2312	; 0x2312 <pinMode>
    3432:	60 e0       	ldi	r22, 0x00	; 0
    3434:	88 a1       	ldd	r24, Y+32	; 0x20
    3436:	0e 94 c5 11 	call	0x238a	; 0x238a <digitalWrite>
    343a:	60 e0       	ldi	r22, 0x00	; 0
    343c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    343e:	0e 94 c5 11 	call	0x238a	; 0x238a <digitalWrite>
    3442:	88 a1       	ldd	r24, Y+32	; 0x20
    3444:	08 2e       	mov	r0, r24
    3446:	00 0c       	add	r0, r0
    3448:	99 0b       	sbc	r25, r25
    344a:	fc 01       	movw	r30, r24
    344c:	e4 52       	subi	r30, 0x24	; 36
    344e:	ff 4f       	sbci	r31, 0xFF	; 255
    3450:	e4 91       	lpm	r30, Z
    3452:	f0 e0       	ldi	r31, 0x00	; 0
    3454:	ee 0f       	add	r30, r30
    3456:	ff 1f       	adc	r31, r31
    3458:	e0 51       	subi	r30, 0x10	; 16
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	25 91       	lpm	r18, Z+
    345e:	34 91       	lpm	r19, Z
    3460:	38 a7       	std	Y+40, r19	; 0x28
    3462:	2f a3       	std	Y+39, r18	; 0x27
    3464:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3466:	02 2e       	mov	r0, r18
    3468:	00 0c       	add	r0, r0
    346a:	33 0b       	sbc	r19, r19
    346c:	f9 01       	movw	r30, r18
    346e:	e4 52       	subi	r30, 0x24	; 36
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	e4 91       	lpm	r30, Z
    3474:	f0 e0       	ldi	r31, 0x00	; 0
    3476:	ee 0f       	add	r30, r30
    3478:	ff 1f       	adc	r31, r31
    347a:	e0 51       	subi	r30, 0x10	; 16
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	45 91       	lpm	r20, Z+
    3480:	54 91       	lpm	r21, Z
    3482:	5e a3       	std	Y+38, r21	; 0x26
    3484:	4d a3       	std	Y+37, r20	; 0x25
    3486:	fc 01       	movw	r30, r24
    3488:	e8 53       	subi	r30, 0x38	; 56
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	e4 91       	lpm	r30, Z
    348e:	ee a7       	std	Y+46, r30	; 0x2e
    3490:	f9 01       	movw	r30, r18
    3492:	e8 53       	subi	r30, 0x38	; 56
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	e4 91       	lpm	r30, Z
    3498:	ed a7       	std	Y+45, r30	; 0x2d
    349a:	ce 01       	movw	r24, r28
    349c:	0e 94 03 19 	call	0x3206	; 0x3206 <_ZN15Adafruit_ST77356CS_LOWEv>
    34a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34a2:	8f 3f       	cpi	r24, 0xFF	; 255
    34a4:	09 f1       	breq	.+66     	; 0x34e8 <_ZN15Adafruit_ST773510commonInitEPKh+0x15a>
    34a6:	61 e0       	ldi	r22, 0x01	; 1
    34a8:	0e 94 89 11 	call	0x2312	; 0x2312 <pinMode>
    34ac:	61 e0       	ldi	r22, 0x01	; 1
    34ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34b0:	0e 94 c5 11 	call	0x238a	; 0x238a <digitalWrite>
    34b4:	64 ef       	ldi	r22, 0xF4	; 244
    34b6:	71 e0       	ldi	r23, 0x01	; 1
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	0e 94 cc 10 	call	0x2198	; 0x2198 <delay>
    34c0:	60 e0       	ldi	r22, 0x00	; 0
    34c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34c4:	0e 94 c5 11 	call	0x238a	; 0x238a <digitalWrite>
    34c8:	64 ef       	ldi	r22, 0xF4	; 244
    34ca:	71 e0       	ldi	r23, 0x01	; 1
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	0e 94 cc 10 	call	0x2198	; 0x2198 <delay>
    34d4:	61 e0       	ldi	r22, 0x01	; 1
    34d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34d8:	0e 94 c5 11 	call	0x238a	; 0x238a <digitalWrite>
    34dc:	64 ef       	ldi	r22, 0xF4	; 244
    34de:	71 e0       	ldi	r23, 0x01	; 1
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	0e 94 cc 10 	call	0x2198	; 0x2198 <delay>
    34e8:	01 15       	cp	r16, r1
    34ea:	11 05       	cpc	r17, r1
    34ec:	41 f0       	breq	.+16     	; 0x34fe <_ZN15Adafruit_ST773510commonInitEPKh+0x170>
    34ee:	b8 01       	movw	r22, r16
    34f0:	ce 01       	movw	r24, r28
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	1f 91       	pop	r17
    34f8:	0f 91       	pop	r16
    34fa:	0c 94 73 19 	jmp	0x32e6	; 0x32e6 <_ZN15Adafruit_ST773511commandListEPKh>
    34fe:	df 91       	pop	r29
    3500:	cf 91       	pop	r28
    3502:	1f 91       	pop	r17
    3504:	0f 91       	pop	r16
    3506:	08 95       	ret

00003508 <_ZN15Adafruit_ST77355initREh>:
    3508:	1f 93       	push	r17
    350a:	cf 93       	push	r28
    350c:	df 93       	push	r29
    350e:	ec 01       	movw	r28, r24
    3510:	16 2f       	mov	r17, r22
    3512:	63 e6       	ldi	r22, 0x63	; 99
    3514:	76 e0       	ldi	r23, 0x06	; 6
    3516:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN15Adafruit_ST773510commonInitEPKh>
    351a:	11 11       	cpse	r17, r1
    351c:	09 c0       	rjmp	.+18     	; 0x3530 <_ZN15Adafruit_ST77355initREh+0x28>
    351e:	66 e5       	ldi	r22, 0x56	; 86
    3520:	76 e0       	ldi	r23, 0x06	; 6
    3522:	ce 01       	movw	r24, r28
    3524:	0e 94 73 19 	call	0x32e6	; 0x32e6 <_ZN15Adafruit_ST773511commandListEPKh>
    3528:	82 e0       	ldi	r24, 0x02	; 2
    352a:	89 a3       	std	Y+33, r24	; 0x21
    352c:	81 e0       	ldi	r24, 0x01	; 1
    352e:	10 c0       	rjmp	.+32     	; 0x3550 <_ZN15Adafruit_ST77355initREh+0x48>
    3530:	11 30       	cpi	r17, 0x01	; 1
    3532:	81 f4       	brne	.+32     	; 0x3554 <_ZN15Adafruit_ST77355initREh+0x4c>
    3534:	80 e8       	ldi	r24, 0x80	; 128
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	9b 87       	std	Y+11, r25	; 0x0b
    353a:	8a 87       	std	Y+10, r24	; 0x0a
    353c:	99 87       	std	Y+9, r25	; 0x09
    353e:	88 87       	std	Y+8, r24	; 0x08
    3540:	6c e3       	ldi	r22, 0x3C	; 60
    3542:	76 e0       	ldi	r23, 0x06	; 6
    3544:	ce 01       	movw	r24, r28
    3546:	0e 94 73 19 	call	0x32e6	; 0x32e6 <_ZN15Adafruit_ST773511commandListEPKh>
    354a:	82 e0       	ldi	r24, 0x02	; 2
    354c:	89 a3       	std	Y+33, r24	; 0x21
    354e:	83 e0       	ldi	r24, 0x03	; 3
    3550:	8a a3       	std	Y+34, r24	; 0x22
    3552:	18 c0       	rjmp	.+48     	; 0x3584 <_ZN15Adafruit_ST77355initREh+0x7c>
    3554:	14 30       	cpi	r17, 0x04	; 4
    3556:	89 f4       	brne	.+34     	; 0x357a <_ZN15Adafruit_ST77355initREh+0x72>
    3558:	80 ea       	ldi	r24, 0xA0	; 160
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	9b 87       	std	Y+11, r25	; 0x0b
    355e:	8a 87       	std	Y+10, r24	; 0x0a
    3560:	80 e5       	ldi	r24, 0x50	; 80
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	99 87       	std	Y+9, r25	; 0x09
    3566:	88 87       	std	Y+8, r24	; 0x08
    3568:	6f e2       	ldi	r22, 0x2F	; 47
    356a:	76 e0       	ldi	r23, 0x06	; 6
    356c:	ce 01       	movw	r24, r28
    356e:	0e 94 73 19 	call	0x32e6	; 0x32e6 <_ZN15Adafruit_ST773511commandListEPKh>
    3572:	88 e1       	ldi	r24, 0x18	; 24
    3574:	89 a3       	std	Y+33, r24	; 0x21
    3576:	1a a2       	std	Y+34, r1	; 0x22
    3578:	05 c0       	rjmp	.+10     	; 0x3584 <_ZN15Adafruit_ST77355initREh+0x7c>
    357a:	69 e4       	ldi	r22, 0x49	; 73
    357c:	76 e0       	ldi	r23, 0x06	; 6
    357e:	ce 01       	movw	r24, r28
    3580:	0e 94 73 19 	call	0x32e6	; 0x32e6 <_ZN15Adafruit_ST773511commandListEPKh>
    3584:	64 e0       	ldi	r22, 0x04	; 4
    3586:	76 e0       	ldi	r23, 0x06	; 6
    3588:	ce 01       	movw	r24, r28
    358a:	0e 94 73 19 	call	0x32e6	; 0x32e6 <_ZN15Adafruit_ST773511commandListEPKh>
    358e:	12 30       	cpi	r17, 0x02	; 2
    3590:	11 f0       	breq	.+4      	; 0x3596 <_ZN15Adafruit_ST77355initREh+0x8e>
    3592:	14 30       	cpi	r17, 0x04	; 4
    3594:	41 f4       	brne	.+16     	; 0x35a6 <_ZN15Adafruit_ST77355initREh+0x9e>
    3596:	66 e3       	ldi	r22, 0x36	; 54
    3598:	ce 01       	movw	r24, r28
    359a:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN15Adafruit_ST773512writecommandEh>
    359e:	60 ec       	ldi	r22, 0xC0	; 192
    35a0:	ce 01       	movw	r24, r28
    35a2:	0e 94 4c 19 	call	0x3298	; 0x3298 <_ZN15Adafruit_ST77359writedataEh>
    35a6:	1a 8f       	std	Y+26, r17	; 0x1a
    35a8:	e8 81       	ld	r30, Y
    35aa:	f9 81       	ldd	r31, Y+1	; 0x01
    35ac:	00 8c       	ldd	r0, Z+24	; 0x18
    35ae:	f1 8d       	ldd	r31, Z+25	; 0x19
    35b0:	e0 2d       	mov	r30, r0
    35b2:	60 e0       	ldi	r22, 0x00	; 0
    35b4:	ce 01       	movw	r24, r28
    35b6:	df 91       	pop	r29
    35b8:	cf 91       	pop	r28
    35ba:	1f 91       	pop	r17
    35bc:	09 94       	ijmp

000035be <_ZN15Adafruit_ST773513setAddrWindowEhhhh>:
    35be:	ef 92       	push	r14
    35c0:	ff 92       	push	r15
    35c2:	0f 93       	push	r16
    35c4:	1f 93       	push	r17
    35c6:	cf 93       	push	r28
    35c8:	df 93       	push	r29
    35ca:	ec 01       	movw	r28, r24
    35cc:	e6 2e       	mov	r14, r22
    35ce:	14 2f       	mov	r17, r20
    35d0:	f2 2e       	mov	r15, r18
    35d2:	6a e2       	ldi	r22, 0x2A	; 42
    35d4:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN15Adafruit_ST773512writecommandEh>
    35d8:	60 e0       	ldi	r22, 0x00	; 0
    35da:	ce 01       	movw	r24, r28
    35dc:	0e 94 4c 19 	call	0x3298	; 0x3298 <_ZN15Adafruit_ST77359writedataEh>
    35e0:	6b a1       	ldd	r22, Y+35	; 0x23
    35e2:	6e 0d       	add	r22, r14
    35e4:	ce 01       	movw	r24, r28
    35e6:	0e 94 4c 19 	call	0x3298	; 0x3298 <_ZN15Adafruit_ST77359writedataEh>
    35ea:	60 e0       	ldi	r22, 0x00	; 0
    35ec:	ce 01       	movw	r24, r28
    35ee:	0e 94 4c 19 	call	0x3298	; 0x3298 <_ZN15Adafruit_ST77359writedataEh>
    35f2:	6b a1       	ldd	r22, Y+35	; 0x23
    35f4:	6f 0d       	add	r22, r15
    35f6:	ce 01       	movw	r24, r28
    35f8:	0e 94 4c 19 	call	0x3298	; 0x3298 <_ZN15Adafruit_ST77359writedataEh>
    35fc:	6b e2       	ldi	r22, 0x2B	; 43
    35fe:	ce 01       	movw	r24, r28
    3600:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN15Adafruit_ST773512writecommandEh>
    3604:	60 e0       	ldi	r22, 0x00	; 0
    3606:	ce 01       	movw	r24, r28
    3608:	0e 94 4c 19 	call	0x3298	; 0x3298 <_ZN15Adafruit_ST77359writedataEh>
    360c:	6c a1       	ldd	r22, Y+36	; 0x24
    360e:	61 0f       	add	r22, r17
    3610:	ce 01       	movw	r24, r28
    3612:	0e 94 4c 19 	call	0x3298	; 0x3298 <_ZN15Adafruit_ST77359writedataEh>
    3616:	60 e0       	ldi	r22, 0x00	; 0
    3618:	ce 01       	movw	r24, r28
    361a:	0e 94 4c 19 	call	0x3298	; 0x3298 <_ZN15Adafruit_ST77359writedataEh>
    361e:	6c a1       	ldd	r22, Y+36	; 0x24
    3620:	60 0f       	add	r22, r16
    3622:	ce 01       	movw	r24, r28
    3624:	0e 94 4c 19 	call	0x3298	; 0x3298 <_ZN15Adafruit_ST77359writedataEh>
    3628:	6c e2       	ldi	r22, 0x2C	; 44
    362a:	ce 01       	movw	r24, r28
    362c:	df 91       	pop	r29
    362e:	cf 91       	pop	r28
    3630:	1f 91       	pop	r17
    3632:	0f 91       	pop	r16
    3634:	ff 90       	pop	r15
    3636:	ef 90       	pop	r14
    3638:	0c 94 0f 19 	jmp	0x321e	; 0x321e <_ZN15Adafruit_ST773512writecommandEh>

0000363c <_ZN15Adafruit_ST773511setRotationEh>:
    363c:	1f 93       	push	r17
    363e:	cf 93       	push	r28
    3640:	df 93       	push	r29
    3642:	ec 01       	movw	r28, r24
    3644:	16 2f       	mov	r17, r22
    3646:	66 e3       	ldi	r22, 0x36	; 54
    3648:	0e 94 0f 19 	call	0x321e	; 0x321e <_ZN15Adafruit_ST773512writecommandEh>
    364c:	61 2f       	mov	r22, r17
    364e:	63 70       	andi	r22, 0x03	; 3
    3650:	6d 8b       	std	Y+21, r22	; 0x15
    3652:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3654:	62 30       	cpi	r22, 0x02	; 2
    3656:	a1 f0       	breq	.+40     	; 0x3680 <_ZN15Adafruit_ST773511setRotationEh+0x44>
    3658:	63 30       	cpi	r22, 0x03	; 3
    365a:	d1 f1       	breq	.+116    	; 0x36d0 <_ZN15Adafruit_ST773511setRotationEh+0x94>
    365c:	61 30       	cpi	r22, 0x01	; 1
    365e:	41 f0       	breq	.+16     	; 0x3670 <_ZN15Adafruit_ST773511setRotationEh+0x34>
    3660:	82 30       	cpi	r24, 0x02	; 2
    3662:	11 f0       	breq	.+4      	; 0x3668 <_ZN15Adafruit_ST773511setRotationEh+0x2c>
    3664:	84 30       	cpi	r24, 0x04	; 4
    3666:	11 f4       	brne	.+4      	; 0x366c <_ZN15Adafruit_ST773511setRotationEh+0x30>
    3668:	60 ec       	ldi	r22, 0xC0	; 192
    366a:	11 c0       	rjmp	.+34     	; 0x368e <_ZN15Adafruit_ST773511setRotationEh+0x52>
    366c:	68 ec       	ldi	r22, 0xC8	; 200
    366e:	0f c0       	rjmp	.+30     	; 0x368e <_ZN15Adafruit_ST773511setRotationEh+0x52>
    3670:	82 30       	cpi	r24, 0x02	; 2
    3672:	11 f0       	breq	.+4      	; 0x3678 <_ZN15Adafruit_ST773511setRotationEh+0x3c>
    3674:	84 30       	cpi	r24, 0x04	; 4
    3676:	11 f4       	brne	.+4      	; 0x367c <_ZN15Adafruit_ST773511setRotationEh+0x40>
    3678:	60 ea       	ldi	r22, 0xA0	; 160
    367a:	31 c0       	rjmp	.+98     	; 0x36de <_ZN15Adafruit_ST773511setRotationEh+0xa2>
    367c:	68 ea       	ldi	r22, 0xA8	; 168
    367e:	2f c0       	rjmp	.+94     	; 0x36de <_ZN15Adafruit_ST773511setRotationEh+0xa2>
    3680:	82 30       	cpi	r24, 0x02	; 2
    3682:	11 f0       	breq	.+4      	; 0x3688 <_ZN15Adafruit_ST773511setRotationEh+0x4c>
    3684:	84 30       	cpi	r24, 0x04	; 4
    3686:	11 f4       	brne	.+4      	; 0x368c <_ZN15Adafruit_ST773511setRotationEh+0x50>
    3688:	60 e0       	ldi	r22, 0x00	; 0
    368a:	01 c0       	rjmp	.+2      	; 0x368e <_ZN15Adafruit_ST773511setRotationEh+0x52>
    368c:	68 e0       	ldi	r22, 0x08	; 8
    368e:	ce 01       	movw	r24, r28
    3690:	0e 94 4c 19 	call	0x3298	; 0x3298 <_ZN15Adafruit_ST77359writedataEh>
    3694:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3696:	81 30       	cpi	r24, 0x01	; 1
    3698:	29 f4       	brne	.+10     	; 0x36a4 <_ZN15Adafruit_ST773511setRotationEh+0x68>
    369a:	80 e8       	ldi	r24, 0x80	; 128
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	9b 87       	std	Y+11, r25	; 0x0b
    36a0:	8a 87       	std	Y+10, r24	; 0x0a
    36a2:	0f c0       	rjmp	.+30     	; 0x36c2 <_ZN15Adafruit_ST773511setRotationEh+0x86>
    36a4:	84 30       	cpi	r24, 0x04	; 4
    36a6:	39 f4       	brne	.+14     	; 0x36b6 <_ZN15Adafruit_ST773511setRotationEh+0x7a>
    36a8:	80 ea       	ldi	r24, 0xA0	; 160
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	9b 87       	std	Y+11, r25	; 0x0b
    36ae:	8a 87       	std	Y+10, r24	; 0x0a
    36b0:	80 e5       	ldi	r24, 0x50	; 80
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	06 c0       	rjmp	.+12     	; 0x36c2 <_ZN15Adafruit_ST773511setRotationEh+0x86>
    36b6:	80 ea       	ldi	r24, 0xA0	; 160
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	9b 87       	std	Y+11, r25	; 0x0b
    36bc:	8a 87       	std	Y+10, r24	; 0x0a
    36be:	80 e8       	ldi	r24, 0x80	; 128
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	99 87       	std	Y+9, r25	; 0x09
    36c4:	88 87       	std	Y+8, r24	; 0x08
    36c6:	89 a1       	ldd	r24, Y+33	; 0x21
    36c8:	8b a3       	std	Y+35, r24	; 0x23
    36ca:	8a a1       	ldd	r24, Y+34	; 0x22
    36cc:	8c a3       	std	Y+36, r24	; 0x24
    36ce:	27 c0       	rjmp	.+78     	; 0x371e <_ZN15Adafruit_ST773511setRotationEh+0xe2>
    36d0:	82 30       	cpi	r24, 0x02	; 2
    36d2:	11 f0       	breq	.+4      	; 0x36d8 <_ZN15Adafruit_ST773511setRotationEh+0x9c>
    36d4:	84 30       	cpi	r24, 0x04	; 4
    36d6:	11 f4       	brne	.+4      	; 0x36dc <_ZN15Adafruit_ST773511setRotationEh+0xa0>
    36d8:	60 e6       	ldi	r22, 0x60	; 96
    36da:	01 c0       	rjmp	.+2      	; 0x36de <_ZN15Adafruit_ST773511setRotationEh+0xa2>
    36dc:	68 e6       	ldi	r22, 0x68	; 104
    36de:	ce 01       	movw	r24, r28
    36e0:	0e 94 4c 19 	call	0x3298	; 0x3298 <_ZN15Adafruit_ST77359writedataEh>
    36e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    36e6:	81 30       	cpi	r24, 0x01	; 1
    36e8:	29 f4       	brne	.+10     	; 0x36f4 <_ZN15Adafruit_ST773511setRotationEh+0xb8>
    36ea:	80 e8       	ldi	r24, 0x80	; 128
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	99 87       	std	Y+9, r25	; 0x09
    36f0:	88 87       	std	Y+8, r24	; 0x08
    36f2:	0f c0       	rjmp	.+30     	; 0x3712 <_ZN15Adafruit_ST773511setRotationEh+0xd6>
    36f4:	84 30       	cpi	r24, 0x04	; 4
    36f6:	39 f4       	brne	.+14     	; 0x3706 <_ZN15Adafruit_ST773511setRotationEh+0xca>
    36f8:	80 ea       	ldi	r24, 0xA0	; 160
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	99 87       	std	Y+9, r25	; 0x09
    36fe:	88 87       	std	Y+8, r24	; 0x08
    3700:	80 e5       	ldi	r24, 0x50	; 80
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	06 c0       	rjmp	.+12     	; 0x3712 <_ZN15Adafruit_ST773511setRotationEh+0xd6>
    3706:	80 ea       	ldi	r24, 0xA0	; 160
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	99 87       	std	Y+9, r25	; 0x09
    370c:	88 87       	std	Y+8, r24	; 0x08
    370e:	80 e8       	ldi	r24, 0x80	; 128
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	9b 87       	std	Y+11, r25	; 0x0b
    3714:	8a 87       	std	Y+10, r24	; 0x0a
    3716:	89 a1       	ldd	r24, Y+33	; 0x21
    3718:	8c a3       	std	Y+36, r24	; 0x24
    371a:	8a a1       	ldd	r24, Y+34	; 0x22
    371c:	8b a3       	std	Y+35, r24	; 0x23
    371e:	df 91       	pop	r29
    3720:	cf 91       	pop	r28
    3722:	1f 91       	pop	r17
    3724:	08 95       	ret

00003726 <_ZN15Adafruit_ST773513drawFastHLineEiiij>:
#endif
}


void Adafruit_ST7735::drawFastHLine(int16_t x, int16_t y, int16_t w,
  uint16_t color) {
    3726:	df 92       	push	r13
    3728:	ef 92       	push	r14
    372a:	ff 92       	push	r15
    372c:	0f 93       	push	r16
    372e:	1f 93       	push	r17
    3730:	cf 93       	push	r28
    3732:	df 93       	push	r29
    3734:	ec 01       	movw	r28, r24
    3736:	79 01       	movw	r14, r18
    3738:	d0 2e       	mov	r13, r16

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
    373a:	88 85       	ldd	r24, Y+8	; 0x08
    373c:	99 85       	ldd	r25, Y+9	; 0x09
    373e:	68 17       	cp	r22, r24
    3740:	79 07       	cpc	r23, r25
    3742:	0c f0       	brlt	.+2      	; 0x3746 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x20>
    3744:	42 c0       	rjmp	.+132    	; 0x37ca <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xa4>
    3746:	2a 85       	ldd	r18, Y+10	; 0x0a
    3748:	3b 85       	ldd	r19, Y+11	; 0x0b
    374a:	42 17       	cp	r20, r18
    374c:	53 07       	cpc	r21, r19
    374e:	ec f5       	brge	.+122    	; 0x37ca <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xa4>
  if((x+w-1) >= _width)  w = _width-x;
    3750:	9b 01       	movw	r18, r22
    3752:	2e 0d       	add	r18, r14
    3754:	3f 1d       	adc	r19, r15
    3756:	82 17       	cp	r24, r18
    3758:	93 07       	cpc	r25, r19
    375a:	1c f4       	brge	.+6      	; 0x3762 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x3c>
    375c:	7c 01       	movw	r14, r24
    375e:	e6 1a       	sub	r14, r22
    3760:	f7 0a       	sbc	r15, r23
  setAddrWindow(x, y, x+w-1, y);
    3762:	2f ef       	ldi	r18, 0xFF	; 255
    3764:	26 0f       	add	r18, r22
    3766:	2e 0d       	add	r18, r14
    3768:	04 2f       	mov	r16, r20
    376a:	ce 01       	movw	r24, r28
    376c:	0e 94 df 1a 	call	0x35be	; 0x35be <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.beginTransaction(mySPISettings);
    3770:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3772:	88 23       	and	r24, r24
    3774:	31 f0       	breq	.+12     	; 0x3782 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x5c>
    3776:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <_ZL13mySPISettings>
    377a:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <_ZL13mySPISettings+0x1>
    377e:	0e 94 7f 18 	call	0x30fe	; 0x30fe <_ZN8SPIClass16beginTransactionE11SPISettings>
#endif

  DC_HIGH();
    3782:	ce 01       	movw	r24, r28
    3784:	0e 94 41 19 	call	0x3282	; 0x3282 <_ZN15Adafruit_ST77357DC_HIGHEv>
  CS_LOW();
    3788:	ce 01       	movw	r24, r28
    378a:	0e 94 03 19 	call	0x3206	; 0x3206 <_ZN15Adafruit_ST77356CS_LOWEv>
  while (w--) {
    378e:	e1 14       	cp	r14, r1
    3790:	f1 04       	cpc	r15, r1
    3792:	61 f0       	breq	.+24     	; 0x37ac <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x86>
    spiwrite(hi);
    3794:	61 2f       	mov	r22, r17
    3796:	ce 01       	movw	r24, r28
    3798:	0e 94 cb 18 	call	0x3196	; 0x3196 <_ZN15Adafruit_ST77358spiwriteEh>
    spiwrite(lo);
    379c:	6d 2d       	mov	r22, r13
    379e:	ce 01       	movw	r24, r28
    37a0:	0e 94 cb 18 	call	0x3196	; 0x3196 <_ZN15Adafruit_ST77358spiwriteEh>
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	e8 1a       	sub	r14, r24
    37a8:	f1 08       	sbc	r15, r1
  if (hwSPI)      SPI.beginTransaction(mySPISettings);
#endif

  DC_HIGH();
  CS_LOW();
  while (w--) {
    37aa:	f1 cf       	rjmp	.-30     	; 0x378e <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x68>
    spiwrite(hi);
    spiwrite(lo);
  }
  CS_HIGH();
    37ac:	ce 01       	movw	r24, r28
    37ae:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <_ZN15Adafruit_ST77357CS_HIGHEv>

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    37b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37b4:	88 23       	and	r24, r24
    37b6:	49 f0       	breq	.+18     	; 0x37ca <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xa4>
#endif
}
    37b8:	df 91       	pop	r29
    37ba:	cf 91       	pop	r28
    37bc:	1f 91       	pop	r17
    37be:	0f 91       	pop	r16
    37c0:	ff 90       	pop	r15
    37c2:	ef 90       	pop	r14
    37c4:	df 90       	pop	r13
    spiwrite(lo);
  }
  CS_HIGH();

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    37c6:	0c 94 99 18 	jmp	0x3132	; 0x3132 <_ZN8SPIClass14endTransactionEv>
#endif
}
    37ca:	df 91       	pop	r29
    37cc:	cf 91       	pop	r28
    37ce:	1f 91       	pop	r17
    37d0:	0f 91       	pop	r16
    37d2:	ff 90       	pop	r15
    37d4:	ef 90       	pop	r14
    37d6:	df 90       	pop	r13
    37d8:	08 95       	ret

000037da <_ZN15Adafruit_ST77358fillRectEiiiij>:



// fill a rectangle
void Adafruit_ST7735::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
  uint16_t color) {
    37da:	af 92       	push	r10
    37dc:	bf 92       	push	r11
    37de:	cf 92       	push	r12
    37e0:	df 92       	push	r13
    37e2:	ef 92       	push	r14
    37e4:	ff 92       	push	r15
    37e6:	0f 93       	push	r16
    37e8:	1f 93       	push	r17
    37ea:	cf 93       	push	r28
    37ec:	df 93       	push	r29
    37ee:	ec 01       	movw	r28, r24
    37f0:	59 01       	movw	r10, r18
    37f2:	68 01       	movw	r12, r16

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
    37f4:	28 85       	ldd	r18, Y+8	; 0x08
    37f6:	39 85       	ldd	r19, Y+9	; 0x09
    37f8:	62 17       	cp	r22, r18
    37fa:	73 07       	cpc	r23, r19
    37fc:	0c f0       	brlt	.+2      	; 0x3800 <_ZN15Adafruit_ST77358fillRectEiiiij+0x26>
    37fe:	58 c0       	rjmp	.+176    	; 0x38b0 <_ZN15Adafruit_ST77358fillRectEiiiij+0xd6>
    3800:	8a 85       	ldd	r24, Y+10	; 0x0a
    3802:	9b 85       	ldd	r25, Y+11	; 0x0b
    3804:	48 17       	cp	r20, r24
    3806:	59 07       	cpc	r21, r25
    3808:	0c f0       	brlt	.+2      	; 0x380c <_ZN15Adafruit_ST77358fillRectEiiiij+0x32>
    380a:	52 c0       	rjmp	.+164    	; 0x38b0 <_ZN15Adafruit_ST77358fillRectEiiiij+0xd6>
  if((x + w - 1) >= _width)  w = _width  - x;
    380c:	fb 01       	movw	r30, r22
    380e:	ea 0d       	add	r30, r10
    3810:	fb 1d       	adc	r31, r11
    3812:	2e 17       	cp	r18, r30
    3814:	3f 07       	cpc	r19, r31
    3816:	1c f4       	brge	.+6      	; 0x381e <_ZN15Adafruit_ST77358fillRectEiiiij+0x44>
    3818:	59 01       	movw	r10, r18
    381a:	a6 1a       	sub	r10, r22
    381c:	b7 0a       	sbc	r11, r23
  if((y + h - 1) >= _height) h = _height - y;
    381e:	9a 01       	movw	r18, r20
    3820:	2c 0d       	add	r18, r12
    3822:	3d 1d       	adc	r19, r13
    3824:	82 17       	cp	r24, r18
    3826:	93 07       	cpc	r25, r19
    3828:	1c f4       	brge	.+6      	; 0x3830 <_ZN15Adafruit_ST77358fillRectEiiiij+0x56>
    382a:	6c 01       	movw	r12, r24
    382c:	c4 1a       	sub	r12, r20
    382e:	d5 0a       	sbc	r13, r21

  setAddrWindow(x, y, x+w-1, y+h-1);
    3830:	0f ef       	ldi	r16, 0xFF	; 255
    3832:	04 0f       	add	r16, r20
    3834:	0c 0d       	add	r16, r12
    3836:	2f ef       	ldi	r18, 0xFF	; 255
    3838:	26 0f       	add	r18, r22
    383a:	2a 0d       	add	r18, r10
    383c:	ce 01       	movw	r24, r28
    383e:	0e 94 df 1a 	call	0x35be	; 0x35be <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;
    
#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.beginTransaction(mySPISettings);
    3842:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3844:	88 23       	and	r24, r24
    3846:	31 f0       	breq	.+12     	; 0x3854 <_ZN15Adafruit_ST77358fillRectEiiiij+0x7a>
    3848:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <_ZL13mySPISettings>
    384c:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <_ZL13mySPISettings+0x1>
    3850:	0e 94 7f 18 	call	0x30fe	; 0x30fe <_ZN8SPIClass16beginTransactionE11SPISettings>
#endif

  DC_HIGH();
    3854:	ce 01       	movw	r24, r28
    3856:	0e 94 41 19 	call	0x3282	; 0x3282 <_ZN15Adafruit_ST77357DC_HIGHEv>
  CS_LOW();
    385a:	ce 01       	movw	r24, r28
    385c:	0e 94 03 19 	call	0x3206	; 0x3206 <_ZN15Adafruit_ST77356CS_LOWEv>
  for(y=h; y>0; y--) {
    3860:	1c 14       	cp	r1, r12
    3862:	1d 04       	cpc	r1, r13
    3864:	9c f4       	brge	.+38     	; 0x388c <_ZN15Adafruit_ST77358fillRectEiiiij+0xb2>
    3866:	85 01       	movw	r16, r10
    for(x=w; x>0; x--) {
    3868:	10 16       	cp	r1, r16
    386a:	11 06       	cpc	r1, r17
    386c:	5c f4       	brge	.+22     	; 0x3884 <_ZN15Adafruit_ST77358fillRectEiiiij+0xaa>
      spiwrite(hi);
    386e:	6f 2d       	mov	r22, r15
    3870:	ce 01       	movw	r24, r28
    3872:	0e 94 cb 18 	call	0x3196	; 0x3196 <_ZN15Adafruit_ST77358spiwriteEh>
      spiwrite(lo);
    3876:	6e 2d       	mov	r22, r14
    3878:	ce 01       	movw	r24, r28
    387a:	0e 94 cb 18 	call	0x3196	; 0x3196 <_ZN15Adafruit_ST77358spiwriteEh>
#endif

  DC_HIGH();
  CS_LOW();
  for(y=h; y>0; y--) {
    for(x=w; x>0; x--) {
    387e:	01 50       	subi	r16, 0x01	; 1
    3880:	11 09       	sbc	r17, r1
    3882:	f2 cf       	rjmp	.-28     	; 0x3868 <_ZN15Adafruit_ST77358fillRectEiiiij+0x8e>
  if (hwSPI)      SPI.beginTransaction(mySPISettings);
#endif

  DC_HIGH();
  CS_LOW();
  for(y=h; y>0; y--) {
    3884:	81 e0       	ldi	r24, 0x01	; 1
    3886:	c8 1a       	sub	r12, r24
    3888:	d1 08       	sbc	r13, r1
    388a:	ea cf       	rjmp	.-44     	; 0x3860 <_ZN15Adafruit_ST77358fillRectEiiiij+0x86>
    for(x=w; x>0; x--) {
      spiwrite(hi);
      spiwrite(lo);
    }
  }
  CS_HIGH();
    388c:	ce 01       	movw	r24, r28
    388e:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <_ZN15Adafruit_ST77357CS_HIGHEv>

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    3892:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3894:	88 23       	and	r24, r24
    3896:	61 f0       	breq	.+24     	; 0x38b0 <_ZN15Adafruit_ST77358fillRectEiiiij+0xd6>
#endif
}
    3898:	df 91       	pop	r29
    389a:	cf 91       	pop	r28
    389c:	1f 91       	pop	r17
    389e:	0f 91       	pop	r16
    38a0:	ff 90       	pop	r15
    38a2:	ef 90       	pop	r14
    38a4:	df 90       	pop	r13
    38a6:	cf 90       	pop	r12
    38a8:	bf 90       	pop	r11
    38aa:	af 90       	pop	r10
    }
  }
  CS_HIGH();

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    38ac:	0c 94 99 18 	jmp	0x3132	; 0x3132 <_ZN8SPIClass14endTransactionEv>
#endif
}
    38b0:	df 91       	pop	r29
    38b2:	cf 91       	pop	r28
    38b4:	1f 91       	pop	r17
    38b6:	0f 91       	pop	r16
    38b8:	ff 90       	pop	r15
    38ba:	ef 90       	pop	r14
    38bc:	df 90       	pop	r13
    38be:	cf 90       	pop	r12
    38c0:	bf 90       	pop	r11
    38c2:	af 90       	pop	r10
    38c4:	08 95       	ret

000038c6 <_ZN15Adafruit_ST773513drawFastVLineEiiij>:
#endif
}


void Adafruit_ST7735::drawFastVLine(int16_t x, int16_t y, int16_t h,
 uint16_t color) {
    38c6:	df 92       	push	r13
    38c8:	ef 92       	push	r14
    38ca:	ff 92       	push	r15
    38cc:	0f 93       	push	r16
    38ce:	1f 93       	push	r17
    38d0:	cf 93       	push	r28
    38d2:	df 93       	push	r29
    38d4:	ec 01       	movw	r28, r24
    38d6:	79 01       	movw	r14, r18
    38d8:	d0 2e       	mov	r13, r16

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
    38da:	88 85       	ldd	r24, Y+8	; 0x08
    38dc:	99 85       	ldd	r25, Y+9	; 0x09
    38de:	68 17       	cp	r22, r24
    38e0:	79 07       	cpc	r23, r25
    38e2:	0c f0       	brlt	.+2      	; 0x38e6 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x20>
    38e4:	42 c0       	rjmp	.+132    	; 0x396a <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xa4>
    38e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    38e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    38ea:	48 17       	cp	r20, r24
    38ec:	59 07       	cpc	r21, r25
    38ee:	ec f5       	brge	.+122    	; 0x396a <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xa4>
  if((y+h-1) >= _height) h = _height-y;
    38f0:	9a 01       	movw	r18, r20
    38f2:	2e 0d       	add	r18, r14
    38f4:	3f 1d       	adc	r19, r15
    38f6:	82 17       	cp	r24, r18
    38f8:	93 07       	cpc	r25, r19
    38fa:	1c f4       	brge	.+6      	; 0x3902 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x3c>
    38fc:	7c 01       	movw	r14, r24
    38fe:	e4 1a       	sub	r14, r20
    3900:	f5 0a       	sbc	r15, r21
  setAddrWindow(x, y, x, y+h-1);
    3902:	0f ef       	ldi	r16, 0xFF	; 255
    3904:	04 0f       	add	r16, r20
    3906:	0e 0d       	add	r16, r14
    3908:	26 2f       	mov	r18, r22
    390a:	ce 01       	movw	r24, r28
    390c:	0e 94 df 1a 	call	0x35be	; 0x35be <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;
    
#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.beginTransaction(mySPISettings);
    3910:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3912:	88 23       	and	r24, r24
    3914:	31 f0       	breq	.+12     	; 0x3922 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x5c>
    3916:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <_ZL13mySPISettings>
    391a:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <_ZL13mySPISettings+0x1>
    391e:	0e 94 7f 18 	call	0x30fe	; 0x30fe <_ZN8SPIClass16beginTransactionE11SPISettings>
#endif

  DC_HIGH();
    3922:	ce 01       	movw	r24, r28
    3924:	0e 94 41 19 	call	0x3282	; 0x3282 <_ZN15Adafruit_ST77357DC_HIGHEv>
  CS_LOW();
    3928:	ce 01       	movw	r24, r28
    392a:	0e 94 03 19 	call	0x3206	; 0x3206 <_ZN15Adafruit_ST77356CS_LOWEv>
  while (h--) {
    392e:	e1 14       	cp	r14, r1
    3930:	f1 04       	cpc	r15, r1
    3932:	61 f0       	breq	.+24     	; 0x394c <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x86>
    spiwrite(hi);
    3934:	61 2f       	mov	r22, r17
    3936:	ce 01       	movw	r24, r28
    3938:	0e 94 cb 18 	call	0x3196	; 0x3196 <_ZN15Adafruit_ST77358spiwriteEh>
    spiwrite(lo);
    393c:	6d 2d       	mov	r22, r13
    393e:	ce 01       	movw	r24, r28
    3940:	0e 94 cb 18 	call	0x3196	; 0x3196 <_ZN15Adafruit_ST77358spiwriteEh>
    3944:	81 e0       	ldi	r24, 0x01	; 1
    3946:	e8 1a       	sub	r14, r24
    3948:	f1 08       	sbc	r15, r1
    394a:	f1 cf       	rjmp	.-30     	; 0x392e <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x68>
  }
  CS_HIGH();
    394c:	ce 01       	movw	r24, r28
    394e:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <_ZN15Adafruit_ST77357CS_HIGHEv>

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    3952:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3954:	88 23       	and	r24, r24
    3956:	49 f0       	breq	.+18     	; 0x396a <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xa4>
#endif
}
    3958:	df 91       	pop	r29
    395a:	cf 91       	pop	r28
    395c:	1f 91       	pop	r17
    395e:	0f 91       	pop	r16
    3960:	ff 90       	pop	r15
    3962:	ef 90       	pop	r14
    3964:	df 90       	pop	r13
    spiwrite(lo);
  }
  CS_HIGH();

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)      SPI.endTransaction();
    3966:	0c 94 99 18 	jmp	0x3132	; 0x3132 <_ZN8SPIClass14endTransactionEv>
#endif
}
    396a:	df 91       	pop	r29
    396c:	cf 91       	pop	r28
    396e:	1f 91       	pop	r17
    3970:	0f 91       	pop	r16
    3972:	ff 90       	pop	r15
    3974:	ef 90       	pop	r14
    3976:	df 90       	pop	r13
    3978:	08 95       	ret

0000397a <_ZN15Adafruit_ST77359drawPixelEiij>:
#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)    SPI.endTransaction();
#endif
}

void Adafruit_ST7735::drawPixel(int16_t x, int16_t y, uint16_t color) {
    397a:	ff 92       	push	r15
    397c:	0f 93       	push	r16
    397e:	1f 93       	push	r17
    3980:	cf 93       	push	r28
    3982:	df 93       	push	r29
    3984:	ec 01       	movw	r28, r24

  if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
    3986:	77 fd       	sbrc	r23, 7
    3988:	39 c0       	rjmp	.+114    	; 0x39fc <_ZN15Adafruit_ST77359drawPixelEiij+0x82>
    398a:	88 85       	ldd	r24, Y+8	; 0x08
    398c:	99 85       	ldd	r25, Y+9	; 0x09
    398e:	68 17       	cp	r22, r24
    3990:	79 07       	cpc	r23, r25
    3992:	a4 f5       	brge	.+104    	; 0x39fc <_ZN15Adafruit_ST77359drawPixelEiij+0x82>
    3994:	57 fd       	sbrc	r21, 7
    3996:	32 c0       	rjmp	.+100    	; 0x39fc <_ZN15Adafruit_ST77359drawPixelEiij+0x82>
    3998:	8a 85       	ldd	r24, Y+10	; 0x0a
    399a:	9b 85       	ldd	r25, Y+11	; 0x0b
    399c:	48 17       	cp	r20, r24
    399e:	59 07       	cpc	r21, r25
    39a0:	6c f5       	brge	.+90     	; 0x39fc <_ZN15Adafruit_ST77359drawPixelEiij+0x82>
    39a2:	f3 2e       	mov	r15, r19
    39a4:	12 2f       	mov	r17, r18

  setAddrWindow(x,y,x+1,y+1);
    39a6:	01 e0       	ldi	r16, 0x01	; 1
    39a8:	04 0f       	add	r16, r20
    39aa:	21 e0       	ldi	r18, 0x01	; 1
    39ac:	26 0f       	add	r18, r22
    39ae:	ce 01       	movw	r24, r28
    39b0:	0e 94 df 1a 	call	0x35be	; 0x35be <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)     SPI.beginTransaction(mySPISettings);
    39b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39b6:	88 23       	and	r24, r24
    39b8:	31 f0       	breq	.+12     	; 0x39c6 <_ZN15Adafruit_ST77359drawPixelEiij+0x4c>
    39ba:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <_ZL13mySPISettings>
    39be:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <_ZL13mySPISettings+0x1>
    39c2:	0e 94 7f 18 	call	0x30fe	; 0x30fe <_ZN8SPIClass16beginTransactionE11SPISettings>
#endif

  DC_HIGH();
    39c6:	ce 01       	movw	r24, r28
    39c8:	0e 94 41 19 	call	0x3282	; 0x3282 <_ZN15Adafruit_ST77357DC_HIGHEv>
  CS_LOW();
    39cc:	ce 01       	movw	r24, r28
    39ce:	0e 94 03 19 	call	0x3206	; 0x3206 <_ZN15Adafruit_ST77356CS_LOWEv>
  spiwrite(color >> 8);
    39d2:	6f 2d       	mov	r22, r15
    39d4:	ce 01       	movw	r24, r28
    39d6:	0e 94 cb 18 	call	0x3196	; 0x3196 <_ZN15Adafruit_ST77358spiwriteEh>
  spiwrite(color);
    39da:	61 2f       	mov	r22, r17
    39dc:	ce 01       	movw	r24, r28
    39de:	0e 94 cb 18 	call	0x3196	; 0x3196 <_ZN15Adafruit_ST77358spiwriteEh>
  CS_HIGH();
    39e2:	ce 01       	movw	r24, r28
    39e4:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <_ZN15Adafruit_ST77357CS_HIGHEv>

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)     SPI.endTransaction();
    39e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39ea:	88 23       	and	r24, r24
    39ec:	39 f0       	breq	.+14     	; 0x39fc <_ZN15Adafruit_ST77359drawPixelEiij+0x82>
#endif
}
    39ee:	df 91       	pop	r29
    39f0:	cf 91       	pop	r28
    39f2:	1f 91       	pop	r17
    39f4:	0f 91       	pop	r16
    39f6:	ff 90       	pop	r15
  spiwrite(color >> 8);
  spiwrite(color);
  CS_HIGH();

#if defined (SPI_HAS_TRANSACTION)
  if (hwSPI)     SPI.endTransaction();
    39f8:	0c 94 99 18 	jmp	0x3132	; 0x3132 <_ZN8SPIClass14endTransactionEv>
#endif
}
    39fc:	df 91       	pop	r29
    39fe:	cf 91       	pop	r28
    3a00:	1f 91       	pop	r17
    3a02:	0f 91       	pop	r16
    3a04:	ff 90       	pop	r15
    3a06:	08 95       	ret

00003a08 <_GLOBAL__sub_I__ZN15Adafruit_ST7735C2Eaaaaa>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    3a08:	e9 e6       	ldi	r30, 0x69	; 105
    3a0a:	f3 e0       	ldi	r31, 0x03	; 3
    3a0c:	80 e5       	ldi	r24, 0x50	; 80
    3a0e:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    3a10:	11 82       	std	Z+1, r1	; 0x01
    3a12:	08 95       	ret

00003a14 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    3a14:	cf 93       	push	r28
  uint8_t sreg = SREG;
    3a16:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3a18:	f8 94       	cli
  if (!initialized) {
    3a1a:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <_ZN8SPIClass11initializedE>
    3a1e:	81 11       	cpse	r24, r1
    3a20:	27 c0       	rjmp	.+78     	; 0x3a70 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    3a22:	e6 ee       	ldi	r30, 0xE6	; 230
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    3a28:	e2 ed       	ldi	r30, 0xD2	; 210
    3a2a:	f0 e0       	ldi	r31, 0x00	; 0
    3a2c:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    3a2e:	e8 2f       	mov	r30, r24
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	ee 0f       	add	r30, r30
    3a34:	ff 1f       	adc	r31, r31
    3a36:	e6 50       	subi	r30, 0x06	; 6
    3a38:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3a:	a5 91       	lpm	r26, Z+
    3a3c:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    3a3e:	ec 91       	ld	r30, X
    3a40:	e9 23       	and	r30, r25
    3a42:	21 f4       	brne	.+8      	; 0x3a4c <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    3a44:	61 e0       	ldi	r22, 0x01	; 1
    3a46:	8a e0       	ldi	r24, 0x0A	; 10
    3a48:	0e 94 c5 11 	call	0x238a	; 0x238a <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3a4c:	61 e0       	ldi	r22, 0x01	; 1
    3a4e:	8a e0       	ldi	r24, 0x0A	; 10
    3a50:	0e 94 89 11 	call	0x2312	; 0x2312 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    3a54:	8c b5       	in	r24, 0x2c	; 44
    3a56:	80 61       	ori	r24, 0x10	; 16
    3a58:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3a5a:	8c b5       	in	r24, 0x2c	; 44
    3a5c:	80 64       	ori	r24, 0x40	; 64
    3a5e:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    3a60:	61 e0       	ldi	r22, 0x01	; 1
    3a62:	8d e0       	ldi	r24, 0x0D	; 13
    3a64:	0e 94 89 11 	call	0x2312	; 0x2312 <pinMode>
    pinMode(MOSI, OUTPUT);
    3a68:	61 e0       	ldi	r22, 0x01	; 1
    3a6a:	8b e0       	ldi	r24, 0x0B	; 11
    3a6c:	0e 94 89 11 	call	0x2312	; 0x2312 <pinMode>
  }
  initialized++; // reference count
    3a70:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <_ZN8SPIClass11initializedE>
    3a74:	8f 5f       	subi	r24, 0xFF	; 255
    3a76:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3a7a:	cf bf       	out	0x3f, r28	; 63
}
    3a7c:	cf 91       	pop	r28
    3a7e:	08 95       	ret

00003a80 <__cxa_pure_virtual>:
    3a80:	0e 94 57 1f 	call	0x3eae	; 0x3eae <abort>

00003a84 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3a84:	08 95       	ret

00003a86 <__unordsf2>:
    3a86:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__fp_cmp>
    3a8a:	88 0b       	sbc	r24, r24
    3a8c:	99 0b       	sbc	r25, r25
    3a8e:	08 95       	ret

00003a90 <__udivmodsi4>:
    3a90:	a1 e2       	ldi	r26, 0x21	; 33
    3a92:	1a 2e       	mov	r1, r26
    3a94:	aa 1b       	sub	r26, r26
    3a96:	bb 1b       	sub	r27, r27
    3a98:	fd 01       	movw	r30, r26
    3a9a:	0d c0       	rjmp	.+26     	; 0x3ab6 <__udivmodsi4_ep>

00003a9c <__udivmodsi4_loop>:
    3a9c:	aa 1f       	adc	r26, r26
    3a9e:	bb 1f       	adc	r27, r27
    3aa0:	ee 1f       	adc	r30, r30
    3aa2:	ff 1f       	adc	r31, r31
    3aa4:	a2 17       	cp	r26, r18
    3aa6:	b3 07       	cpc	r27, r19
    3aa8:	e4 07       	cpc	r30, r20
    3aaa:	f5 07       	cpc	r31, r21
    3aac:	20 f0       	brcs	.+8      	; 0x3ab6 <__udivmodsi4_ep>
    3aae:	a2 1b       	sub	r26, r18
    3ab0:	b3 0b       	sbc	r27, r19
    3ab2:	e4 0b       	sbc	r30, r20
    3ab4:	f5 0b       	sbc	r31, r21

00003ab6 <__udivmodsi4_ep>:
    3ab6:	66 1f       	adc	r22, r22
    3ab8:	77 1f       	adc	r23, r23
    3aba:	88 1f       	adc	r24, r24
    3abc:	99 1f       	adc	r25, r25
    3abe:	1a 94       	dec	r1
    3ac0:	69 f7       	brne	.-38     	; 0x3a9c <__udivmodsi4_loop>
    3ac2:	60 95       	com	r22
    3ac4:	70 95       	com	r23
    3ac6:	80 95       	com	r24
    3ac8:	90 95       	com	r25
    3aca:	9b 01       	movw	r18, r22
    3acc:	ac 01       	movw	r20, r24
    3ace:	bd 01       	movw	r22, r26
    3ad0:	cf 01       	movw	r24, r30
    3ad2:	08 95       	ret

00003ad4 <__tablejump2__>:
    3ad4:	ee 0f       	add	r30, r30
    3ad6:	ff 1f       	adc	r31, r31
    3ad8:	05 90       	lpm	r0, Z+
    3ada:	f4 91       	lpm	r31, Z
    3adc:	e0 2d       	mov	r30, r0
    3ade:	09 94       	ijmp

00003ae0 <malloc>:
    3ae0:	0f 93       	push	r16
    3ae2:	1f 93       	push	r17
    3ae4:	cf 93       	push	r28
    3ae6:	df 93       	push	r29
    3ae8:	82 30       	cpi	r24, 0x02	; 2
    3aea:	91 05       	cpc	r25, r1
    3aec:	10 f4       	brcc	.+4      	; 0x3af2 <malloc+0x12>
    3aee:	82 e0       	ldi	r24, 0x02	; 2
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <__flp>
    3af6:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <__flp+0x1>
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	a0 e0       	ldi	r26, 0x00	; 0
    3b00:	b0 e0       	ldi	r27, 0x00	; 0
    3b02:	30 97       	sbiw	r30, 0x00	; 0
    3b04:	19 f1       	breq	.+70     	; 0x3b4c <malloc+0x6c>
    3b06:	40 81       	ld	r20, Z
    3b08:	51 81       	ldd	r21, Z+1	; 0x01
    3b0a:	02 81       	ldd	r16, Z+2	; 0x02
    3b0c:	13 81       	ldd	r17, Z+3	; 0x03
    3b0e:	48 17       	cp	r20, r24
    3b10:	59 07       	cpc	r21, r25
    3b12:	c8 f0       	brcs	.+50     	; 0x3b46 <malloc+0x66>
    3b14:	84 17       	cp	r24, r20
    3b16:	95 07       	cpc	r25, r21
    3b18:	69 f4       	brne	.+26     	; 0x3b34 <malloc+0x54>
    3b1a:	10 97       	sbiw	r26, 0x00	; 0
    3b1c:	31 f0       	breq	.+12     	; 0x3b2a <malloc+0x4a>
    3b1e:	12 96       	adiw	r26, 0x02	; 2
    3b20:	0c 93       	st	X, r16
    3b22:	12 97       	sbiw	r26, 0x02	; 2
    3b24:	13 96       	adiw	r26, 0x03	; 3
    3b26:	1c 93       	st	X, r17
    3b28:	27 c0       	rjmp	.+78     	; 0x3b78 <malloc+0x98>
    3b2a:	00 93 71 03 	sts	0x0371, r16	; 0x800371 <__flp>
    3b2e:	10 93 72 03 	sts	0x0372, r17	; 0x800372 <__flp+0x1>
    3b32:	22 c0       	rjmp	.+68     	; 0x3b78 <malloc+0x98>
    3b34:	21 15       	cp	r18, r1
    3b36:	31 05       	cpc	r19, r1
    3b38:	19 f0       	breq	.+6      	; 0x3b40 <malloc+0x60>
    3b3a:	42 17       	cp	r20, r18
    3b3c:	53 07       	cpc	r21, r19
    3b3e:	18 f4       	brcc	.+6      	; 0x3b46 <malloc+0x66>
    3b40:	9a 01       	movw	r18, r20
    3b42:	bd 01       	movw	r22, r26
    3b44:	ef 01       	movw	r28, r30
    3b46:	df 01       	movw	r26, r30
    3b48:	f8 01       	movw	r30, r16
    3b4a:	db cf       	rjmp	.-74     	; 0x3b02 <malloc+0x22>
    3b4c:	21 15       	cp	r18, r1
    3b4e:	31 05       	cpc	r19, r1
    3b50:	f9 f0       	breq	.+62     	; 0x3b90 <malloc+0xb0>
    3b52:	28 1b       	sub	r18, r24
    3b54:	39 0b       	sbc	r19, r25
    3b56:	24 30       	cpi	r18, 0x04	; 4
    3b58:	31 05       	cpc	r19, r1
    3b5a:	80 f4       	brcc	.+32     	; 0x3b7c <malloc+0x9c>
    3b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b60:	61 15       	cp	r22, r1
    3b62:	71 05       	cpc	r23, r1
    3b64:	21 f0       	breq	.+8      	; 0x3b6e <malloc+0x8e>
    3b66:	fb 01       	movw	r30, r22
    3b68:	93 83       	std	Z+3, r25	; 0x03
    3b6a:	82 83       	std	Z+2, r24	; 0x02
    3b6c:	04 c0       	rjmp	.+8      	; 0x3b76 <malloc+0x96>
    3b6e:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <__flp+0x1>
    3b72:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <__flp>
    3b76:	fe 01       	movw	r30, r28
    3b78:	32 96       	adiw	r30, 0x02	; 2
    3b7a:	44 c0       	rjmp	.+136    	; 0x3c04 <malloc+0x124>
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	e2 0f       	add	r30, r18
    3b80:	f3 1f       	adc	r31, r19
    3b82:	81 93       	st	Z+, r24
    3b84:	91 93       	st	Z+, r25
    3b86:	22 50       	subi	r18, 0x02	; 2
    3b88:	31 09       	sbc	r19, r1
    3b8a:	39 83       	std	Y+1, r19	; 0x01
    3b8c:	28 83       	st	Y, r18
    3b8e:	3a c0       	rjmp	.+116    	; 0x3c04 <malloc+0x124>
    3b90:	20 91 6f 03 	lds	r18, 0x036F	; 0x80036f <__brkval>
    3b94:	30 91 70 03 	lds	r19, 0x0370	; 0x800370 <__brkval+0x1>
    3b98:	23 2b       	or	r18, r19
    3b9a:	41 f4       	brne	.+16     	; 0x3bac <malloc+0xcc>
    3b9c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3ba0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3ba4:	30 93 70 03 	sts	0x0370, r19	; 0x800370 <__brkval+0x1>
    3ba8:	20 93 6f 03 	sts	0x036F, r18	; 0x80036f <__brkval>
    3bac:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3bb0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3bb4:	21 15       	cp	r18, r1
    3bb6:	31 05       	cpc	r19, r1
    3bb8:	41 f4       	brne	.+16     	; 0x3bca <malloc+0xea>
    3bba:	2d b7       	in	r18, 0x3d	; 61
    3bbc:	3e b7       	in	r19, 0x3e	; 62
    3bbe:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3bc2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3bc6:	24 1b       	sub	r18, r20
    3bc8:	35 0b       	sbc	r19, r21
    3bca:	e0 91 6f 03 	lds	r30, 0x036F	; 0x80036f <__brkval>
    3bce:	f0 91 70 03 	lds	r31, 0x0370	; 0x800370 <__brkval+0x1>
    3bd2:	e2 17       	cp	r30, r18
    3bd4:	f3 07       	cpc	r31, r19
    3bd6:	a0 f4       	brcc	.+40     	; 0x3c00 <malloc+0x120>
    3bd8:	2e 1b       	sub	r18, r30
    3bda:	3f 0b       	sbc	r19, r31
    3bdc:	28 17       	cp	r18, r24
    3bde:	39 07       	cpc	r19, r25
    3be0:	78 f0       	brcs	.+30     	; 0x3c00 <malloc+0x120>
    3be2:	ac 01       	movw	r20, r24
    3be4:	4e 5f       	subi	r20, 0xFE	; 254
    3be6:	5f 4f       	sbci	r21, 0xFF	; 255
    3be8:	24 17       	cp	r18, r20
    3bea:	35 07       	cpc	r19, r21
    3bec:	48 f0       	brcs	.+18     	; 0x3c00 <malloc+0x120>
    3bee:	4e 0f       	add	r20, r30
    3bf0:	5f 1f       	adc	r21, r31
    3bf2:	50 93 70 03 	sts	0x0370, r21	; 0x800370 <__brkval+0x1>
    3bf6:	40 93 6f 03 	sts	0x036F, r20	; 0x80036f <__brkval>
    3bfa:	81 93       	st	Z+, r24
    3bfc:	91 93       	st	Z+, r25
    3bfe:	02 c0       	rjmp	.+4      	; 0x3c04 <malloc+0x124>
    3c00:	e0 e0       	ldi	r30, 0x00	; 0
    3c02:	f0 e0       	ldi	r31, 0x00	; 0
    3c04:	cf 01       	movw	r24, r30
    3c06:	df 91       	pop	r29
    3c08:	cf 91       	pop	r28
    3c0a:	1f 91       	pop	r17
    3c0c:	0f 91       	pop	r16
    3c0e:	08 95       	ret

00003c10 <free>:
    3c10:	cf 93       	push	r28
    3c12:	df 93       	push	r29
    3c14:	00 97       	sbiw	r24, 0x00	; 0
    3c16:	09 f4       	brne	.+2      	; 0x3c1a <free+0xa>
    3c18:	81 c0       	rjmp	.+258    	; 0x3d1c <free+0x10c>
    3c1a:	fc 01       	movw	r30, r24
    3c1c:	32 97       	sbiw	r30, 0x02	; 2
    3c1e:	13 82       	std	Z+3, r1	; 0x03
    3c20:	12 82       	std	Z+2, r1	; 0x02
    3c22:	a0 91 71 03 	lds	r26, 0x0371	; 0x800371 <__flp>
    3c26:	b0 91 72 03 	lds	r27, 0x0372	; 0x800372 <__flp+0x1>
    3c2a:	10 97       	sbiw	r26, 0x00	; 0
    3c2c:	81 f4       	brne	.+32     	; 0x3c4e <free+0x3e>
    3c2e:	20 81       	ld	r18, Z
    3c30:	31 81       	ldd	r19, Z+1	; 0x01
    3c32:	82 0f       	add	r24, r18
    3c34:	93 1f       	adc	r25, r19
    3c36:	20 91 6f 03 	lds	r18, 0x036F	; 0x80036f <__brkval>
    3c3a:	30 91 70 03 	lds	r19, 0x0370	; 0x800370 <__brkval+0x1>
    3c3e:	28 17       	cp	r18, r24
    3c40:	39 07       	cpc	r19, r25
    3c42:	51 f5       	brne	.+84     	; 0x3c98 <free+0x88>
    3c44:	f0 93 70 03 	sts	0x0370, r31	; 0x800370 <__brkval+0x1>
    3c48:	e0 93 6f 03 	sts	0x036F, r30	; 0x80036f <__brkval>
    3c4c:	67 c0       	rjmp	.+206    	; 0x3d1c <free+0x10c>
    3c4e:	ed 01       	movw	r28, r26
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	ce 17       	cp	r28, r30
    3c56:	df 07       	cpc	r29, r31
    3c58:	40 f4       	brcc	.+16     	; 0x3c6a <free+0x5a>
    3c5a:	4a 81       	ldd	r20, Y+2	; 0x02
    3c5c:	5b 81       	ldd	r21, Y+3	; 0x03
    3c5e:	9e 01       	movw	r18, r28
    3c60:	41 15       	cp	r20, r1
    3c62:	51 05       	cpc	r21, r1
    3c64:	f1 f0       	breq	.+60     	; 0x3ca2 <free+0x92>
    3c66:	ea 01       	movw	r28, r20
    3c68:	f5 cf       	rjmp	.-22     	; 0x3c54 <free+0x44>
    3c6a:	d3 83       	std	Z+3, r29	; 0x03
    3c6c:	c2 83       	std	Z+2, r28	; 0x02
    3c6e:	40 81       	ld	r20, Z
    3c70:	51 81       	ldd	r21, Z+1	; 0x01
    3c72:	84 0f       	add	r24, r20
    3c74:	95 1f       	adc	r25, r21
    3c76:	c8 17       	cp	r28, r24
    3c78:	d9 07       	cpc	r29, r25
    3c7a:	59 f4       	brne	.+22     	; 0x3c92 <free+0x82>
    3c7c:	88 81       	ld	r24, Y
    3c7e:	99 81       	ldd	r25, Y+1	; 0x01
    3c80:	84 0f       	add	r24, r20
    3c82:	95 1f       	adc	r25, r21
    3c84:	02 96       	adiw	r24, 0x02	; 2
    3c86:	91 83       	std	Z+1, r25	; 0x01
    3c88:	80 83       	st	Z, r24
    3c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c8e:	93 83       	std	Z+3, r25	; 0x03
    3c90:	82 83       	std	Z+2, r24	; 0x02
    3c92:	21 15       	cp	r18, r1
    3c94:	31 05       	cpc	r19, r1
    3c96:	29 f4       	brne	.+10     	; 0x3ca2 <free+0x92>
    3c98:	f0 93 72 03 	sts	0x0372, r31	; 0x800372 <__flp+0x1>
    3c9c:	e0 93 71 03 	sts	0x0371, r30	; 0x800371 <__flp>
    3ca0:	3d c0       	rjmp	.+122    	; 0x3d1c <free+0x10c>
    3ca2:	e9 01       	movw	r28, r18
    3ca4:	fb 83       	std	Y+3, r31	; 0x03
    3ca6:	ea 83       	std	Y+2, r30	; 0x02
    3ca8:	49 91       	ld	r20, Y+
    3caa:	59 91       	ld	r21, Y+
    3cac:	c4 0f       	add	r28, r20
    3cae:	d5 1f       	adc	r29, r21
    3cb0:	ec 17       	cp	r30, r28
    3cb2:	fd 07       	cpc	r31, r29
    3cb4:	61 f4       	brne	.+24     	; 0x3cce <free+0xbe>
    3cb6:	80 81       	ld	r24, Z
    3cb8:	91 81       	ldd	r25, Z+1	; 0x01
    3cba:	84 0f       	add	r24, r20
    3cbc:	95 1f       	adc	r25, r21
    3cbe:	02 96       	adiw	r24, 0x02	; 2
    3cc0:	e9 01       	movw	r28, r18
    3cc2:	99 83       	std	Y+1, r25	; 0x01
    3cc4:	88 83       	st	Y, r24
    3cc6:	82 81       	ldd	r24, Z+2	; 0x02
    3cc8:	93 81       	ldd	r25, Z+3	; 0x03
    3cca:	9b 83       	std	Y+3, r25	; 0x03
    3ccc:	8a 83       	std	Y+2, r24	; 0x02
    3cce:	e0 e0       	ldi	r30, 0x00	; 0
    3cd0:	f0 e0       	ldi	r31, 0x00	; 0
    3cd2:	12 96       	adiw	r26, 0x02	; 2
    3cd4:	8d 91       	ld	r24, X+
    3cd6:	9c 91       	ld	r25, X
    3cd8:	13 97       	sbiw	r26, 0x03	; 3
    3cda:	00 97       	sbiw	r24, 0x00	; 0
    3cdc:	19 f0       	breq	.+6      	; 0x3ce4 <free+0xd4>
    3cde:	fd 01       	movw	r30, r26
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	f7 cf       	rjmp	.-18     	; 0x3cd2 <free+0xc2>
    3ce4:	8d 91       	ld	r24, X+
    3ce6:	9c 91       	ld	r25, X
    3ce8:	11 97       	sbiw	r26, 0x01	; 1
    3cea:	9d 01       	movw	r18, r26
    3cec:	2e 5f       	subi	r18, 0xFE	; 254
    3cee:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf0:	82 0f       	add	r24, r18
    3cf2:	93 1f       	adc	r25, r19
    3cf4:	20 91 6f 03 	lds	r18, 0x036F	; 0x80036f <__brkval>
    3cf8:	30 91 70 03 	lds	r19, 0x0370	; 0x800370 <__brkval+0x1>
    3cfc:	28 17       	cp	r18, r24
    3cfe:	39 07       	cpc	r19, r25
    3d00:	69 f4       	brne	.+26     	; 0x3d1c <free+0x10c>
    3d02:	30 97       	sbiw	r30, 0x00	; 0
    3d04:	29 f4       	brne	.+10     	; 0x3d10 <free+0x100>
    3d06:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <__flp+0x1>
    3d0a:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <__flp>
    3d0e:	02 c0       	rjmp	.+4      	; 0x3d14 <free+0x104>
    3d10:	13 82       	std	Z+3, r1	; 0x03
    3d12:	12 82       	std	Z+2, r1	; 0x02
    3d14:	b0 93 70 03 	sts	0x0370, r27	; 0x800370 <__brkval+0x1>
    3d18:	a0 93 6f 03 	sts	0x036F, r26	; 0x80036f <__brkval>
    3d1c:	df 91       	pop	r29
    3d1e:	cf 91       	pop	r28
    3d20:	08 95       	ret

00003d22 <realloc>:
    3d22:	a0 e0       	ldi	r26, 0x00	; 0
    3d24:	b0 e0       	ldi	r27, 0x00	; 0
    3d26:	e7 e9       	ldi	r30, 0x97	; 151
    3d28:	fe e1       	ldi	r31, 0x1E	; 30
    3d2a:	0c 94 b0 1f 	jmp	0x3f60	; 0x3f60 <__prologue_saves__+0x8>
    3d2e:	ec 01       	movw	r28, r24
    3d30:	00 97       	sbiw	r24, 0x00	; 0
    3d32:	21 f4       	brne	.+8      	; 0x3d3c <realloc+0x1a>
    3d34:	cb 01       	movw	r24, r22
    3d36:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <malloc>
    3d3a:	b4 c0       	rjmp	.+360    	; 0x3ea4 <realloc+0x182>
    3d3c:	fc 01       	movw	r30, r24
    3d3e:	e6 0f       	add	r30, r22
    3d40:	f7 1f       	adc	r31, r23
    3d42:	9c 01       	movw	r18, r24
    3d44:	22 50       	subi	r18, 0x02	; 2
    3d46:	31 09       	sbc	r19, r1
    3d48:	e2 17       	cp	r30, r18
    3d4a:	f3 07       	cpc	r31, r19
    3d4c:	08 f4       	brcc	.+2      	; 0x3d50 <realloc+0x2e>
    3d4e:	a8 c0       	rjmp	.+336    	; 0x3ea0 <realloc+0x17e>
    3d50:	d9 01       	movw	r26, r18
    3d52:	0d 91       	ld	r16, X+
    3d54:	1c 91       	ld	r17, X
    3d56:	11 97       	sbiw	r26, 0x01	; 1
    3d58:	06 17       	cp	r16, r22
    3d5a:	17 07       	cpc	r17, r23
    3d5c:	b0 f0       	brcs	.+44     	; 0x3d8a <realloc+0x68>
    3d5e:	05 30       	cpi	r16, 0x05	; 5
    3d60:	11 05       	cpc	r17, r1
    3d62:	08 f4       	brcc	.+2      	; 0x3d66 <realloc+0x44>
    3d64:	9b c0       	rjmp	.+310    	; 0x3e9c <realloc+0x17a>
    3d66:	c8 01       	movw	r24, r16
    3d68:	04 97       	sbiw	r24, 0x04	; 4
    3d6a:	86 17       	cp	r24, r22
    3d6c:	97 07       	cpc	r25, r23
    3d6e:	08 f4       	brcc	.+2      	; 0x3d72 <realloc+0x50>
    3d70:	95 c0       	rjmp	.+298    	; 0x3e9c <realloc+0x17a>
    3d72:	02 50       	subi	r16, 0x02	; 2
    3d74:	11 09       	sbc	r17, r1
    3d76:	06 1b       	sub	r16, r22
    3d78:	17 0b       	sbc	r17, r23
    3d7a:	01 93       	st	Z+, r16
    3d7c:	11 93       	st	Z+, r17
    3d7e:	6d 93       	st	X+, r22
    3d80:	7c 93       	st	X, r23
    3d82:	cf 01       	movw	r24, r30
    3d84:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <free>
    3d88:	89 c0       	rjmp	.+274    	; 0x3e9c <realloc+0x17a>
    3d8a:	5b 01       	movw	r10, r22
    3d8c:	a0 1a       	sub	r10, r16
    3d8e:	b1 0a       	sbc	r11, r17
    3d90:	4c 01       	movw	r8, r24
    3d92:	80 0e       	add	r8, r16
    3d94:	91 1e       	adc	r9, r17
    3d96:	a0 91 71 03 	lds	r26, 0x0371	; 0x800371 <__flp>
    3d9a:	b0 91 72 03 	lds	r27, 0x0372	; 0x800372 <__flp+0x1>
    3d9e:	61 2c       	mov	r6, r1
    3da0:	71 2c       	mov	r7, r1
    3da2:	e1 2c       	mov	r14, r1
    3da4:	f1 2c       	mov	r15, r1
    3da6:	10 97       	sbiw	r26, 0x00	; 0
    3da8:	09 f4       	brne	.+2      	; 0x3dac <realloc+0x8a>
    3daa:	46 c0       	rjmp	.+140    	; 0x3e38 <realloc+0x116>
    3dac:	8d 91       	ld	r24, X+
    3dae:	9c 91       	ld	r25, X
    3db0:	11 97       	sbiw	r26, 0x01	; 1
    3db2:	a8 15       	cp	r26, r8
    3db4:	b9 05       	cpc	r27, r9
    3db6:	b1 f5       	brne	.+108    	; 0x3e24 <realloc+0x102>
    3db8:	6c 01       	movw	r12, r24
    3dba:	42 e0       	ldi	r20, 0x02	; 2
    3dbc:	c4 0e       	add	r12, r20
    3dbe:	d1 1c       	adc	r13, r1
    3dc0:	ca 14       	cp	r12, r10
    3dc2:	db 04       	cpc	r13, r11
    3dc4:	78 f1       	brcs	.+94     	; 0x3e24 <realloc+0x102>
    3dc6:	4c 01       	movw	r8, r24
    3dc8:	8a 18       	sub	r8, r10
    3dca:	9b 08       	sbc	r9, r11
    3dcc:	64 01       	movw	r12, r8
    3dce:	42 e0       	ldi	r20, 0x02	; 2
    3dd0:	c4 0e       	add	r12, r20
    3dd2:	d1 1c       	adc	r13, r1
    3dd4:	12 96       	adiw	r26, 0x02	; 2
    3dd6:	bc 90       	ld	r11, X
    3dd8:	12 97       	sbiw	r26, 0x02	; 2
    3dda:	13 96       	adiw	r26, 0x03	; 3
    3ddc:	ac 91       	ld	r26, X
    3dde:	b5 e0       	ldi	r27, 0x05	; 5
    3de0:	cb 16       	cp	r12, r27
    3de2:	d1 04       	cpc	r13, r1
    3de4:	40 f0       	brcs	.+16     	; 0x3df6 <realloc+0xd4>
    3de6:	b2 82       	std	Z+2, r11	; 0x02
    3de8:	a3 83       	std	Z+3, r26	; 0x03
    3dea:	91 82       	std	Z+1, r9	; 0x01
    3dec:	80 82       	st	Z, r8
    3dee:	d9 01       	movw	r26, r18
    3df0:	6d 93       	st	X+, r22
    3df2:	7c 93       	st	X, r23
    3df4:	09 c0       	rjmp	.+18     	; 0x3e08 <realloc+0xe6>
    3df6:	0e 5f       	subi	r16, 0xFE	; 254
    3df8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dfa:	80 0f       	add	r24, r16
    3dfc:	91 1f       	adc	r25, r17
    3dfe:	f9 01       	movw	r30, r18
    3e00:	91 83       	std	Z+1, r25	; 0x01
    3e02:	80 83       	st	Z, r24
    3e04:	eb 2d       	mov	r30, r11
    3e06:	fa 2f       	mov	r31, r26
    3e08:	e1 14       	cp	r14, r1
    3e0a:	f1 04       	cpc	r15, r1
    3e0c:	31 f0       	breq	.+12     	; 0x3e1a <realloc+0xf8>
    3e0e:	d7 01       	movw	r26, r14
    3e10:	13 96       	adiw	r26, 0x03	; 3
    3e12:	fc 93       	st	X, r31
    3e14:	ee 93       	st	-X, r30
    3e16:	12 97       	sbiw	r26, 0x02	; 2
    3e18:	41 c0       	rjmp	.+130    	; 0x3e9c <realloc+0x17a>
    3e1a:	f0 93 72 03 	sts	0x0372, r31	; 0x800372 <__flp+0x1>
    3e1e:	e0 93 71 03 	sts	0x0371, r30	; 0x800371 <__flp>
    3e22:	3c c0       	rjmp	.+120    	; 0x3e9c <realloc+0x17a>
    3e24:	68 16       	cp	r6, r24
    3e26:	79 06       	cpc	r7, r25
    3e28:	08 f4       	brcc	.+2      	; 0x3e2c <realloc+0x10a>
    3e2a:	3c 01       	movw	r6, r24
    3e2c:	7d 01       	movw	r14, r26
    3e2e:	12 96       	adiw	r26, 0x02	; 2
    3e30:	0d 90       	ld	r0, X+
    3e32:	bc 91       	ld	r27, X
    3e34:	a0 2d       	mov	r26, r0
    3e36:	b7 cf       	rjmp	.-146    	; 0x3da6 <realloc+0x84>
    3e38:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <__brkval>
    3e3c:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <__brkval+0x1>
    3e40:	88 16       	cp	r8, r24
    3e42:	99 06       	cpc	r9, r25
    3e44:	e1 f4       	brne	.+56     	; 0x3e7e <realloc+0x15c>
    3e46:	66 16       	cp	r6, r22
    3e48:	77 06       	cpc	r7, r23
    3e4a:	c8 f4       	brcc	.+50     	; 0x3e7e <realloc+0x15c>
    3e4c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3e50:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3e54:	00 97       	sbiw	r24, 0x00	; 0
    3e56:	41 f4       	brne	.+16     	; 0x3e68 <realloc+0x146>
    3e58:	8d b7       	in	r24, 0x3d	; 61
    3e5a:	9e b7       	in	r25, 0x3e	; 62
    3e5c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3e60:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3e64:	84 1b       	sub	r24, r20
    3e66:	95 0b       	sbc	r25, r21
    3e68:	e8 17       	cp	r30, r24
    3e6a:	f9 07       	cpc	r31, r25
    3e6c:	c8 f4       	brcc	.+50     	; 0x3ea0 <realloc+0x17e>
    3e6e:	f0 93 70 03 	sts	0x0370, r31	; 0x800370 <__brkval+0x1>
    3e72:	e0 93 6f 03 	sts	0x036F, r30	; 0x80036f <__brkval>
    3e76:	f9 01       	movw	r30, r18
    3e78:	71 83       	std	Z+1, r23	; 0x01
    3e7a:	60 83       	st	Z, r22
    3e7c:	0f c0       	rjmp	.+30     	; 0x3e9c <realloc+0x17a>
    3e7e:	cb 01       	movw	r24, r22
    3e80:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <malloc>
    3e84:	7c 01       	movw	r14, r24
    3e86:	00 97       	sbiw	r24, 0x00	; 0
    3e88:	59 f0       	breq	.+22     	; 0x3ea0 <realloc+0x17e>
    3e8a:	a8 01       	movw	r20, r16
    3e8c:	be 01       	movw	r22, r28
    3e8e:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <memcpy>
    3e92:	ce 01       	movw	r24, r28
    3e94:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <free>
    3e98:	c7 01       	movw	r24, r14
    3e9a:	04 c0       	rjmp	.+8      	; 0x3ea4 <realloc+0x182>
    3e9c:	ce 01       	movw	r24, r28
    3e9e:	02 c0       	rjmp	.+4      	; 0x3ea4 <realloc+0x182>
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	cd b7       	in	r28, 0x3d	; 61
    3ea6:	de b7       	in	r29, 0x3e	; 62
    3ea8:	ee e0       	ldi	r30, 0x0E	; 14
    3eaa:	0c 94 cc 1f 	jmp	0x3f98	; 0x3f98 <__epilogue_restores__+0x8>

00003eae <abort>:
    3eae:	81 e0       	ldi	r24, 0x01	; 1
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	f8 94       	cli
    3eb4:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <_exit>

00003eb8 <memcpy>:
    3eb8:	fb 01       	movw	r30, r22
    3eba:	dc 01       	movw	r26, r24
    3ebc:	02 c0       	rjmp	.+4      	; 0x3ec2 <memcpy+0xa>
    3ebe:	01 90       	ld	r0, Z+
    3ec0:	0d 92       	st	X+, r0
    3ec2:	41 50       	subi	r20, 0x01	; 1
    3ec4:	50 40       	sbci	r21, 0x00	; 0
    3ec6:	d8 f7       	brcc	.-10     	; 0x3ebe <memcpy+0x6>
    3ec8:	08 95       	ret

00003eca <strcpy>:
    3eca:	fb 01       	movw	r30, r22
    3ecc:	dc 01       	movw	r26, r24
    3ece:	01 90       	ld	r0, Z+
    3ed0:	0d 92       	st	X+, r0
    3ed2:	00 20       	and	r0, r0
    3ed4:	e1 f7       	brne	.-8      	; 0x3ece <strcpy+0x4>
    3ed6:	08 95       	ret

00003ed8 <itoa>:
    3ed8:	45 32       	cpi	r20, 0x25	; 37
    3eda:	51 05       	cpc	r21, r1
    3edc:	20 f4       	brcc	.+8      	; 0x3ee6 <itoa+0xe>
    3ede:	42 30       	cpi	r20, 0x02	; 2
    3ee0:	10 f0       	brcs	.+4      	; 0x3ee6 <itoa+0xe>
    3ee2:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__itoa_ncheck>
    3ee6:	fb 01       	movw	r30, r22
    3ee8:	10 82       	st	Z, r1
    3eea:	cb 01       	movw	r24, r22
    3eec:	08 95       	ret

00003eee <__itoa_ncheck>:
    3eee:	bb 27       	eor	r27, r27
    3ef0:	4a 30       	cpi	r20, 0x0A	; 10
    3ef2:	31 f4       	brne	.+12     	; 0x3f00 <__itoa_ncheck+0x12>
    3ef4:	99 23       	and	r25, r25
    3ef6:	22 f4       	brpl	.+8      	; 0x3f00 <__itoa_ncheck+0x12>
    3ef8:	bd e2       	ldi	r27, 0x2D	; 45
    3efa:	90 95       	com	r25
    3efc:	81 95       	neg	r24
    3efe:	9f 4f       	sbci	r25, 0xFF	; 255
    3f00:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <__utoa_common>

00003f04 <__utoa_ncheck>:
    3f04:	bb 27       	eor	r27, r27

00003f06 <__utoa_common>:
    3f06:	fb 01       	movw	r30, r22
    3f08:	55 27       	eor	r21, r21
    3f0a:	aa 27       	eor	r26, r26
    3f0c:	88 0f       	add	r24, r24
    3f0e:	99 1f       	adc	r25, r25
    3f10:	aa 1f       	adc	r26, r26
    3f12:	a4 17       	cp	r26, r20
    3f14:	10 f0       	brcs	.+4      	; 0x3f1a <__utoa_common+0x14>
    3f16:	a4 1b       	sub	r26, r20
    3f18:	83 95       	inc	r24
    3f1a:	50 51       	subi	r21, 0x10	; 16
    3f1c:	b9 f7       	brne	.-18     	; 0x3f0c <__utoa_common+0x6>
    3f1e:	a0 5d       	subi	r26, 0xD0	; 208
    3f20:	aa 33       	cpi	r26, 0x3A	; 58
    3f22:	08 f0       	brcs	.+2      	; 0x3f26 <__utoa_common+0x20>
    3f24:	a9 5d       	subi	r26, 0xD9	; 217
    3f26:	a1 93       	st	Z+, r26
    3f28:	00 97       	sbiw	r24, 0x00	; 0
    3f2a:	79 f7       	brne	.-34     	; 0x3f0a <__utoa_common+0x4>
    3f2c:	b1 11       	cpse	r27, r1
    3f2e:	b1 93       	st	Z+, r27
    3f30:	11 92       	st	Z+, r1
    3f32:	cb 01       	movw	r24, r22
    3f34:	0c 94 9c 1f 	jmp	0x3f38	; 0x3f38 <strrev>

00003f38 <strrev>:
    3f38:	dc 01       	movw	r26, r24
    3f3a:	fc 01       	movw	r30, r24
    3f3c:	67 2f       	mov	r22, r23
    3f3e:	71 91       	ld	r23, Z+
    3f40:	77 23       	and	r23, r23
    3f42:	e1 f7       	brne	.-8      	; 0x3f3c <strrev+0x4>
    3f44:	32 97       	sbiw	r30, 0x02	; 2
    3f46:	04 c0       	rjmp	.+8      	; 0x3f50 <strrev+0x18>
    3f48:	7c 91       	ld	r23, X
    3f4a:	6d 93       	st	X+, r22
    3f4c:	70 83       	st	Z, r23
    3f4e:	62 91       	ld	r22, -Z
    3f50:	ae 17       	cp	r26, r30
    3f52:	bf 07       	cpc	r27, r31
    3f54:	c8 f3       	brcs	.-14     	; 0x3f48 <strrev+0x10>
    3f56:	08 95       	ret

00003f58 <__prologue_saves__>:
    3f58:	2f 92       	push	r2
    3f5a:	3f 92       	push	r3
    3f5c:	4f 92       	push	r4
    3f5e:	5f 92       	push	r5
    3f60:	6f 92       	push	r6
    3f62:	7f 92       	push	r7
    3f64:	8f 92       	push	r8
    3f66:	9f 92       	push	r9
    3f68:	af 92       	push	r10
    3f6a:	bf 92       	push	r11
    3f6c:	cf 92       	push	r12
    3f6e:	df 92       	push	r13
    3f70:	ef 92       	push	r14
    3f72:	ff 92       	push	r15
    3f74:	0f 93       	push	r16
    3f76:	1f 93       	push	r17
    3f78:	cf 93       	push	r28
    3f7a:	df 93       	push	r29
    3f7c:	cd b7       	in	r28, 0x3d	; 61
    3f7e:	de b7       	in	r29, 0x3e	; 62
    3f80:	ca 1b       	sub	r28, r26
    3f82:	db 0b       	sbc	r29, r27
    3f84:	0f b6       	in	r0, 0x3f	; 63
    3f86:	f8 94       	cli
    3f88:	de bf       	out	0x3e, r29	; 62
    3f8a:	0f be       	out	0x3f, r0	; 63
    3f8c:	cd bf       	out	0x3d, r28	; 61
    3f8e:	09 94       	ijmp

00003f90 <__epilogue_restores__>:
    3f90:	2a 88       	ldd	r2, Y+18	; 0x12
    3f92:	39 88       	ldd	r3, Y+17	; 0x11
    3f94:	48 88       	ldd	r4, Y+16	; 0x10
    3f96:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f98:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fa0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fa2:	b9 84       	ldd	r11, Y+9	; 0x09
    3fa4:	c8 84       	ldd	r12, Y+8	; 0x08
    3fa6:	df 80       	ldd	r13, Y+7	; 0x07
    3fa8:	ee 80       	ldd	r14, Y+6	; 0x06
    3faa:	fd 80       	ldd	r15, Y+5	; 0x05
    3fac:	0c 81       	ldd	r16, Y+4	; 0x04
    3fae:	1b 81       	ldd	r17, Y+3	; 0x03
    3fb0:	aa 81       	ldd	r26, Y+2	; 0x02
    3fb2:	b9 81       	ldd	r27, Y+1	; 0x01
    3fb4:	ce 0f       	add	r28, r30
    3fb6:	d1 1d       	adc	r29, r1
    3fb8:	0f b6       	in	r0, 0x3f	; 63
    3fba:	f8 94       	cli
    3fbc:	de bf       	out	0x3e, r29	; 62
    3fbe:	0f be       	out	0x3f, r0	; 63
    3fc0:	cd bf       	out	0x3d, r28	; 61
    3fc2:	ed 01       	movw	r28, r26
    3fc4:	08 95       	ret

00003fc6 <_exit>:
    3fc6:	f8 94       	cli

00003fc8 <__stop_program>:
    3fc8:	ff cf       	rjmp	.-2      	; 0x3fc8 <__stop_program>
